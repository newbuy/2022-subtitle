1
00:00:04,563 --> 00:00:05,947
哈囉，大家好，我是吳承翰

2
00:00:06,031 --> 00:00:07,916
我今天帶來的主題叫做

3
00:00:08,000 --> 00:00:09,484
千行 Swift 打造 iOS 應用程式

4
00:00:10,335 --> 00:00:13,105
在三個月前，我成功在 App Store

5
00:00:13,121 --> 00:00:15,557
發佈了自己的第一個 iOS 開發

6
00:00:15,741 --> 00:00:17,659
App 開發作品叫做 Scholarium

7
00:00:17,776 --> 00:00:20,162
所以今天這場議程

8
00:00:20,178 --> 00:00:25,717
希望透過第一個 App 開發作品的誕生來帶大家認識 iOS 應用程式的開發

9
00:00:25,834 --> 00:00:27,819
或者是了解自己手機中

10
00:00:27,836 --> 00:00:30,355
各種常見功能背後的運作機制

11
00:00:32,841 --> 00:00:35,127
那我在這場議程中如果有任何的問題

12
00:00:35,177 --> 00:00:37,329
可以透過 Slido 進行即時提問

13
00:00:37,779 --> 00:00:39,131
我會在會後的 Q&A

14
00:00:39,181 --> 00:00:42,217
或者是議程結束後做解答

15
00:00:42,417 --> 00:00:44,669
那另外也可以順便先下載 Scholarium

16
00:00:45,020 --> 00:00:47,122
接下來會根據這款 App 的實作經驗

17
00:00:47,305 --> 00:00:49,441
來介紹 iOS App 的開發過程

18
00:00:51,009 --> 00:00:53,445
那可能左右兩邊的螢幕

19
00:00:53,445 --> 00:00:53,462
因為比較暗會比較好掃
那可能左右兩邊的螢幕

20
00:00:53,462 --> 00:00:55,063
因為比較暗會比較好掃

21
00:00:55,447 --> 00:00:57,399
那等一下如果錯過這兩個 QR code 的話

22
00:00:57,516 --> 00:00:59,634
還是可以在議程表上找到連結

23
00:01:00,302 --> 00:01:01,920
那在趁大家掃描的時候

24
00:01:01,920 --> 00:01:03,338
我先做一下自我介紹

25
00:01:05,290 --> 00:01:07,042
那我是來自明倫高中的吳承翰

26
00:01:07,042 --> 00:01:10,462
那上一個學年度是校內程式設計社的社長

27
00:01:11,246 --> 00:01:12,497
那不知道有沒有人和我一樣

28
00:01:13,482 --> 00:01:15,167
都是在小學大概五年級的時候吧

29
00:01:15,500 --> 00:01:17,500
學校教到 Scratch

30
00:01:17,500 --> 00:01:19,500
然後才開始探索資訊這個領域

31
00:01:19,500 --> 00:01:21,490
那後來覺得那開始

32
00:01:21,490 --> 00:01:23,490
比較像是一種教材

33
00:01:23,490 --> 00:01:26,490
所以來開始學習一些文字式的程式語言

34
00:01:26,490 --> 00:01:28,480
像是 Python

35
00:01:28,480 --> 00:01:30,480
然後做一些類似

36
00:01:30,480 --> 00:01:33,500
找質數或者是 1A2B 之類的程式

37
00:01:33,500 --> 00:01:35,500
那今天之所以會有這個計畫

38
00:01:35,500 --> 00:01:36,500
是這個時期的作品

39
00:01:36,500 --> 00:01:39,490
不管是質數的計算還是 1A2B

40
00:01:39,490 --> 00:01:41,490
那他們的畫面都很單調

41
00:01:41,490 --> 00:01:43,490
只有一個黑底白字的命令列視窗

42
00:01:43,490 --> 00:01:45,480
在做輸入輸出

43
00:01:45,480 --> 00:01:49,500
而且如果要把成果和其他人分享的話

44
00:01:49,500 --> 00:01:52,500
像是這個能夠網路連線的 1A2B 遊戲

45
00:01:52,500 --> 00:01:57,490
那就要請對方在自己的電腦上安裝 Python 的直譯器

46
00:01:57,490 --> 00:01:58,490
那相較之下

47
00:01:58,490 --> 00:02:01,480
手機應用程式有豐富的使用者介面

48
00:02:01,480 --> 00:02:03,480
而且只要上傳到 App Store

49
00:02:03,480 --> 00:02:05,500
不管是親朋好友

50
00:02:05,500 --> 00:02:06,500
或者是世界各地的人們

51
00:02:06,500 --> 00:02:10,500
都有可能來使用你的 App

52
00:02:10,500 --> 00:02:12,490
那其實要開發什麼樣的 App

53
00:02:12,490 --> 00:02:14,490
也會是一個大問題

54
00:02:14,490 --> 00:02:16,490
那我這個 Scholarium 的靈感

55
00:02:16,490 --> 00:02:18,480
是來自於剛升上高一的時候

56
00:02:18,480 --> 00:02:20,480
有個同學表示說

57
00:02:20,480 --> 00:02:21,500
現在沒有聯絡簿

58
00:02:21,500 --> 00:02:22,500
所以他覺得

59
00:02:22,500 --> 00:02:23,500
任何的作業考試

60
00:02:23,500 --> 00:02:24,500
還有一些提醒事項

61
00:02:24,500 --> 00:02:26,500
都要自己記有點麻煩

62
00:02:26,500 --> 00:02:28,490
那雖然我覺得這可能不會是什麼大問題

63
00:02:28,490 --> 00:02:30,490
而且沒有聯絡簿就不用每天寫日記

64
00:02:30,490 --> 00:02:32,490
其實應該是好事一件嘛

65
00:02:32,490 --> 00:02:35,480
但是因為畢竟有需求就有市場

66
00:02:35,480 --> 00:02:36,480
而且提醒事項感覺

67
00:02:36,480 --> 00:02:40,500
很適合當作第一次嘗試開發 App 的主題

68
00:02:40,500 --> 00:02:41,500
所以我就決定要做一個

69
00:02:41,500 --> 00:02:46,490
為學生打造的提醒事項 App

70
00:02:46,490 --> 00:02:48,490
那接下來我參考了 App 內建的

71
00:02:48,490 --> 00:02:50,490
iPhone 內建的提醒事項

72
00:02:50,490 --> 00:02:52,480
然後和 App Store 上

73
00:02:52,480 --> 00:02:54,480
其他類似的提醒事項 App

74
00:02:54,480 --> 00:02:56,500
然後開始規劃一些功能

75
00:02:56,500 --> 00:02:58,500
包含最基本的作業清單

76
00:02:58,500 --> 00:03:00,500
他們的增刪改查

77
00:03:00,500 --> 00:03:02,490
然後以及提醒事項最基本的

78
00:03:02,490 --> 00:03:05,490
發送通知的功能

79
00:03:05,490 --> 00:03:07,490
那以及 QR Code 分享作業

80
00:03:07,490 --> 00:03:09,480
然後和主畫面小工具

81
00:03:09,480 --> 00:03:10,480
那因為前面有提到說

82
00:03:10,480 --> 00:03:12,500
這是一個為學生打造的提醒事項 App

83
00:03:12,500 --> 00:03:14,500
所以考量到學生可能會

84
00:03:14,500 --> 00:03:16,500
之間互相詢問有什麼作業

85
00:03:16,500 --> 00:03:18,490
那所以才會有 QR Code 這個功能

86
00:03:18,490 --> 00:03:20,490
讓大家來掃描 QR Code

87
00:03:20,490 --> 00:03:25,480
然後就可以馬上的登錄作業

88
00:03:25,480 --> 00:03:27,480
那等到動機和靈感都有了

89
00:03:27,480 --> 00:03:29,500
我們就可以來準備開發工具

90
00:03:29,500 --> 00:03:32,500
那只要是 Apple 相關平台的開發

91
00:03:32,500 --> 00:03:34,500
一定要有一台 Apple 筆電

92
00:03:34,500 --> 00:03:35,490
不一定要是筆電

93
00:03:35,490 --> 00:03:37,490
但是要是 Apple 電腦

94
00:03:37,490 --> 00:03:38,490
然後以及想開發的平台

95
00:03:38,490 --> 00:03:39,490
它對應的裝置

96
00:03:39,490 --> 00:03:41,490
例如說開發 iOS 的 App

97
00:03:41,490 --> 00:03:42,480
就要有 iPhone

98
00:03:42,480 --> 00:03:44,480
那如果是 iPad OS

99
00:03:44,480 --> 00:03:47,500
就會要有 iPad

100
00:03:47,500 --> 00:03:48,500
那這是因為開發過程中

101
00:03:48,500 --> 00:03:49,500
會使用到一款

102
00:03:49,500 --> 00:03:52,490
名為 Xcode 的整合式開發環境

103
00:03:52,490 --> 00:03:54,490
這是 Apple 免費提供給

104
00:03:54,490 --> 00:03:56,490
開發者們的開發工具

105
00:03:56,490 --> 00:03:57,490
那它裡面有具備

106
00:03:57,490 --> 00:04:00,480
每個平台的開發套件

107
00:04:00,480 --> 00:04:02,500
也就是你建構一個 App 的所需資源

108
00:04:02,500 --> 00:04:04,500
那它可以負責開發

109
00:04:04,500 --> 00:04:06,500
然後測試還有上傳

110
00:04:06,500 --> 00:04:08,490
應用程式這些工作

111
00:04:08,490 --> 00:04:11,490
而且還包含所有裝置的虛擬機

112
00:04:11,490 --> 00:04:13,490
讓你可以來模擬 App 的執行狀況

113
00:04:14,490 --> 00:04:16,480
但是這個 IDE 只能安裝在

114
00:04:16,480 --> 00:04:17,480
macOS 的電腦上

115
00:04:17,480 --> 00:04:19,500
所以一定要有一台 Apple 的電腦

116
00:04:21,500 --> 00:04:22,500
那講到這裡你可能會想說

117
00:04:22,500 --> 00:04:23,500
既然有虛擬機

118
00:04:23,500 --> 00:04:24,500
那是不是就沒有必要

119
00:04:24,500 --> 00:04:26,490
準備實際的裝置了

120
00:04:26,490 --> 00:04:28,490
那其實 Xcode 內的虛擬機

121
00:04:28,490 --> 00:04:30,490
只是模擬 App 的執行狀況

122
00:04:30,490 --> 00:04:32,480
並不是完整的作業系統

123
00:04:32,480 --> 00:04:35,500
所以它不能保證 App 在虛擬機

124
00:04:35,500 --> 00:04:38,500
然後和實際裝置上的表現完全一致

125
00:04:38,500 --> 00:04:40,500
而且有些功能像是相機、麥克風

126
00:04:40,500 --> 00:04:41,500
以及推播通知功能

127
00:04:41,500 --> 00:04:44,490
就必須要在實際裝置上做測試

128
00:04:46,490 --> 00:04:49,480
那再來進到實作歷程與原理的部分

129
00:04:49,480 --> 00:04:50,480
那首先第一個是

130
00:04:50,480 --> 00:04:52,500
關於 App 的使用者介面

131
00:04:52,500 --> 00:04:55,500
那 Swift UI 是 Apple 在 2019 年的

132
00:04:55,500 --> 00:04:57,500
全球開發者大會上

133
00:04:57,500 --> 00:04:59,490
新發表的 UI 框架

134
00:04:59,490 --> 00:05:01,490
那它同時也逐漸取代

135
00:05:01,490 --> 00:05:04,490
過去十年來的 UIKit 成為主流

136
00:05:04,490 --> 00:05:07,480
那以前透過 UIKit 會像做簡報一樣

137
00:05:07,480 --> 00:05:10,500
在佈局畫面上的所有元件

138
00:05:10,500 --> 00:05:12,500
然後再透過程式碼處理這些元件

139
00:05:12,500 --> 00:05:15,490
要顯示的內容以及和使用者的操作

140
00:05:15,490 --> 00:05:17,490
那雖然說是像做簡報一樣

141
00:05:17,490 --> 00:05:20,490
但它並不是像我們想像的這麼簡單

142
00:05:20,490 --> 00:05:23,480
因為它的 iPhone 有很多種不同的尺寸

143
00:05:23,480 --> 00:05:25,500
所以你要去針對

144
00:05:27,500 --> 00:05:29,500
應該說如果你要設定一個元件的位置

145
00:05:29,500 --> 00:05:30,500
那你設定的是

146
00:05:30,500 --> 00:05:33,490
它距離上下左右四個邊緣的間距

147
00:05:36,490 --> 00:05:37,490
然後再來一點是

148
00:05:37,490 --> 00:05:39,480
因為它剛剛有說

149
00:05:39,480 --> 00:05:43,500
它要用程式去控制它顯示的內容和使用者操作

150
00:05:43,500 --> 00:05:45,500
所以必須執行虛擬機

151
00:05:45,500 --> 00:05:47,500
或者是安裝到實際裝置

152
00:05:47,500 --> 00:05:50,490
然後才能看到你使用者介面的實際成果

153
00:05:50,490 --> 00:05:52,490
而且如果要支援其他的平台

154
00:05:52,490 --> 00:05:55,480
就得另外使用他們對應的 UI 框架

155
00:05:55,480 --> 00:05:57,480
那至於我採用的 Swift UI

156
00:05:57,480 --> 00:06:00,500
則是完全建構在程式碼上

157
00:06:00,500 --> 00:06:03,500
而且可以透過 Xcode 內建的即時預覽功能

158
00:06:03,500 --> 00:06:05,490
讓你在撰寫程式的過程

159
00:06:05,490 --> 00:06:07,490
馬上一眼看出結果

160
00:06:07,490 --> 00:06:09,490
這樣就可以省下非常多等待的時間

161
00:06:09,490 --> 00:06:12,480
那最重要的是它可以支援 Apple 旗下的所有平台

162
00:06:12,480 --> 00:06:14,480
所以你的程式只要寫一次

163
00:06:14,480 --> 00:06:16,500
然後再稍微做修改

164
00:06:16,500 --> 00:06:19,500
就可以讓你的使用者介面支援各大平台

165
00:06:21,500 --> 00:06:23,490
那要建立使用者介面的話

166
00:06:23,490 --> 00:06:24,490
我們會定義一個結構體

167
00:06:24,490 --> 00:06:28,480
然後讓它遵守來自 Swift UI 的 View 協定

168
00:06:29,480 --> 00:06:31,480
那依照蘋果的定義

169
00:06:31,480 --> 00:06:33,500
協定可以想成是一種藍圖

170
00:06:33,500 --> 00:06:37,500
其中定義了達成某種任務

171
00:06:37,500 --> 00:06:39,490
或者是功能所需的要素

172
00:06:39,490 --> 00:06:40,490
就像這裡的 View 協定

173
00:06:40,490 --> 00:06:44,490
為了讓系統能呈現使用者介面

174
00:06:44,490 --> 00:06:46,480
所以要求我們在 Content View 中

175
00:06:46,480 --> 00:06:48,500
定義一個名為 Body 的屬性

176
00:06:48,500 --> 00:06:51,500
那 iOS 就會根據裡面的內容來繪製 UI

177
00:06:52,500 --> 00:06:53,500
那至於 Body 的內容

178
00:06:53,500 --> 00:06:55,490
可以運用已經內建的各種基本元件

179
00:06:55,490 --> 00:06:58,490
像是文字、按鈕和選單

180
00:06:58,490 --> 00:07:00,490
來組合出我們需要的內容

181
00:07:00,490 --> 00:07:04,480
而且它還不一定要是整個螢幕畫面

182
00:07:04,480 --> 00:07:06,500
也可以是一個規模較小的顯示區

183
00:07:06,500 --> 00:07:08,500
然後把它當作自訂的元件

184
00:07:08,500 --> 00:07:11,500
然後套用到其他規模較大的螢幕畫面上

185
00:07:11,500 --> 00:07:14,490
那例如說我 APP 中的作業清單

186
00:07:14,490 --> 00:07:16,490
每一列都會有一個告訴你

187
00:07:16,490 --> 00:07:20,480
告訴你作業有沒有完成的狀態指示器

188
00:07:20,480 --> 00:07:23,500
那它再配合一些作業標題的文字顯示區

189
00:07:23,500 --> 00:07:27,500
就會成為作業清單上每一列的顯示區

190
00:07:27,500 --> 00:07:29,490
那最後這些每一列

191
00:07:29,490 --> 00:07:32,490
就會再組成你的作業清單

192
00:07:32,490 --> 00:07:34,490
那同樣的這個狀態指示器

193
00:07:34,490 --> 00:07:38,500
也有出現在作業的詳細資訊頁面裡面

194
00:07:38,500 --> 00:07:40,500
事實上這些所有內建的元件

195
00:07:40,500 --> 00:07:42,500
也都遵守 VIEW 協定

196
00:07:42,500 --> 00:07:44,500
那整個 Swift UI 建構的螢幕畫面

197
00:07:44,500 --> 00:07:46,490
就是由各種大大小小的顯示區

198
00:07:46,490 --> 00:07:52,480
匯聚而成

199
00:07:52,480 --> 00:07:54,480
除此之外 VIEW 協定還提供一種

200
00:07:54,480 --> 00:07:56,500
叫做修飾符的東西

201
00:07:56,500 --> 00:07:59,500
改變系統呈現顯示區的方式

202
00:07:59,500 --> 00:08:05,490
像是他們的顏色、風格還有動畫效果

203
00:08:05,490 --> 00:08:06,490
那到目前為止

204
00:08:06,490 --> 00:08:09,480
我們的 UI 顯示的內容都是事先指定好的

205
00:08:09,480 --> 00:08:11,480
意思就是整個畫面像照片一樣

206
00:08:11,480 --> 00:08:13,500
沒有辦法和使用者互動

207
00:08:13,500 --> 00:08:15,500
那它也不會更新

208
00:08:15,500 --> 00:08:16,500
所以最後一步就是讓使用者

209
00:08:16,500 --> 00:08:18,490
能和我們的 UI 互動

210
00:08:18,490 --> 00:08:24,490
然後由 Swift UI 來替我們更新畫面

211
00:08:25,480 --> 00:08:27,480
那這裡可以先建立一個變數

212
00:08:27,480 --> 00:08:30,500
然後當作文字顯示區要顯示的數值

213
00:08:30,500 --> 00:08:31,500
然後在變數的前面

214
00:08:31,500 --> 00:08:34,500
加上一個 Add State 這個標記

215
00:08:34,500 --> 00:08:36,490
那這麼做的效果是

216
00:08:36,490 --> 00:08:38,490
當這個變數的值被修改

217
00:08:38,490 --> 00:08:40,490
例如說使用者按下按鈕

218
00:08:40,490 --> 00:08:43,480
然後來觸發程式讓變數的值遞增

219
00:08:43,480 --> 00:08:48,500
那 Swift UI 就會來幫我們更新相關的顯示區

220
00:08:48,500 --> 00:08:49,500
另外補充一下

221
00:08:49,500 --> 00:08:52,490
我們通常會把這樣的變數宣告成 Private

222
00:08:52,490 --> 00:08:54,490
那這是 Swift 的存取控制的一環

223
00:08:54,490 --> 00:08:57,490
限定它只能在 ContentView 的內部做存取

224
00:08:57,490 --> 00:09:02,500
因為從外部存取會造成應用程式閃退

225
00:09:02,500 --> 00:09:04,500
那關於這個 State 標記

226
00:09:04,500 --> 00:09:07,500
它是 Swift UI 提供的一種屬性包裝器

227
00:09:07,500 --> 00:09:10,490
那這個也是 Swift 語言的新特性之一

228
00:09:10,490 --> 00:09:13,490
可以利用它來實作管理屬性的邏輯

229
00:09:13,490 --> 00:09:17,480
然後套用到任何你想包裝的屬性上

230
00:09:17,480 --> 00:09:21,500
然後達到將屬性的定義和管理的程式碼分離的效果

231
00:09:21,500 --> 00:09:24,500
例如說 Swift UI 可能會在這個包裝器中

232
00:09:24,500 --> 00:09:26,490
實作更新畫面的機制

233
00:09:29,490 --> 00:09:31,490
例如說 Swift UI 可能會在這個包裝器中

234
00:09:31,490 --> 00:09:33,480
實作更新畫面的機制

235
00:09:33,480 --> 00:09:36,500
然後我們在 ContentView 中定義了 count 這個屬性

236
00:09:36,500 --> 00:09:39,500
然後用 State 來包裝它交給 Swift UI 來管理

237
00:09:42,490 --> 00:09:45,490
那這張來自 Apple 官方說明文件的圖片

238
00:09:45,490 --> 00:09:49,480
描述了使用者與 UI 互動造成資料狀態改變

239
00:09:49,480 --> 00:09:51,480
然後一直到畫面更新的過程

240
00:09:51,480 --> 00:09:56,500
整個藍色的區塊就是 Swift UI 負責的範圍

241
00:09:58,500 --> 00:10:02,490
那其實 Swift UI 還提供很多種不同的屬性包裝器

242
00:10:02,490 --> 00:10:05,480
那它可以根據顯示區不同的資料來源

243
00:10:05,480 --> 00:10:07,480
有不同的使用時機

244
00:10:07,480 --> 00:10:10,500
例如說有些元件可能會具備修改資料的功能

245
00:10:10,500 --> 00:10:14,500
那這些元件內部就會用到 Binding 這個屬性包裝器

246
00:10:14,500 --> 00:10:16,490
那它的資料是來自上層的顯示區

247
00:10:16,490 --> 00:10:19,490
而且修改的時候也會同步更新來源端的內容

248
00:10:19,490 --> 00:10:23,480
那至於 Environment 可以來取得一些環境變數

249
00:10:23,480 --> 00:10:26,500
像是手機是否在使用深色模式

250
00:10:26,500 --> 00:10:28,500
以及使用者的語言

251
00:10:28,500 --> 00:10:30,500
那當然這些值被修改的時候

252
00:10:30,500 --> 00:10:32,490
Swift UI 也會來幫我們更新畫面

253
00:10:35,490 --> 00:10:37,490
那以上就是 Swift UI 的介紹

254
00:10:37,490 --> 00:10:39,480
那到這個階段我已經完成提醒

255
00:10:39,480 --> 00:10:41,480
事項 App 大部分的介面

256
00:10:41,480 --> 00:10:45,500
也加入了作業和課程的增加和刪除

257
00:10:45,500 --> 00:10:48,500
以及修改和查詢的核心功能

258
00:10:48,500 --> 00:10:51,490
那像這樣具備資料的增刪改查的 App

259
00:10:51,490 --> 00:10:53,490
叫做 CRUD App

260
00:10:53,490 --> 00:10:56,480
可以來當作一個學習 App 開發的重要里程碑

261
00:10:59,500 --> 00:11:04,500
那 iOS 中常見的資料儲存方式就是 CoreData 和 UserDefault

262
00:11:04,500 --> 00:11:08,490
那 CoreData 它適合用來儲存一系列大量的資料

263
00:11:08,490 --> 00:11:11,490
而且還能在不同類型的資料之間建立關聯性

264
00:11:11,490 --> 00:11:13,480
以及刪除規則

265
00:11:13,480 --> 00:11:17,500
像是我的 App 中的作業和課程列表

266
00:11:17,500 --> 00:11:21,500
那關聯性就是指作業可能會連結到一項課程

267
00:11:21,500 --> 00:11:24,490
那課程可能會同時連結到多項作業

268
00:11:24,490 --> 00:11:27,490
那刪除規則就是指刪除某一個課程的時候

269
00:11:27,490 --> 00:11:29,480
也並去刪除它相關的作業

270
00:11:32,500 --> 00:11:34,500
至於 UserDefault 則是類似字典

271
00:11:34,500 --> 00:11:37,500
以箭對應到紙的方式在儲存資料

272
00:11:37,500 --> 00:11:40,490
那它適合用來儲存使用者的偏好設定

273
00:11:40,490 --> 00:11:43,490
這種比較簡單然後也比較零碎的資料

274
00:11:46,480 --> 00:11:51,500
那使用者的通知也是提醒事項非常基本的功能之一

275
00:11:51,500 --> 00:11:54,500
那 iOS 中的使用者通知主要可以分成

276
00:11:54,500 --> 00:11:56,490
本地通知和遠端通知兩種

277
00:11:56,490 --> 00:12:00,490
那其中本地通知是由 App 在裝置上發起

278
00:12:00,490 --> 00:12:04,480
然後遠端通知則是透過網路傳送到使用者的裝置上

279
00:12:05,500 --> 00:12:09,500
不過不論是哪一種通知都需要先向使用者取得

280
00:12:09,500 --> 00:12:10,500
傳送通知的權限

281
00:12:10,500 --> 00:12:13,490
那方法是呼叫上面這條函式

282
00:12:13,490 --> 00:12:15,490
告訴系統我們想傳送通知

283
00:12:15,490 --> 00:12:18,490
而且可能會包含橫幅、聲音以及圖像標記

284
00:12:18,490 --> 00:12:21,480
然後系統就會顯示像這樣子的視窗

285
00:12:21,480 --> 00:12:24,500
來提示使用者讓使用者決定是否要允許

286
00:12:25,500 --> 00:12:29,490
那有很多應用程式會在 App 第一次啟動的時候

287
00:12:29,490 --> 00:12:31,490
跳出視窗來向使用者要求權限

288
00:12:31,490 --> 00:12:34,490
但是這樣其實遭到拒絕的風險非常大

289
00:12:34,490 --> 00:12:37,480
因為他們不知道為什麼這個 App 需要傳送通知

290
00:12:37,480 --> 00:12:41,500
而且取得權限的這個機會只有一次

291
00:12:41,500 --> 00:12:44,500
不論使用者是允許還是拒絕

292
00:12:44,500 --> 00:12:47,490
那他下次再呼叫這條函式的時候

293
00:12:47,490 --> 00:12:50,490
系統就會直接沿用使用者的系統設定

294
00:12:51,490 --> 00:12:53,480
而且不會再跳出視窗

295
00:12:53,480 --> 00:12:56,500
那唯一的解決辦法就是引導使用者到設定 App

296
00:12:56,500 --> 00:12:58,500
來為我們的 App 開啟權限

297
00:12:58,500 --> 00:13:02,490
那我覺得這對我們和使用者都是一件滿麻煩的事

298
00:13:03,490 --> 00:13:05,490
所以我的做法是

299
00:13:05,490 --> 00:13:08,490
等到使用者第一次建立作業的時候

300
00:13:08,490 --> 00:13:13,500
告訴他們我可以向他們傳送有關作業的提醒通知

301
00:13:13,500 --> 00:13:15,500
那如果使用者選擇拒絕的話

302
00:13:15,500 --> 00:13:17,500
才會向他們來要求通知權限

303
00:13:19,490 --> 00:13:21,490
那另外還有一種方法

304
00:13:21,490 --> 00:13:23,490
就是在呼叫要求權限的函式時

305
00:13:23,490 --> 00:13:25,480
在 Option 的地方新增一項

306
00:13:25,480 --> 00:13:28,480
叫做 Professional 的選項

307
00:13:28,480 --> 00:13:31,500
那這樣子就可以得到暫時的通知權限

308
00:13:31,500 --> 00:13:35,490
那系統也不會跳出使用者來詢問他們的意見

309
00:13:35,490 --> 00:13:37,490
只是這個時候傳送的通知是靜音的

310
00:13:37,490 --> 00:13:40,490
不會有橫幅和聲音以及圖像標記

311
00:13:40,490 --> 00:13:42,480
也不會出現在鎖定畫面

312
00:13:42,480 --> 00:13:45,500
只會出現在手機上的通知中心裡

313
00:13:45,500 --> 00:13:47,500
等到使用者看到之後可以選擇保留

314
00:13:47,500 --> 00:13:49,500
或者是關閉通知權限

315
00:13:50,500 --> 00:13:51,500
那只要選擇保留的話

316
00:13:51,500 --> 00:13:53,490
我們就可以得到前面並要求的

317
00:13:53,490 --> 00:13:56,490
橫幅聲音和圖像標記權限

318
00:13:56,490 --> 00:13:58,490
那但是後來我沒有選擇這種方式

319
00:13:58,490 --> 00:14:00,480
因為有其他開發者的文章寫到

320
00:14:00,480 --> 00:14:02,500
萬一使用者選擇關閉

321
00:14:02,500 --> 00:14:04,500
那即使之後再到設定裡面打開

322
00:14:04,500 --> 00:14:06,500
也只會得到靜音通知的權限

323
00:14:06,500 --> 00:14:09,490
那要再引導使用者開啟下方的

324
00:14:09,490 --> 00:14:10,490
橫幅聲音和圖像標記

325
00:14:10,490 --> 00:14:12,490
其實都會有一定的難度

326
00:14:14,490 --> 00:14:15,490
接下來我要來介紹

327
00:14:15,490 --> 00:14:17,480
本地通知的實作方式

328
00:14:17,480 --> 00:14:19,500
其實步驟相當簡單

329
00:14:19,500 --> 00:14:22,500
那第一步就是先安排通知的內容

330
00:14:22,500 --> 00:14:26,490
然後設定其中的標題、內文和聲音

331
00:14:26,490 --> 00:14:29,490
接下來要選擇通知的觸發器

332
00:14:29,490 --> 00:14:32,480
在 iOS 的本地通知有三種觸發方式

333
00:14:32,480 --> 00:14:34,480
分別是依照日期間隔

334
00:14:34,480 --> 00:14:38,500
時間間隔、日期或者是地點來觸發

335
00:14:38,500 --> 00:14:39,500
那每一種都可以設定

336
00:14:39,500 --> 00:14:41,500
要不要重複發送通知

337
00:14:43,490 --> 00:14:44,490
以我在這個 APP 的需求

338
00:14:44,490 --> 00:14:46,490
我需要實作兩種通知功能

339
00:14:46,490 --> 00:14:49,480
一種是作業的逾期提醒

340
00:14:49,480 --> 00:14:51,480
就是在作業截止的時候觸發

341
00:14:51,480 --> 00:14:54,500
那另外一種是即將到期的提醒

342
00:14:54,500 --> 00:14:57,500
根據作業的指派日期以及截止日期

343
00:14:57,500 --> 00:15:00,490
在剩餘時間低於某個百分比的時候觸發

344
00:15:00,490 --> 00:15:02,490
例如說 20%

345
00:15:02,490 --> 00:15:04,490
那它可以根據上面這條公式

346
00:15:04,490 --> 00:15:06,480
來計算出觸發的時間點

347
00:15:06,480 --> 00:15:07,480
所以這兩種功能

348
00:15:07,480 --> 00:15:10,500
都是使用第二種觸發器來實作

349
00:15:12,500 --> 00:15:13,500
那使用這種觸發器

350
00:15:13,500 --> 00:15:17,490
要設定通知觸發時的日期組成

351
00:15:17,490 --> 00:15:19,490
像是年月日時分秒

352
00:15:19,490 --> 00:15:20,490
那系統會在下一個

353
00:15:20,490 --> 00:15:23,480
符合這些日期的時間點來發送通知

354
00:15:23,480 --> 00:15:26,500
而且還可以設定要不要重複觸發

355
00:15:26,500 --> 00:15:28,500
換句話說如果只設定時分秒

356
00:15:28,500 --> 00:15:30,500
然後還設定成重複發送的話

357
00:15:30,500 --> 00:15:32,490
那系統就會在每天的這個時間點

358
00:15:32,490 --> 00:15:34,490
來發送通知

359
00:15:34,490 --> 00:15:36,490
那我的通知只要發送一次

360
00:15:36,490 --> 00:15:37,490
所以我需要明確設定

361
00:15:37,490 --> 00:15:39,480
他們的年月日時分秒

362
00:15:39,480 --> 00:15:41,480
然後不要重複發送

363
00:15:43,500 --> 00:15:45,500
最後一步是建立通知要求

364
00:15:45,500 --> 00:15:48,500
除了剛剛的通知內容和觸發器

365
00:15:48,500 --> 00:15:50,490
還要再另外準備一個識別碼

366
00:15:50,490 --> 00:15:52,490
那這個識別碼可以用來

367
00:15:52,490 --> 00:15:54,490
刪除和複寫通知要求

368
00:15:54,490 --> 00:15:58,480
所以我在作業的物件中加入一項 ID 屬性

369
00:15:58,480 --> 00:16:00,500
然後用它來加上通知類型

370
00:16:00,500 --> 00:16:02,500
就是我自己決定的通知類型

371
00:16:02,500 --> 00:16:05,500
然後作為後綴當作識別碼

372
00:16:05,500 --> 00:16:07,490
那不直接使用作業名稱

373
00:16:07,490 --> 00:16:09,490
是因為可能會和其他的作業重複

374
00:16:09,490 --> 00:16:11,490
而且使用者也可以隨時修改

375
00:16:11,490 --> 00:16:13,480
他們的作業名稱

376
00:16:13,480 --> 00:16:14,480
那等到這幾個步驟完成

377
00:16:14,480 --> 00:16:16,500
就可以透過通知中心

378
00:16:16,500 --> 00:16:18,500
向系統註冊我們要求

379
00:16:18,500 --> 00:16:20,500
然後就會成功發送通知

380
00:16:21,500 --> 00:16:24,490
再來比較麻煩的是遠端通知

381
00:16:24,490 --> 00:16:26,490
會說它麻煩並不是因為程式複雜

382
00:16:26,490 --> 00:16:28,490
而是它的準備工作比較繁瑣

383
00:16:28,490 --> 00:16:31,480
那這張圖解釋了推播通知的傳送過程

384
00:16:31,480 --> 00:16:34,500
我們要自己建立伺服器發送通知

385
00:16:34,500 --> 00:16:36,500
而且沒辦法直接傳送通知

386
00:16:36,500 --> 00:16:38,500
到使用者裝置上的 app

387
00:16:38,500 --> 00:16:40,490
而是要像寄信一樣通過

388
00:16:40,490 --> 00:16:42,490
Apple 的推播通知服務

389
00:16:42,490 --> 00:16:45,490
通常簡稱叫 APNS

390
00:16:45,490 --> 00:16:46,480
然後讓它來幫助我們

391
00:16:46,480 --> 00:16:48,480
傳送通知給使用者

392
00:16:48,480 --> 00:16:51,500
也就是使用者裝置上的 app

393
00:16:51,500 --> 00:16:54,500
寫信一定要指定收件人的地址

394
00:16:54,500 --> 00:16:56,490
所以我們會呼叫函式

395
00:16:56,490 --> 00:16:58,490
然後讓 app 執行的時候

396
00:16:58,490 --> 00:17:00,490
自己向 APNS 伺服器註冊

397
00:17:00,490 --> 00:17:02,480
這樣才會被分配到

398
00:17:02,480 --> 00:17:04,480
獨一無二的 Device Token

399
00:17:04,480 --> 00:17:05,480
這個 Token 就是相當於

400
00:17:05,480 --> 00:17:07,500
世界上某一台特定裝置

401
00:17:07,500 --> 00:17:09,500
上面這個 app 的地址

402
00:17:09,500 --> 00:17:11,500
值得注意的是

403
00:17:11,500 --> 00:17:13,490
它雖然叫做 Device Token

404
00:17:13,490 --> 00:17:15,490
但是同一台裝置上每個 app

405
00:17:15,490 --> 00:17:17,490
被分到的 Token 都不會一樣

406
00:17:17,490 --> 00:17:19,480
而且這個 Token 隨時會因為

407
00:17:19,480 --> 00:17:21,480
使用者還原裝置備份

408
00:17:21,480 --> 00:17:23,500
或者是重新安裝 app

409
00:17:23,500 --> 00:17:25,500
或作業系統而改變

410
00:17:25,500 --> 00:17:27,500
所以我們每次都要在 app 啟動的時候

411
00:17:27,500 --> 00:17:29,490
會向 APNS 伺服器來註冊

412
00:17:29,490 --> 00:17:31,490
確保能得到最新的 Token

413
00:17:31,490 --> 00:17:34,490
然後把它回傳到我們自己的伺服器

414
00:17:34,490 --> 00:17:36,480
因為發送推播的時候會用到

415
00:17:39,500 --> 00:17:41,500
但是這裡我沒有自己打算

416
00:17:41,500 --> 00:17:43,500
我沒有打算自己刻出

417
00:17:43,500 --> 00:17:45,500
發送推播的伺服器

418
00:17:45,500 --> 00:17:47,490
因為我沒有後端的開發技能

419
00:17:47,490 --> 00:17:49,490
所以我找到了 Google 的 Firebase

420
00:17:49,490 --> 00:17:52,480
它提供非常豐富的後端服務

421
00:17:52,480 --> 00:17:54,480
那其中一項就是雲端通訊

422
00:17:54,480 --> 00:17:56,500
而且這是一項免費功能

423
00:17:56,500 --> 00:17:58,500
那它可以幫我們在 app 得到

424
00:17:58,500 --> 00:17:59,500
Device Token 的時候

425
00:17:59,500 --> 00:18:02,490
回傳到 Firebase 做管理和儲存

426
00:18:02,490 --> 00:18:05,490
那我們只要設定一些金鑰檔案

427
00:18:05,490 --> 00:18:07,490
然後讓 APNS 確定

428
00:18:07,490 --> 00:18:09,480
推播的來源是開發者

429
00:18:09,480 --> 00:18:11,480
那我們就可以透過 Firebase 的

430
00:18:11,480 --> 00:18:14,500
網頁上的圖形化介面來安排通知

431
00:18:14,500 --> 00:18:19,490
以及他們發送的時間

432
00:18:19,490 --> 00:18:24,490
那再來是 QR Code 分享作業的功能

433
00:18:24,490 --> 00:18:25,490
那一開始的想法是

434
00:18:25,490 --> 00:18:28,480
使用換行字元來分隔不同的資料

435
00:18:28,480 --> 00:18:32,500
然後再把它轉換成 QR Code

436
00:18:32,500 --> 00:18:34,500
然後等到使用者用 app 內建的

437
00:18:34,500 --> 00:18:36,490
掃描器掃描之後

438
00:18:36,490 --> 00:18:38,490
再根據事先定義好的欄位

439
00:18:38,490 --> 00:18:40,490
然後轉換成作業資料

440
00:18:40,490 --> 00:18:42,480
然後再填入表單讓使用者做編輯

441
00:18:42,480 --> 00:18:44,480
但最大的問題是我的設計

442
00:18:44,480 --> 00:18:45,480
讓使用者可以決定

443
00:18:45,480 --> 00:18:47,500
要不要分享作業的課程名稱

444
00:18:47,500 --> 00:18:49,500
和它的備註

445
00:18:49,500 --> 00:18:51,500
所以備註可能會有好幾行

446
00:18:51,500 --> 00:18:54,490
然後 app 將來改版

447
00:18:54,490 --> 00:18:56,490
可能會增減不同的欄位

448
00:18:56,490 --> 00:18:57,490
那這些都會讓 app

449
00:18:57,490 --> 00:18:59,480
根據換行字元分割出的內容

450
00:18:59,480 --> 00:19:01,480
沒辦法對應到最初設計的欄位

451
00:19:01,480 --> 00:19:04,500
那 app 就會直接閃退給你看

452
00:19:04,500 --> 00:19:06,500
後來我找到了解決辦法是

453
00:19:06,500 --> 00:19:09,490
將作業資料轉換成 JSON 格式

454
00:19:09,490 --> 00:19:11,490
然後再來產生 QR Code

455
00:19:11,490 --> 00:19:13,490
這是一種能以文字呈現

456
00:19:13,490 --> 00:19:17,480
結構化資訊的資料格式

457
00:19:17,480 --> 00:19:18,480
而且幸運的是

458
00:19:18,480 --> 00:19:20,500
Swift 中有提供便捷的方式

459
00:19:20,500 --> 00:19:21,500
來處理原始物件

460
00:19:21,500 --> 00:19:24,500
與 JSON 格式之間的來回轉換

461
00:19:24,500 --> 00:19:25,500
那這樣就不必擔心

462
00:19:25,500 --> 00:19:27,490
單純使用換行字元分割資料

463
00:19:27,490 --> 00:19:30,490
造成的問題

464
00:19:30,490 --> 00:19:31,490
那在 iOS 中

465
00:19:31,490 --> 00:19:35,480
凡是要運用到相機、麥克風、GPS 等

466
00:19:35,480 --> 00:19:37,500
和使用者的隱私相關的服務

467
00:19:37,500 --> 00:19:39,500
都要經過使用者授權

468
00:19:39,500 --> 00:19:41,500
那這個方法

469
00:19:41,500 --> 00:19:43,490
和前面在介紹使用者通知時

470
00:19:43,490 --> 00:19:44,490
取得權限的機制

471
00:19:44,490 --> 00:19:46,490
幾乎完全一樣

472
00:19:46,490 --> 00:19:47,490
唯一的差別就是

473
00:19:47,490 --> 00:19:48,490
專案中會有一個

474
00:19:48,490 --> 00:19:51,480
名為 info.plist 的屬性列表

475
00:19:51,480 --> 00:19:52,480
那這個檔案

476
00:19:52,480 --> 00:19:54,500
也是用 key 對應到 value 的方式

477
00:19:54,500 --> 00:19:55,500
來儲存資料

478
00:19:55,500 --> 00:19:58,500
那裡面會包含 app 的一些設定資料

479
00:19:58,500 --> 00:20:00,490
那我們需要在這個檔案中

480
00:20:00,490 --> 00:20:01,490
新增使用描述

481
00:20:01,490 --> 00:20:04,490
說明這個 app 存取這些資源的用途

482
00:20:04,490 --> 00:20:06,480
像是這裡存取相機

483
00:20:06,480 --> 00:20:08,480
是為了掃描 QR Code

484
00:20:08,480 --> 00:20:10,500
那系統就會在呈現視窗

485
00:20:10,500 --> 00:20:11,500
讓使用者確認權限的時候

486
00:20:11,500 --> 00:20:13,500
顯示這則訊息

487
00:20:13,500 --> 00:20:15,500
所以這樣的描述是

488
00:20:15,500 --> 00:20:17,490
開發的時候就已經寫死了

489
00:20:17,490 --> 00:20:19,490
完全沒有辦法透過程式控制

490
00:20:19,490 --> 00:20:20,490
那如果缺了這項設定

491
00:20:20,490 --> 00:20:23,480
系統會直接讓你的 app 閃退

492
00:20:25,480 --> 00:20:27,500
那接下來要介紹的小工具是

493
00:20:27,500 --> 00:20:30,500
Apple 在 iOS 14 推出的新功能

494
00:20:30,500 --> 00:20:31,500
它放在主畫面

495
00:20:31,500 --> 00:20:34,490
用來顯示與 app 相關的內容

496
00:20:34,490 --> 00:20:35,490
所以我在自己的 app 中

497
00:20:35,490 --> 00:20:36,490
也提供了

498
00:20:36,490 --> 00:20:38,490
作業蓋欄的小工具

499
00:20:38,490 --> 00:20:40,480
讓使用者不必特別一打開 app

500
00:20:40,480 --> 00:20:43,500
就能掌握他們想要的資訊

501
00:20:43,500 --> 00:20:45,500
那在開發小工具的時候

502
00:20:45,500 --> 00:20:46,500
這裡有出現一個問題

503
00:20:46,500 --> 00:20:49,490
因為小工具它屬於 app 的擴充功能

504
00:20:49,490 --> 00:20:51,490
而不是 app 的一部分

505
00:20:51,490 --> 00:20:53,490
所以兩者的資料儲存也是獨立的

506
00:20:53,490 --> 00:20:55,490
也就是說小工具沒有辦法

507
00:20:55,490 --> 00:20:59,500
直接儲存 app 本身的資料

508
00:20:59,500 --> 00:21:00,500
那其中一種解決辦法

509
00:21:00,500 --> 00:21:02,500
就是建立一個 app group

510
00:21:02,500 --> 00:21:03,500
然後透過這個群組底下的

511
00:21:03,500 --> 00:21:07,490
UserDefaults 可以用來共享資料

512
00:21:07,490 --> 00:21:09,490
那小工具主要由 configuration

513
00:21:09,490 --> 00:21:10,490
以及 timeline provider

514
00:21:10,490 --> 00:21:12,490
和 view content 來組成

515
00:21:12,490 --> 00:21:14,480
其中 configuration 會包含

516
00:21:14,480 --> 00:21:16,500
小工具的識別碼

517
00:21:16,500 --> 00:21:19,500
和一些標題尺寸相關的設定

518
00:21:19,500 --> 00:21:21,500
那 timeline provider 主要負責

519
00:21:21,500 --> 00:21:23,490
安排小工具的更新時間軸

520
00:21:23,490 --> 00:21:24,490
和資料內容

521
00:21:24,490 --> 00:21:26,490
那 view content 則是小工具

522
00:21:26,490 --> 00:21:27,490
根據資料要呈現的

523
00:21:27,490 --> 00:21:29,480
Swift UI 顯示區

524
00:21:29,480 --> 00:21:31,480
也就是說小工具的畫面

525
00:21:31,480 --> 00:21:35,500
它完全只能用 Swift UI 來做開發

526
00:21:35,500 --> 00:21:36,500
那其實所謂的資料

527
00:21:36,500 --> 00:21:38,500
就是一個至少包含

528
00:21:38,500 --> 00:21:40,490
時間屬性的物件

529
00:21:40,490 --> 00:21:41,490
然後我再另外加入

530
00:21:41,490 --> 00:21:42,490
作業資料作為

531
00:21:42,490 --> 00:21:45,490
繪製 UI 所需的作業資訊

532
00:21:45,490 --> 00:21:46,480
那其中的時間

533
00:21:46,480 --> 00:21:48,480
將會是系統根據

534
00:21:48,480 --> 00:21:50,500
更新小工具的時間

535
00:21:50,500 --> 00:21:51,500
所以 timeline provider

536
00:21:51,500 --> 00:21:52,500
產生的時間軸

537
00:21:52,500 --> 00:21:56,490
其實就是這種物件的陣列

538
00:21:56,490 --> 00:21:57,490
那除此之外還可以指定

539
00:21:57,490 --> 00:21:59,490
重新載入時間軸的方式

540
00:21:59,490 --> 00:22:00,490
主要有三種

541
00:22:00,490 --> 00:22:02,490
分別是在時間軸的

542
00:22:02,490 --> 00:22:04,480
最後一次更新後重新載入

543
00:22:04,480 --> 00:22:07,500
或者是在指定的日期之後重載

544
00:22:07,500 --> 00:22:09,500
或者是直到 app 呼叫程式重載

545
00:22:09,500 --> 00:22:10,500
那以我的例子

546
00:22:10,500 --> 00:22:12,500
就是在每個作業截止的時間點

547
00:22:12,500 --> 00:22:15,490
來當作小工具更新的時間軸

548
00:22:15,490 --> 00:22:17,490
那等時間軸走到底之後

549
00:22:17,490 --> 00:22:20,480
再重新載入新的時間軸

550
00:22:20,480 --> 00:22:21,480
那另外我也需要

551
00:22:21,480 --> 00:22:22,480
在使用者新增

552
00:22:22,480 --> 00:22:23,500
或者是修改任何

553
00:22:23,500 --> 00:22:24,500
作業資料的時候

554
00:22:24,500 --> 00:22:26,500
重新載入時間軸來確保

555
00:22:26,500 --> 00:22:27,500
小工具顯示的

556
00:22:27,500 --> 00:22:29,490
會是最新的資訊

557
00:22:29,490 --> 00:22:31,490
所以也會透過前面的識別碼

558
00:22:31,490 --> 00:22:32,490
呼叫程式

559
00:22:32,490 --> 00:22:34,490
然後重新載入時間軸

560
00:22:34,490 --> 00:22:37,480
藉此更新他們顯示的資料內容

561
00:22:37,480 --> 00:22:38,480
那最後提醒一下

562
00:22:38,480 --> 00:22:39,500
蘋果有提到

563
00:22:39,500 --> 00:22:40,500
因為效能的考量

564
00:22:40,500 --> 00:22:41,500
所以小工具

565
00:22:41,500 --> 00:22:43,500
不一定會完全依照我們的

566
00:22:43,500 --> 00:22:44,500
時間軸更新

567
00:22:44,500 --> 00:22:45,500
可能會有一些延遲

568
00:22:45,500 --> 00:22:47,490
而且這個更新次數

569
00:22:47,490 --> 00:22:50,490
其實以 24 小時為週期

570
00:22:50,490 --> 00:22:52,490
會有一定的額度

571
00:22:52,490 --> 00:22:53,480
那這個額度會因為

572
00:22:53,480 --> 00:22:54,480
使用者的使用模式

573
00:22:54,480 --> 00:22:55,480
而有所增減

574
00:22:55,480 --> 00:22:56,500
而且重置的時間

575
00:22:56,500 --> 00:22:58,500
也不一定是凌晨 12 點

576
00:23:01,500 --> 00:23:02,500
那到目前為止

577
00:23:02,500 --> 00:23:03,490
這個 App 其實本身

578
00:23:03,490 --> 00:23:04,490
都是用英文寫的

579
00:23:04,490 --> 00:23:06,490
但是世界各地的人

580
00:23:06,490 --> 00:23:08,490
都有可能從 App Store

581
00:23:08,490 --> 00:23:09,480
來下載我們的 App

582
00:23:09,480 --> 00:23:11,480
所以如果能讓 App

583
00:23:11,480 --> 00:23:12,480
在不同國家顯示

584
00:23:12,480 --> 00:23:13,500
不同的語言

585
00:23:13,500 --> 00:23:14,500
那這樣就能提升

586
00:23:14,500 --> 00:23:15,500
使用者的使用體驗

587
00:23:15,500 --> 00:23:18,500
而且這裡要分享的本地化

588
00:23:18,500 --> 00:23:19,490
而這裡要分享的本地化

589
00:23:19,490 --> 00:23:20,490
指的就是將 App

590
00:23:20,490 --> 00:23:22,490
支援某種語言的過程

591
00:23:23,490 --> 00:23:25,490
那大家不要小看本地化

592
00:23:25,490 --> 00:23:26,480
雖然我為 App 本身

593
00:23:26,480 --> 00:23:28,480
加入了英文 繁體中文

594
00:23:28,480 --> 00:23:30,500
和簡體中文的支援

595
00:23:30,500 --> 00:23:31,500
但我一開始覺得

596
00:23:31,500 --> 00:23:32,500
App 上架後

597
00:23:32,500 --> 00:23:33,500
應該只會有周遭的

598
00:23:33,500 --> 00:23:35,500
親朋好友來下載

599
00:23:35,500 --> 00:23:38,490
那主要應該也是以台灣為主

600
00:23:38,490 --> 00:23:39,490
結果第一天發布

601
00:23:39,490 --> 00:23:40,490
就出現了印度

602
00:23:40,490 --> 00:23:42,490
和澳洲的統計資料

603
00:23:42,490 --> 00:23:44,480
現在全世界除了

604
00:23:44,480 --> 00:23:46,500
那個全世界其他州

605
00:23:46,500 --> 00:23:47,500
除了南極州真的沒辦法

606
00:23:47,500 --> 00:23:50,500
那其他都收集到了

607
00:23:50,500 --> 00:23:51,500
那本地化的實作

608
00:23:51,500 --> 00:23:53,490
就是另外建立本地化檔案

609
00:23:53,490 --> 00:23:54,490
然後針對每一筆

610
00:23:54,490 --> 00:23:55,490
需要本地化的字串

611
00:23:55,490 --> 00:23:56,490
以原文當作箭

612
00:23:56,490 --> 00:23:58,490
然後譯文當作紙

613
00:23:58,490 --> 00:23:59,480
但是應該不會有人

614
00:23:59,480 --> 00:24:01,480
想要自己在排山倒海

615
00:24:01,480 --> 00:24:02,480
來程式碼找出

616
00:24:02,480 --> 00:24:04,500
所有需要本地化的字串吧

617
00:24:04,500 --> 00:24:05,500
因為感覺很容易

618
00:24:05,500 --> 00:24:06,500
重複或者是缺漏

619
00:24:06,500 --> 00:24:09,490
所以 Xcode 中有一種

620
00:24:09,490 --> 00:24:10,490
自動匯入和匯出

621
00:24:10,490 --> 00:24:12,490
本地化資料的功能

622
00:24:12,490 --> 00:24:14,490
針對我們想支援的語言

623
00:24:14,490 --> 00:24:15,490
幫我們提取出

624
00:24:15,490 --> 00:24:17,480
需要本地化的文字

625
00:24:17,480 --> 00:24:20,500
然後成為獨立的 XLOC 檔

626
00:24:20,500 --> 00:24:22,500
那我們可以編輯這些檔案

627
00:24:22,500 --> 00:24:23,500
填完所有的譯文之後

628
00:24:23,500 --> 00:24:25,500
再用 Xcode 來匯入

629
00:24:25,500 --> 00:24:26,490
然後直接幫我們

630
00:24:26,490 --> 00:24:28,490
建立本地化檔案

631
00:24:28,490 --> 00:24:29,490
然後你就會發現

632
00:24:29,490 --> 00:24:33,480
其實還是會有一堆漏網之魚

633
00:24:33,480 --> 00:24:34,480
這是因為 Xcode

634
00:24:34,480 --> 00:24:36,500
只會來提取文字原件中的內容

635
00:24:36,500 --> 00:24:37,500
進行本地化

636
00:24:37,500 --> 00:24:40,500
對於那些不是文件的原件

637
00:24:40,500 --> 00:24:42,500
像是能同時顯示標題

638
00:24:42,500 --> 00:24:45,490
以及符號的標籤原件

639
00:24:45,490 --> 00:24:49,480
那它就只能最後再手動加入

640
00:24:49,480 --> 00:24:51,480
或者是你也可以選擇

641
00:24:51,480 --> 00:24:54,500
用文字原件去設定它的標題

642
00:24:54,500 --> 00:24:58,500
那我是比較偏好這種方式

643
00:24:58,500 --> 00:24:59,490
另外在本地化的時候

644
00:24:59,490 --> 00:25:01,490
經常遇到的另一個問題就是

645
00:25:01,490 --> 00:25:03,490
不知道原文是出現在哪個畫面

646
00:25:03,490 --> 00:25:05,490
然後想表示什麼

647
00:25:05,490 --> 00:25:06,480
那這種時候

648
00:25:06,480 --> 00:25:08,480
可以為文字原件加上註解

649
00:25:08,480 --> 00:25:09,500
這些註解會顯示在

650
00:25:09,500 --> 00:25:11,500
填寫譯文的 XLOC 檔

651
00:25:11,500 --> 00:25:16,490
以及最後的本地化檔案裡面

652
00:25:16,490 --> 00:25:17,490
到了這個階段

653
00:25:17,490 --> 00:25:20,490
其實 App 的所有功能都已經開發完成

654
00:25:20,490 --> 00:25:22,490
但是我沒有直接上傳到 App Store

655
00:25:22,490 --> 00:25:23,480
因為 App 裡面可能還有一些

656
00:25:23,480 --> 00:25:26,500
自己沒發現的潛在錯誤

657
00:25:26,500 --> 00:25:27,500
所以這個時候可以先邀請大家

658
00:25:27,500 --> 00:25:29,500
一起來使用你的 App

659
00:25:29,500 --> 00:25:31,500
然後做 Beta 測試

660
00:25:31,500 --> 00:25:32,500
那 TestFlight 就是

661
00:25:32,500 --> 00:25:36,490
Apple 提供的測試工具

662
00:25:36,490 --> 00:25:37,490
那我們要先把 App 上傳到

663
00:25:37,490 --> 00:25:39,490
App Store Connect

664
00:25:39,490 --> 00:25:40,480
這是開發者用來發佈

665
00:25:40,480 --> 00:25:42,480
管理 App 資訊

666
00:25:42,480 --> 00:25:45,500
以及回覆使用者評論的網站

667
00:25:45,500 --> 00:25:47,500
那登入所有測試人的 email

668
00:25:47,500 --> 00:25:48,500
以及撰寫

669
00:25:48,500 --> 00:25:50,490
公佈給大家的測試資訊之後

670
00:25:50,490 --> 00:25:52,490
你就可以把 App 交給 Apple

671
00:25:52,490 --> 00:25:55,490
做 Beta 版的審核

672
00:25:55,490 --> 00:25:56,480
等到通過之後

673
00:25:56,480 --> 00:25:57,480
就會自動寄出邀請函

674
00:25:57,480 --> 00:26:01,500
給那些測試人員進行外部測試

675
00:26:01,500 --> 00:26:03,500
那我的經驗是

676
00:26:03,500 --> 00:26:04,500
審核的時間點幾乎都在

677
00:26:04,500 --> 00:26:07,490
台灣凌晨兩點到三點

678
00:26:07,490 --> 00:26:10,490
這個時間通過

679
00:26:10,490 --> 00:26:11,490
那當時我是透過 Google 表單

680
00:26:11,490 --> 00:26:13,480
來蒐集這些資料

681
00:26:13,480 --> 00:26:15,480
然後可以直接把資料匯入到

682
00:26:15,480 --> 00:26:18,500
App Store Connect 登錄測試人員

683
00:26:18,500 --> 00:26:19,500
那至於使用者

684
00:26:19,500 --> 00:26:20,500
他們要先到 App Store 下載

685
00:26:20,500 --> 00:26:22,500
這個叫 TestFlight 的程式

686
00:26:22,500 --> 00:26:24,490
那等收到邀請函後

687
00:26:24,490 --> 00:26:26,490
點擊裡面的連結

688
00:26:26,490 --> 00:26:28,490
或者是手動輸入邀請碼

689
00:26:28,490 --> 00:26:29,490
就可以安裝我們的 App

690
00:26:29,490 --> 00:26:31,480
做 Beta 測試

691
00:26:31,480 --> 00:26:33,500
那如果期間有任何的意見回饋

692
00:26:33,500 --> 00:26:34,500
或者是當地資料

693
00:26:34,500 --> 00:26:36,500
也可以透過 TestFlight

694
00:26:36,500 --> 00:26:38,500
直接傳送給開發者

695
00:26:38,500 --> 00:26:42,490
那也能包含螢幕截圖

696
00:26:42,490 --> 00:26:44,490
那到正式發佈的時候

697
00:26:44,490 --> 00:26:45,490
還要再另外準備

698
00:26:45,490 --> 00:26:47,480
四種螢幕規格的截圖

699
00:26:47,480 --> 00:26:49,480
那你也可以根據你支援的語言

700
00:26:49,480 --> 00:26:52,500
然後來新增不同版本的螢幕截圖

701
00:26:52,500 --> 00:26:54,500
所以說因為它

702
00:26:54,500 --> 00:26:55,500
這裡的螢幕截圖

703
00:26:55,500 --> 00:26:57,490
最多可以放十張

704
00:26:57,490 --> 00:26:58,490
那有四種裝置

705
00:26:58,490 --> 00:27:00,490
然後你又支援了三種語言

706
00:27:00,490 --> 00:27:01,490
所以這樣總共就是

707
00:27:01,490 --> 00:27:05,480
一百二十張照片

708
00:27:05,480 --> 00:27:06,500
然後還要再另外設定

709
00:27:06,500 --> 00:27:07,500
App 的標題、副標題

710
00:27:07,500 --> 00:27:08,500
然後描述

711
00:27:08,500 --> 00:27:11,500
以及關鍵字跟隱私權政策連結

712
00:27:11,500 --> 00:27:13,490
那這部分的資訊是

713
00:27:13,490 --> 00:27:15,490
你在送出 App 審核之前

714
00:27:15,490 --> 00:27:16,490
才可以做修改

715
00:27:16,490 --> 00:27:18,490
你一旦把它發佈到 App Store 上

716
00:27:18,490 --> 00:27:19,490
那就不能再修改

717
00:27:19,490 --> 00:27:23,500
除非你是在提交新的 App 更新

718
00:27:23,500 --> 00:27:26,500
那關鍵字的話其實就是

719
00:27:26,500 --> 00:27:27,500
使用者在 App Store 上

720
00:27:27,500 --> 00:27:28,500
搜尋你的 App 之後

721
00:27:28,500 --> 00:27:33,490
輸入的內容

722
00:27:33,490 --> 00:27:34,490
那 App 在正式推出前

723
00:27:34,490 --> 00:27:37,480
還要再次通過 App 的審查

724
00:27:37,480 --> 00:27:38,480
那這次的審查

725
00:27:38,480 --> 00:27:40,500
會比 Beta 測試還要嚴謹

726
00:27:40,500 --> 00:27:42,500
那網站上有一個欄位

727
00:27:42,500 --> 00:27:44,500
可以讓你新增備註和附件

728
00:27:44,500 --> 00:27:46,490
給審核團隊

729
00:27:46,490 --> 00:27:48,490
那我是送審了第二次才通過

730
00:27:48,490 --> 00:27:49,490
第一次會被推薦的原因

731
00:27:49,490 --> 00:27:51,490
是因為 Apple 希望我提供

732
00:27:51,490 --> 00:27:54,480
QR Code 作業分享功能的範例條碼

733
00:27:54,480 --> 00:27:57,500
那幾乎都是在晚上 9 點到

734
00:27:57,500 --> 00:27:58,500
欸不對

735
00:27:58,500 --> 00:28:02,500
晚上 7 點到 9 點這段時間通過

736
00:28:02,500 --> 00:28:04,490
那等到你通過審查之後

737
00:28:04,490 --> 00:28:07,490
其實不一定要直接發佈到 App Store

738
00:28:07,490 --> 00:28:09,490
可以試試看用預定的方式

739
00:28:09,490 --> 00:28:11,480
那預定的方式的話

740
00:28:11,480 --> 00:28:14,500
你的 App 會直接出現在 App Store 上

741
00:28:14,500 --> 00:28:16,500
但是使用者下來之後

742
00:28:16,500 --> 00:28:18,500
他不會直接安裝

743
00:28:18,500 --> 00:28:20,490
是等到預定結束之後

744
00:28:20,490 --> 00:28:22,490
然後他才會自動下載到

745
00:28:22,490 --> 00:28:23,490
使用者的裝置

746
00:28:23,490 --> 00:28:26,480
然後也會發送通知給使用者

747
00:28:26,480 --> 00:28:28,480
那這樣子就可以讓使用者

748
00:28:28,480 --> 00:28:31,500
知道說你這個是一個新的 App

749
00:28:31,500 --> 00:28:32,500
然後等到他自動下載的時候

750
00:28:32,500 --> 00:28:33,500
可能就會因為覺得

751
00:28:33,500 --> 00:28:34,500
這是一個新的東西

752
00:28:34,500 --> 00:28:35,500
所以他會比較

753
00:28:35,500 --> 00:28:37,490
更願意去試試看

754
00:28:39,490 --> 00:28:42,490
那最後是給初學者的一些建議

755
00:28:42,490 --> 00:28:44,480
那我覺得如果是第一次

756
00:28:44,480 --> 00:28:45,480
嘗試 App 開發的話

757
00:28:45,480 --> 00:28:47,500
可以從生活中來尋找靈感

758
00:28:47,500 --> 00:28:48,500
那像我這個就是

759
00:28:48,500 --> 00:28:50,500
為學生打造提醒四項 App

760
00:28:50,500 --> 00:28:52,500
因為我本身也還是一個學生嘛

761
00:28:52,500 --> 00:28:55,490
那如果是跟你自己的生活

762
00:28:55,490 --> 00:28:57,490
有關係的主題的話

763
00:28:57,490 --> 00:28:59,490
那你在這個實作的過程中

764
00:28:59,490 --> 00:29:00,480
你會了解

765
00:29:00,480 --> 00:29:02,480
使用者可能會需要什麼樣的需求

766
00:29:02,480 --> 00:29:03,500
因為你本身就是

767
00:29:03,500 --> 00:29:05,500
這個 App 的使用者之一

768
00:29:05,500 --> 00:29:07,500
那也建議大家可以支援

769
00:29:07,500 --> 00:29:11,490
至少英文和繁體中文跟簡體中文

770
00:29:11,490 --> 00:29:15,490
最後是要運用 Git 做版本控制

771
00:29:15,490 --> 00:29:17,480
那版本控制這項工具

772
00:29:17,480 --> 00:29:19,480
是讓你可以在

773
00:29:19,480 --> 00:29:21,500
每次你的專案做變更的時候

774
00:29:21,500 --> 00:29:22,500
可以做紀錄

775
00:29:22,500 --> 00:29:24,500
那將來如果你在

776
00:29:24,500 --> 00:29:26,490
實作新功能的時候

777
00:29:26,490 --> 00:29:27,490
不小心把它改壞了

778
00:29:27,490 --> 00:29:29,490
那你可以透過這個版本控制工具

779
00:29:29,490 --> 00:29:33,480
把它回退到原本的狀態

780
00:29:33,480 --> 00:29:34,480
就不會擔心說

781
00:29:34,480 --> 00:29:36,500
你可能今天改了什麼功能

782
00:29:36,500 --> 00:29:37,500
然後你改不回去

783
00:29:37,500 --> 00:29:41,500
那整個專案可能又要砍掉重來

784
00:29:41,500 --> 00:29:44,490
那我覺得對於你

785
00:29:44,490 --> 00:29:45,490
有一個 app 的目標之後

786
00:29:45,490 --> 00:29:48,490
可以把它列出他們的一些功能

787
00:29:48,490 --> 00:29:50,480
然後當作指目標

788
00:29:50,480 --> 00:29:52,480
那有了目標之後

789
00:29:52,480 --> 00:29:53,500
可以先蒐集資料

790
00:29:53,500 --> 00:29:54,500
然後再來做實作

791
00:29:54,500 --> 00:29:56,500
這樣會增加成功的機率

792
00:29:56,500 --> 00:29:58,500
那過程中可能會有遇到一些問題

793
00:29:58,500 --> 00:30:00,490
那就可以回來

794
00:30:00,490 --> 00:30:01,490
蒐集資料這個階段

795
00:30:01,490 --> 00:30:04,490
然後準備好來再繼續實作

796
00:30:04,490 --> 00:30:05,490
那你實現目標之後

797
00:30:05,490 --> 00:30:07,480
隨著你做的東西越來越多

798
00:30:07,480 --> 00:30:08,480
那你可能會發現

799
00:30:08,480 --> 00:30:09,480
可能有些東西

800
00:30:09,480 --> 00:30:10,500
以前在寫的時候

801
00:30:10,500 --> 00:30:11,500
可能寫得不是那麼好

802
00:30:11,500 --> 00:30:13,500
那你就可以再來做修改

803
00:30:13,500 --> 00:30:17,490
那這樣重構你的專案的話

804
00:30:17,490 --> 00:30:19,490
你可能會覺得是在浪費時間

805
00:30:19,490 --> 00:30:20,490
那但是將來

806
00:30:20,490 --> 00:30:22,490
如果你可能隔了兩個月、三個月

807
00:30:22,490 --> 00:30:23,480
然後再回來看

808
00:30:23,480 --> 00:30:24,480
你這些程式碼的時候

809
00:30:24,480 --> 00:30:27,500
如果你有這樣子定期做維護的話

810
00:30:27,500 --> 00:30:29,500
那就不會因為時間隔太遠

811
00:30:29,500 --> 00:30:31,500
而導致你看不懂自己的程式碼

812
00:30:31,500 --> 00:30:34,490
就不會又要再真的砍掉重來

813
00:30:34,490 --> 00:30:38,490
那最後是給大家一些學習資源

814
00:30:38,490 --> 00:30:39,490
那網站的話

815
00:30:39,490 --> 00:30:44,500
總是獲取這些資料的最快方式

816
00:30:44,500 --> 00:30:45,500
那第一個網站

817
00:30:45,500 --> 00:30:47,500
它是 Apple 的開發者網站

818
00:30:47,500 --> 00:30:49,500
那裡面有所有的文件

819
00:30:49,500 --> 00:30:53,490
以及他們 API 的一些說明

820
00:30:53,490 --> 00:30:54,490
再來第二個網站

821
00:30:54,490 --> 00:30:59,480
是一個在做 iOS 開發的中文教學的網站

822
00:30:59,480 --> 00:31:00,500
那第三個網站

823
00:31:00,500 --> 00:31:01,500
應該大家都很熟悉

824
00:31:01,500 --> 00:31:04,500
就是如果你有很多一些問題的話

825
00:31:04,500 --> 00:31:07,490
那會有使用者在上面做解答

826
00:31:07,490 --> 00:31:10,490
那不要複製貼上

827
00:31:10,490 --> 00:31:14,480
那最後一個特別要講的網站叫 Medium

828
00:31:14,480 --> 00:31:16,480
那它其實是一個寫作平台

829
00:31:16,480 --> 00:31:18,500
那雖然它主要是以英文為主

830
00:31:18,500 --> 00:31:22,500
但是有非常多繁體中文的台灣開發者

831
00:31:22,500 --> 00:31:25,490
然後會撰寫他們的 iOS 開發教學文章

832
00:31:25,490 --> 00:31:28,490
然後放在這個平台上

833
00:31:28,490 --> 00:31:30,480
那最後是書籍

834
00:31:30,480 --> 00:31:32,480
這兩本是我有看過的書籍

835
00:31:32,480 --> 00:31:34,500
那應該都可以在圖書館找到

836
00:31:34,500 --> 00:31:37,500
那第一本是 Swift UI 的教學

837
00:31:37,500 --> 00:31:41,490
那底下那一本是我第一本買的書

838
00:31:41,490 --> 00:31:44,490
那它主要是以 UIKit 為主

839
00:31:44,490 --> 00:31:47,480
那旁邊右邊這張照片是

840
00:31:47,480 --> 00:31:49,480
Apple 的一個免費軟體

841
00:31:49,480 --> 00:31:52,500
叫做 Swift Playgrounds 的軟體

842
00:31:52,500 --> 00:31:54,500
那它裡面主要是

843
00:31:54,500 --> 00:31:58,490
蘋果來免費提供給使用者來做下載

844
00:31:58,490 --> 00:32:01,490
然後裡面有程式設計的一些教學

845
00:32:01,490 --> 00:32:04,480
而且更重要的是它有支援中文

846
00:32:04,480 --> 00:32:07,500
那它去年 12 月底有做更新

847
00:32:07,500 --> 00:32:09,500
就可以用 Swift UI 來打造你的 App

848
00:32:09,500 --> 00:32:12,500
所以你可以試著用 iPad 來

849
00:32:12,500 --> 00:32:15,490
開發你的 iOS 應用程式

850
00:32:15,490 --> 00:32:19,490
但是我不覺得它可以取代筆電

851
00:32:19,490 --> 00:32:21,480
因為有些功能

852
00:32:21,480 --> 00:32:22,480
像是剛剛提到的版本控制

853
00:32:22,480 --> 00:32:26,500
那可能就還是要用電腦來才能做

854
00:32:26,500 --> 00:32:28,500
那以上就是我今天的分享

855
00:32:28,500 --> 00:32:30,490
那希望有幫到大家

856
00:32:30,490 --> 00:32:33,490
來認識 iOS App 的開發過程

857
00:32:33,490 --> 00:32:35,490
然後也對自己手機的一些常見功能

858
00:32:35,490 --> 00:32:39,480
有背後的運作原理有一些認識

859
00:32:39,480 --> 00:32:41,500
那謝謝大家

860
00:32:45,500 --> 00:32:48,490
那最後這一頁是

861
00:32:48,490 --> 00:32:50,490
剛剛有提到一個叫 Medium 的網站

862
00:32:50,490 --> 00:32:53,480
那我也希望將來可以把一些教學文章

863
00:32:53,480 --> 00:32:55,480
寫在這個網站上做發表

864
00:32:55,480 --> 00:32:58,500
那中間的是我 App 的下載連結

865
00:32:58,500 --> 00:33:00,500
那最後一個是 Instagram

866
00:33:00,500 --> 00:33:03,490
那如果待會有 Q&A 有一些問題是

867
00:33:03,490 --> 00:33:05,490
我沒有辦法直接做解答的話

868
00:33:05,490 --> 00:33:08,490
那我就會用這些管道來做發佈

869
00:33:08,490 --> 00:33:11,480
那現在就換 Q&A 的部分

874
00:33:55,490 --> 00:34:22,500
可以提供簡報嗎？

875
00:34:22,500 --> 00:34:24,500
應該是可以

876
00:34:25,500 --> 00:34:28,490
這軟體總共花了多少時間寫？

877
00:34:28,490 --> 00:34:30,490
那這個軟體的話我從

878
00:34:30,490 --> 00:34:35,480
我開始學的時候其實是國二

879
00:34:35,480 --> 00:34:38,500
那這個軟體是到三個月前才發布的

880
00:34:38,500 --> 00:34:40,500
所以大概有四年

881
00:34:40,500 --> 00:34:43,490
那但是 Swift UI 它是 2019 才出現的

882
00:34:43,490 --> 00:34:45,490
那我也是到那個時候才重新來

883
00:34:45,490 --> 00:34:48,490
改以 Swift UI 來學習 iOS 程式的開發

884
00:34:48,490 --> 00:34:50,480
因為在那之前是 UIKit

885
00:34:50,480 --> 00:34:56,500
所以大概三年就可以了啦

886
00:34:56,500 --> 00:34:58,500
然後這是在哪裡學的？

887
00:34:58,500 --> 00:35:00,490
主要是以

888
00:35:08,480 --> 00:35:09,480
這個在哪裡學的？

889
00:35:09,480 --> 00:35:12,500
那主要是透過網路的資源

890
00:35:12,500 --> 00:35:14,500
因為網路的資源比較豐富

891
00:35:14,500 --> 00:35:17,490
然後也是資訊學得最快的方法

892
00:35:17,490 --> 00:35:19,490
那學了多久？

893
00:35:19,490 --> 00:35:21,490
就四年這樣

894
00:35:21,490 --> 00:35:28,500
那沒有 Mac 有辦法在 Windows 上使用虛擬機撰寫程式嗎？

895
00:35:28,500 --> 00:35:31,500
我對 Windows 的虛擬機比較沒那麼熟

896
00:35:31,500 --> 00:35:33,490
那 Mac 的話

897
00:35:33,490 --> 00:35:37,490
我覺得你直接用 Mac 的話可能會比較

898
00:35:37,490 --> 00:35:40,480
因為就是你在學習的過程中會遇到很多問題

899
00:35:40,480 --> 00:35:41,480
而且你也不知道是

900
00:35:41,480 --> 00:35:43,500
就那個問題你不知道是哪來的

901
00:35:43,500 --> 00:35:46,500
那如果你本身就是使用 Mac 的話

902
00:35:46,500 --> 00:35:48,500
就有跟大家一樣的開發環境

903
00:35:48,500 --> 00:35:50,490
那也比較有多的了解你的狀況

904
00:35:50,490 --> 00:35:53,490
進而得到解答

905
00:35:53,490 --> 00:35:55,490
那目前在學習 Swift UI

906
00:35:55,490 --> 00:36:00,500
常常遇到資料流搞不清楚的問題

907
00:36:00,500 --> 00:36:05,500
有沒有比較好的方式去學習這方面的知識

908
00:36:05,500 --> 00:36:11,490
其實錯了很多次你就會知道怎麼寫

909
00:36:11,490 --> 00:36:15,480
那請問當初為何會使用 Swift UI 來開發 App

910
00:36:15,480 --> 00:36:25,490
那是因為那個時候家裡以及周邊的人

911
00:36:25,490 --> 00:36:27,490
用的都是 iPhone 比較多

912
00:36:27,490 --> 00:36:30,480
那我希望如果要學的話就是先專精一項平台就好

913
00:36:30,480 --> 00:36:38,500
然後這樣你才能確保你對這個平台有一些正確的認知

914
00:36:38,500 --> 00:36:42,490
作業備註太強導致

915
00:36:42,490 --> 00:36:49,480
為什麼不見了

916
00:36:49,480 --> 00:36:51,500
作業備註太長導致 iPhone

917
00:36:51,500 --> 00:36:54,500
JSON 太大塞不下去 QR Code

918
00:36:54,500 --> 00:36:57,490
應該是不會那麼誇張啦

919
00:36:57,490 --> 00:37:01,490
我還沒有遇到過這種問題

920
00:37:01,490 --> 00:37:04,480
那 Swift 上做的 App 可以傳到 Play 商店嗎

921
00:37:04,480 --> 00:37:05,480
還是要另外做一個

922
00:37:05,480 --> 00:37:11,500
還是用其他東西做轉換

923
00:37:11,500 --> 00:37:13,500
Play 商店的話應該就是要看

924
00:37:13,500 --> 00:37:17,490
Google 它提供什麼樣的語言

925
00:37:17,490 --> 00:37:20,480
來做 Android App 的開發

926
00:37:20,480 --> 00:37:21,480
那因為我沒有學 Android

927
00:37:21,480 --> 00:37:34,490
所以這個部分我不是很清楚

928
00:37:34,490 --> 00:37:38,480
為什麼題目的順序

929
00:37:38,480 --> 00:37:42,500
然後這個 App 有沒有可能開源到 GitHub 上

930
00:37:42,500 --> 00:37:45,500
那我比較傾向於把這個 App 的實作過程

931
00:37:45,500 --> 00:37:48,490
寫成詳細的教學文章放到 Medium 上

932
00:37:48,490 --> 00:37:50,490
那因為直接放到 GitHub 上的話

933
00:37:50,490 --> 00:37:53,490
其實很難看出這個

934
00:37:53,490 --> 00:37:55,480
就感覺就是一坨東西混在一起

935
00:37:55,480 --> 00:37:59,500
然後其實不太容易學到東西我覺得

936
00:37:59,500 --> 00:38:01,500
那如果要放到 GitHub 上的話

937
00:38:01,500 --> 00:38:03,500
其實裡面有一些類似

938
00:38:03,500 --> 00:38:05,490
你的憑證之類的東西

939
00:38:05,490 --> 00:38:07,490
那些東西可能要想辦法先移除掉

940
00:38:14,500 --> 00:38:19,500
如何在開發 App 和課業間取得平衡

941
00:38:20,490 --> 00:38:22,490
沒有平衡啊

942
00:38:28,480 --> 00:38:29,480
不好說

943
00:38:29,480 --> 00:38:30,500
不予置評

944
00:38:32,500 --> 00:38:34,500
如果家境清寒窮困潦倒

945
00:38:34,500 --> 00:38:35,500
真的買不起 Mac

946
00:38:35,500 --> 00:38:36,500
還有辦法從事

947
00:38:39,490 --> 00:38:40,490
學習的話

948
00:38:40,490 --> 00:38:42,490
就可以用剛剛提到的 Swift Playground

949
00:38:42,490 --> 00:38:45,480
這個軟體來做學習

950
00:38:45,480 --> 00:38:46,480
就是如果你

951
00:38:46,480 --> 00:38:48,500
如果我沒有辦法買 Mac

952
00:38:48,500 --> 00:38:49,500
或者是你也不確定

953
00:38:49,500 --> 00:38:50,500
你有辦法持續下去的話

954
00:38:50,500 --> 00:38:52,500
那其實用 iPad

955
00:38:52,500 --> 00:38:53,500
其實用 iPad 也是一個

956
00:38:53,500 --> 00:38:56,490
體驗 iOS App 開發的方式

957
00:38:56,490 --> 00:38:59,490
因為裡面也是有中文的教學

958
00:38:59,490 --> 00:39:02,480
那這樣其實會更容易上手

959
00:39:02,480 --> 00:39:03,480
會因為寫成早點嗎

960
00:39:03,480 --> 00:39:05,500
會啊 不然咧

961
00:39:07,500 --> 00:39:09,500
如果家人都不懂我在做什麼

962
00:39:09,500 --> 00:39:10,490
然後多花時間專心

963
00:39:10,490 --> 00:39:11,490
可以該如何溝通

964
00:39:12,490 --> 00:39:13,490
你就把他們找來試試看

965
00:39:13,490 --> 00:39:14,490
然後演講給他們看

966
00:39:14,490 --> 00:39:15,490
讓他們知道你們在做什麼

967
00:39:15,490 --> 00:39:16,490
就知道了

968
00:39:17,480 --> 00:39:19,480
PPT 跟 Keynote 哪個比較好用

969
00:39:21,500 --> 00:39:22,500
我覺得 Keynote

970
00:39:22,500 --> 00:39:24,500
它預設的版面配置會比較好看

971
00:39:25,500 --> 00:39:28,490
那 Apple Developer Program

972
00:39:28,490 --> 00:39:29,490
應該還是要 18 歲

973
00:39:29,490 --> 00:39:31,490
對啊 所以你可以找你的父母

974
00:39:31,490 --> 00:39:35,480
然後請他們去申請開發者的帳號

975
00:39:35,480 --> 00:39:37,500
然後再用他的帳號底下去

976
00:39:37,500 --> 00:39:38,500
新增那個管理員

977
00:39:38,500 --> 00:39:39,500
然後設置你自己的 Apple ID

978
00:39:39,500 --> 00:39:42,500
那這樣你還是可以去做

979
00:39:42,500 --> 00:39:45,490
App Store Connect 上面的一些存取

980
00:39:45,490 --> 00:39:49,490
那只是說 App 開發上傳到 App Store 上的

981
00:39:49,490 --> 00:39:51,480
名義還是會以那個

982
00:39:51,480 --> 00:39:53,480
開發者帳號的持有者為主

983
00:39:53,480 --> 00:39:56,500
那有辦法在 Windows 環境開發嗎

984
00:39:56,500 --> 00:39:57,500
剛好像出現過

985
00:39:57,500 --> 00:39:59,500
社團課有你負責教學

986
00:39:59,500 --> 00:40:02,490
還是有聘請其他老師會教些什麼

987
00:40:03,490 --> 00:40:06,490
社團課本身就會有指導老師

988
00:40:06,490 --> 00:40:12,500
那就是學生可以自己選擇要不要做教學

989
00:40:12,500 --> 00:40:14,500
那我是選擇自己來教 Python

990
00:40:14,500 --> 00:40:17,490
因為學校本身就有程式設計的課程

991
00:40:17,490 --> 00:40:20,490
那因為社團本身就是以學生為主

992
00:40:20,490 --> 00:40:23,490
所以我會希望自己來嘗試來做這些教學

993
00:40:23,490 --> 00:40:27,500
那剩下的問題我會用剛剛提到的那三個

994
00:40:27,500 --> 00:40:31,500
用 Medium 和 Instagram 這兩個管道來做回答

995
00:40:31,500 --> 00:40:33,500
謝謝大家

