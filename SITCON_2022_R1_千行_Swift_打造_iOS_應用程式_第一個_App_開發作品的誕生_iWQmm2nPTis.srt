1
00:00:00,000 --> 00:00:02,000
大家好,我是吳承翰

2
00:00:02,000 --> 00:00:04,000
我今天帶來的主題叫做

3
00:00:04,000 --> 00:00:07,000
千行Suite打造iOS應用程式

4
00:00:07,000 --> 00:00:09,000
在三個月前,我成功在App Store

5
00:00:09,000 --> 00:00:12,000
發佈了自己的第一個iOS開發

6
00:00:12,000 --> 00:00:14,000
App開發作品叫做Skyrim

7
00:00:14,000 --> 00:00:16,000
所以今天這場議程

8
00:00:16,000 --> 00:00:19,000
希望透過第一個App開發作品的單身

9
00:00:19,000 --> 00:00:22,000
來帶大家認識iOS應用程式的開發

10
00:00:22,000 --> 00:00:24,000
或者是了解自己手機中

11
00:00:24,000 --> 00:00:27,000
各種常見功能背後的運作機制

12
00:00:27,000 --> 00:00:30,000
那我在這場議程中如果有任何的問題

13
00:00:30,000 --> 00:00:32,000
可以透過Slido進行即時提問

14
00:00:32,000 --> 00:00:34,000
我會在會後的Q&A

15
00:00:34,000 --> 00:00:37,000
或者是議程結束後做解答

16
00:00:37,000 --> 00:00:40,000
那另外也可以順便先下載Skyrim

17
00:00:40,000 --> 00:00:42,000
接下來會根據這款App的實作經驗

18
00:00:42,000 --> 00:00:45,000
來介紹iOS App的開發過程

19
00:00:45,000 --> 00:00:48,000
那可能左右兩邊的螢幕

20
00:00:48,000 --> 00:00:50,000
因為比較暗位比較好,我掃

21
00:00:50,000 --> 00:00:52,000
那等一下如果錯過這兩個Q&A

22
00:00:52,000 --> 00:00:54,000
我會再重複一次

23
00:00:55,000 --> 00:00:57,000
那等一下如果錯過這兩個Q&A

24
00:00:57,000 --> 00:01:00,000
還是可以在議程表上找到連結

25
00:01:00,000 --> 00:01:02,000
那在趁大家掃描的時候

26
00:01:02,000 --> 00:01:04,000
我先做一下自我介紹

27
00:01:04,000 --> 00:01:07,000
那我是來自梅倫高中的吳承翰

28
00:01:07,000 --> 00:01:10,000
那上一個學年都市校內城市設計社的社長

29
00:01:10,000 --> 00:01:12,000
那不知道有沒有人和我一樣

30
00:01:12,000 --> 00:01:15,000
都是在小學大概五年級的時候吧

31
00:01:15,000 --> 00:01:17,000
學校教到Scratch

32
00:01:17,000 --> 00:01:19,000
然後才開始探索資訊這個領域

33
00:01:19,000 --> 00:01:21,000
那後來覺得那開始

34
00:01:21,000 --> 00:01:23,000
比較像是一種教材

35
00:01:23,000 --> 00:01:26,000
所以來開始學習一些文字式的程式語言

36
00:01:26,000 --> 00:01:28,000
像是Python

37
00:01:28,000 --> 00:01:30,000
然後做一些類似

38
00:01:30,000 --> 00:01:33,000
找質數或者是EA2B之類的程式

39
00:01:33,000 --> 00:01:35,000
那今天之所以會有這個計畫

40
00:01:35,000 --> 00:01:36,000
是這個時期的作品

41
00:01:36,000 --> 00:01:39,000
不管是質數的計算還是EA2B

42
00:01:39,000 --> 00:01:41,000
那他們的畫面都很單調

43
00:01:41,000 --> 00:01:43,000
只有一個黑底白字的命令列視窗

44
00:01:43,000 --> 00:01:45,000
在做輸入輸出

45
00:01:45,000 --> 00:01:49,000
而且如果要把成果和其他人分享的話

46
00:01:49,000 --> 00:01:52,000
像是這個能夠網路連線的EA2B遊戲

47
00:01:52,000 --> 00:01:57,000
那就要請對方在自己的電腦上安裝Python的直譯器

48
00:01:57,000 --> 00:01:58,000
那相較之下

49
00:01:58,000 --> 00:02:01,000
手機應用程式有豐富的使用者介面

50
00:02:01,000 --> 00:02:03,000
而且只要上傳到App Store

51
00:02:03,000 --> 00:02:05,000
不管是親朋好友

52
00:02:05,000 --> 00:02:06,000
或者是世界各地的人們

53
00:02:06,000 --> 00:02:10,000
都有可能來使用你的App

54
00:02:10,000 --> 00:02:12,000
那其實要開發什麼樣的App

55
00:02:12,000 --> 00:02:14,000
也會是一個大問題

56
00:02:14,000 --> 00:02:16,000
那我這個Skyrim的靈感

57
00:02:16,000 --> 00:02:18,000
是來自於剛升上高一的時候

58
00:02:18,000 --> 00:02:20,000
有個同學表示說

59
00:02:20,000 --> 00:02:21,000
現在沒有聯絡簿

60
00:02:21,000 --> 00:02:22,000
所以他覺得

61
00:02:22,000 --> 00:02:23,000
任何的作業考試

62
00:02:23,000 --> 00:02:24,000
還有一些提醒事項

63
00:02:24,000 --> 00:02:26,000
都要自己記有點麻煩

64
00:02:26,000 --> 00:02:28,000
那雖然我覺得這可能不會是什麼大問題

65
00:02:28,000 --> 00:02:30,000
而且沒有聯絡簿就不用每天寫日記

66
00:02:30,000 --> 00:02:32,000
其實應該是好事一件嘛

67
00:02:32,000 --> 00:02:35,000
但是因為畢竟有需求就有市場

68
00:02:35,000 --> 00:02:36,000
而且提醒事項感覺

69
00:02:36,000 --> 00:02:40,000
很適合當作第一次嘗試開發App的主題

70
00:02:40,000 --> 00:02:41,000
所以我就決定要做一個

71
00:02:41,000 --> 00:02:46,000
為學生打造的提醒事項App

72
00:02:46,000 --> 00:02:48,000
那接下來我參考了App內建的

73
00:02:48,000 --> 00:02:50,000
iPhone內建的提醒事項

74
00:02:50,000 --> 00:02:52,000
然後和App Store上

75
00:02:52,000 --> 00:02:54,000
其他類似的提醒事項App

76
00:02:54,000 --> 00:02:56,000
然後開始規劃一些功能

77
00:02:56,000 --> 00:02:58,000
包含最基本的作業清單

78
00:02:58,000 --> 00:03:00,000
他們的增刪改查

79
00:03:00,000 --> 00:03:02,000
然後以及提醒事項最基本的

80
00:03:02,000 --> 00:03:05,000
發送通知的功能

81
00:03:05,000 --> 00:03:07,000
那以及QR Code分享作業

82
00:03:07,000 --> 00:03:09,000
然後和主畫面小工具

83
00:03:09,000 --> 00:03:10,000
那因為前面有提到說

84
00:03:10,000 --> 00:03:12,000
這是一個為學生打造的提醒事項App

85
00:03:12,000 --> 00:03:14,000
所以考量到學生可能會

86
00:03:14,000 --> 00:03:16,000
之間互相詢問有什麼作業

87
00:03:16,000 --> 00:03:18,000
那所以才會有QR Code這個功能

88
00:03:18,000 --> 00:03:20,000
讓大家來掃描QR Code

89
00:03:20,000 --> 00:03:25,000
然後就可以馬上的登錄作業

90
00:03:25,000 --> 00:03:27,000
那等到動機和靈感都有了

91
00:03:27,000 --> 00:03:29,000
我們就可以來準備開發工具

92
00:03:29,000 --> 00:03:32,000
那只要是Apple相關平台的開發

93
00:03:32,000 --> 00:03:34,000
一定要有一台Apple筆電

94
00:03:34,000 --> 00:03:35,000
不一定要是筆電

95
00:03:35,000 --> 00:03:37,000
但是要是Apple電腦

96
00:03:37,000 --> 00:03:38,000
然後以及想開發的平台

97
00:03:38,000 --> 00:03:39,000
它對應的裝置

98
00:03:39,000 --> 00:03:41,000
例如說開發iOS的App

99
00:03:41,000 --> 00:03:42,000
就要有iPhone

100
00:03:42,000 --> 00:03:44,000
那如果是iPad OS

101
00:03:44,000 --> 00:03:47,000
就會要有iPad

102
00:03:47,000 --> 00:03:48,000
那這是因為開發過程中

103
00:03:48,000 --> 00:03:49,000
會使用到一款

104
00:03:49,000 --> 00:03:52,000
名為Xcode的整合式開發環境

105
00:03:52,000 --> 00:03:54,000
這是Apple免費提供給

106
00:03:54,000 --> 00:03:56,000
開發者們的開發工具

107
00:03:56,000 --> 00:03:57,000
那它裡面有具備

108
00:03:57,000 --> 00:04:00,000
每個平台的開發套件

109
00:04:00,000 --> 00:04:02,000
也就是你建構一個App的所需資源

110
00:04:02,000 --> 00:04:04,000
那它可以負責開發

111
00:04:04,000 --> 00:04:06,000
然後測試還有上傳

112
00:04:06,000 --> 00:04:08,000
應用程式這些工作

113
00:04:08,000 --> 00:04:11,000
而且還包含所有裝置的虛擬機

114
00:04:11,000 --> 00:04:13,000
讓你可以來模擬App的執行狀況

115
00:04:14,000 --> 00:04:16,000
但是這個IDE只能安裝在

116
00:04:16,000 --> 00:04:17,000
Mac OS的電腦上

117
00:04:17,000 --> 00:04:19,000
所以一定要有一台Apple的電腦

118
00:04:21,000 --> 00:04:22,000
那講到這裡你可能會想說

119
00:04:22,000 --> 00:04:23,000
既然有虛擬機

120
00:04:23,000 --> 00:04:24,000
那是不是就沒有必要

121
00:04:24,000 --> 00:04:26,000
準備實際的裝置了

122
00:04:26,000 --> 00:04:28,000
那其實Xcode內的虛擬機

123
00:04:28,000 --> 00:04:30,000
只是模擬App的執行狀況

124
00:04:30,000 --> 00:04:32,000
並不是完整的作業系統

125
00:04:32,000 --> 00:04:35,000
所以它不能保證App在虛擬機

126
00:04:35,000 --> 00:04:38,000
然後和實際裝置上的表現完全一致

127
00:04:38,000 --> 00:04:40,000
而且有些功能像是相機、麥克風

128
00:04:40,000 --> 00:04:41,000
以及推播通知功能

129
00:04:41,000 --> 00:04:44,000
就必須要在實際裝置上做測試

130
00:04:46,000 --> 00:04:49,000
那再來進到實作歷程與原理的部分

131
00:04:49,000 --> 00:04:50,000
那首先第一個是

132
00:04:50,000 --> 00:04:52,000
關於App的使用者介面

133
00:04:52,000 --> 00:04:55,000
那SwitchUI是Apple在2019年的

134
00:04:55,000 --> 00:04:57,000
全球開發者大會上

135
00:04:57,000 --> 00:04:59,000
新發表的UI框架

136
00:04:59,000 --> 00:05:01,000
那它同時也逐漸取代

137
00:05:01,000 --> 00:05:04,000
過去十年來的UIKit成為主流

138
00:05:04,000 --> 00:05:07,000
那以前透過UIKit會像做簡報一樣

139
00:05:07,000 --> 00:05:10,000
在佈局畫面上的所有元件

140
00:05:10,000 --> 00:05:12,000
然後再透過程式碼處理這些元件

141
00:05:12,000 --> 00:05:15,000
要顯示的內容以及和使用者的操作

142
00:05:15,000 --> 00:05:17,000
那雖然說是像做簡報一樣

143
00:05:17,000 --> 00:05:20,000
但它並不是像我們想像的這麼簡單

144
00:05:20,000 --> 00:05:23,000
因為它的iPhone有很多種不同的尺寸

145
00:05:23,000 --> 00:05:25,000
所以你要去針對

146
00:05:27,000 --> 00:05:29,000
應該說如果你要設定一個元件的位置

147
00:05:29,000 --> 00:05:30,000
那你設定的是

148
00:05:30,000 --> 00:05:33,000
它距離上下左右四個邊緣的間距

149
00:05:36,000 --> 00:05:37,000
然後再來一點是

150
00:05:37,000 --> 00:05:39,000
因為它剛剛有說

151
00:05:39,000 --> 00:05:43,000
它要用程式去控制它顯示的內容和使用者操作

152
00:05:43,000 --> 00:05:45,000
所以必須執行虛擬機

153
00:05:45,000 --> 00:05:47,000
或者是安裝到實際裝置

154
00:05:47,000 --> 00:05:50,000
然後才能看到你使用者介面的實際成果

155
00:05:50,000 --> 00:05:52,000
而且如果要支援其他的平台

156
00:05:52,000 --> 00:05:55,000
就得另外使用他們對應的UI框架

157
00:05:55,000 --> 00:05:57,000
那至於我採用的Switch UI

158
00:05:57,000 --> 00:06:00,000
則是完全建構在程式碼上

159
00:06:00,000 --> 00:06:03,000
而且可以透過Xcode內建的即時預覽功能

160
00:06:03,000 --> 00:06:05,000
讓你在撰寫程式的過程

161
00:06:05,000 --> 00:06:07,000
馬上一眼看出結果

162
00:06:07,000 --> 00:06:09,000
這樣就可以省下非常多等待的時間

163
00:06:09,000 --> 00:06:12,000
那最重要的是它可以支援Apple旗下的所有平台

164
00:06:12,000 --> 00:06:14,000
所以你的程式只要寫一次

165
00:06:14,000 --> 00:06:16,000
然後再稍微做修改

166
00:06:16,000 --> 00:06:19,000
就可以讓你的使用者介面支援各大平台

167
00:06:21,000 --> 00:06:23,000
那要建立使用者介面的話

168
00:06:23,000 --> 00:06:24,000
我們會定義一個結構體

169
00:06:24,000 --> 00:06:28,000
然後讓它遵守來自Switch UI的View協定

170
00:06:29,000 --> 00:06:31,000
那依照蘋果的定義

171
00:06:31,000 --> 00:06:33,000
協定可以想成是一種藍圖

172
00:06:33,000 --> 00:06:37,000
其中定義了達成某種任務

173
00:06:37,000 --> 00:06:39,000
或者是功能所需的要素

174
00:06:39,000 --> 00:06:40,000
就像這裡的View協定

175
00:06:40,000 --> 00:06:44,000
為了讓系統能呈現使用者介面

176
00:06:44,000 --> 00:06:46,000
所以要求我們在Content View中

177
00:06:46,000 --> 00:06:48,000
定義一個名為Body的屬性

178
00:06:48,000 --> 00:06:51,000
那iOS就會根據裡面的內容來繪製UI

179
00:06:52,000 --> 00:06:53,000
那至於Body的內容

180
00:06:53,000 --> 00:06:55,000
可以運用已經內建的各種基本元件

181
00:06:55,000 --> 00:06:58,000
像是文字、按鈕和選單

182
00:06:58,000 --> 00:07:00,000
來組合出我們需要的內容

183
00:07:00,000 --> 00:07:04,000
而且它還不一定要是整個螢幕畫面

184
00:07:04,000 --> 00:07:06,000
也可以是一個規模較小的顯示區

185
00:07:06,000 --> 00:07:08,000
然後把它當作自訂的元件

186
00:07:08,000 --> 00:07:11,000
然後套用到其他規模較大的螢幕畫面上

187
00:07:11,000 --> 00:07:14,000
那例如說我APP中的作業清單

188
00:07:14,000 --> 00:07:16,000
每一列都會有一個告訴你

189
00:07:16,000 --> 00:07:20,000
告訴你作業有沒有完成的狀態指示器

190
00:07:20,000 --> 00:07:23,000
那它再配合一些作業標題的文字顯示區

191
00:07:23,000 --> 00:07:27,000
就會成為作業清單上每一列的顯示區

192
00:07:27,000 --> 00:07:29,000
那最後這些每一列

193
00:07:29,000 --> 00:07:32,000
就會再組成你的作業清單

194
00:07:32,000 --> 00:07:34,000
那同樣的這個狀態指示器

195
00:07:34,000 --> 00:07:38,000
也有出現在作業的詳細資訊頁面裡面

196
00:07:38,000 --> 00:07:40,000
事實上這些所有內建的元件

197
00:07:40,000 --> 00:07:42,000
也都遵守VIEW協定

198
00:07:42,000 --> 00:07:44,000
那整個SwitchUI建構的螢幕畫面

199
00:07:44,000 --> 00:07:46,000
就是由各種大大小小的顯示區

200
00:07:46,000 --> 00:07:52,000
匯聚而成

201
00:07:52,000 --> 00:07:54,000
除此之外VIEW協定還提供一種

202
00:07:54,000 --> 00:07:56,000
叫做修飾符的東西

203
00:07:56,000 --> 00:07:59,000
改變系統呈現顯示區的方式

204
00:07:59,000 --> 00:08:05,000
像是他們的顏色、風格還有動畫效果

205
00:08:05,000 --> 00:08:06,000
那到目前為止

206
00:08:06,000 --> 00:08:09,000
我們的UI顯示的內容都是事先指定好的

207
00:08:09,000 --> 00:08:11,000
意思就是整個畫面像照片一樣

208
00:08:11,000 --> 00:08:13,000
沒有辦法和使用者互動

209
00:08:13,000 --> 00:08:15,000
那它也不會更新

210
00:08:15,000 --> 00:08:16,000
所以最後一步就是讓使用者

211
00:08:16,000 --> 00:08:18,000
能和我們的UI互動

212
00:08:18,000 --> 00:08:24,000
然後由SwitchUI來替我們更新畫面

213
00:08:25,000 --> 00:08:27,000
那這裡可以先建立一個變數

214
00:08:27,000 --> 00:08:30,000
然後當作文字顯示區要顯示的數值

215
00:08:30,000 --> 00:08:31,000
然後在變數的前面

216
00:08:31,000 --> 00:08:34,000
加上一個Add State這個標記

217
00:08:34,000 --> 00:08:36,000
那這麼做的效果是

218
00:08:36,000 --> 00:08:38,000
當這個變數的值被修改

219
00:08:38,000 --> 00:08:40,000
例如說使用者按下按鈕

220
00:08:40,000 --> 00:08:43,000
然後來觸發程式讓變數的值遞增

221
00:08:43,000 --> 00:08:48,000
那SwitchUI就會來幫我們更新相關的顯示區

222
00:08:48,000 --> 00:08:49,000
另外補充一下

223
00:08:49,000 --> 00:08:52,000
我們通常會把這樣的變數宣告成Private

224
00:08:52,000 --> 00:08:54,000
那這是Switch的存取控制的一環

225
00:08:54,000 --> 00:08:57,000
限定它只能在ContentView的內部做存取

226
00:08:57,000 --> 00:09:02,000
因為從外部存取會造成應用程式閃退

227
00:09:02,000 --> 00:09:04,000
那關於這個State標記

228
00:09:04,000 --> 00:09:07,000
它是SwitchUI提供的一種屬性包裝器

229
00:09:07,000 --> 00:09:10,000
那這個也是Switch語言的新特性之一

230
00:09:10,000 --> 00:09:13,000
可以利用它來實作管理屬性的邏輯

231
00:09:13,000 --> 00:09:17,000
然後套用到任何你想包裝的屬性上

232
00:09:17,000 --> 00:09:21,000
然後達到將屬性的定義和管理的程式碼分離的效果

233
00:09:21,000 --> 00:09:24,000
例如說SwitchUI可能會在這個包裝器中

234
00:09:24,000 --> 00:09:26,000
實作更新畫面的機制

235
00:09:29,000 --> 00:09:31,000
例如說SwitchUI可能會在這個包裝器中

236
00:09:31,000 --> 00:09:33,000
實作更新畫面的機制

237
00:09:33,000 --> 00:09:36,000
然後我們在ContentView中定義了count這個屬性

238
00:09:36,000 --> 00:09:39,000
然後用State來包裝它交給SwitchUI來管理

239
00:09:42,000 --> 00:09:45,000
那這張來自Apple官方說明文件的圖片

240
00:09:45,000 --> 00:09:49,000
描述了使用者與UI互動造成資料狀態改變

241
00:09:49,000 --> 00:09:51,000
然後一直到畫面更新的過程

242
00:09:51,000 --> 00:09:56,000
整個藍色的區塊就是SwitchUI負責的範圍

243
00:09:58,000 --> 00:10:02,000
那其實SwitchUI還提供很多種不同的屬性包裝器

244
00:10:02,000 --> 00:10:05,000
那它可以根據顯示區不同的資料來源

245
00:10:05,000 --> 00:10:07,000
有不同的使用時機

246
00:10:07,000 --> 00:10:10,000
例如說有些元件可能會具備修改資料的功能

247
00:10:10,000 --> 00:10:14,000
那這些元件內部就會用到Binding這個屬性包裝器

248
00:10:14,000 --> 00:10:16,000
那它的資料是來自上層的顯示區

249
00:10:16,000 --> 00:10:19,000
而且修改的時候也會同步更新來源端的內容

250
00:10:19,000 --> 00:10:23,000
那至於Environment可以來取得一些環境變數

251
00:10:23,000 --> 00:10:26,000
像是手機是否在使用深色模式

252
00:10:26,000 --> 00:10:28,000
以及使用者的語言

253
00:10:28,000 --> 00:10:30,000
那當然這些值被修改的時候

254
00:10:30,000 --> 00:10:32,000
SwitchUI也會來幫我們更新畫面

255
00:10:35,000 --> 00:10:37,000
那以上就是SwitchUI的介紹

256
00:10:37,000 --> 00:10:39,000
那到這個階段我已經完成提醒

257
00:10:39,000 --> 00:10:41,000
事項App大部分的介面

258
00:10:41,000 --> 00:10:45,000
也加入了作業和課程的增加和刪除

259
00:10:45,000 --> 00:10:48,000
以及修改和查詢的核心功能

260
00:10:48,000 --> 00:10:51,000
那像這樣具備資料的增刪改查的App

261
00:10:51,000 --> 00:10:53,000
叫做CRUD App

262
00:10:53,000 --> 00:10:56,000
可以來當作一個學習App開發的重要里程碑

263
00:10:59,000 --> 00:11:04,000
那iOS中常見的資料儲存方式就是Core Data和User Default

264
00:11:04,000 --> 00:11:08,000
那Core Data它適合用來儲存一系列大量的資料

265
00:11:08,000 --> 00:11:11,000
而且還能在不同類型的資料之間建立關聯性

266
00:11:11,000 --> 00:11:13,000
以及刪除規則

267
00:11:13,000 --> 00:11:17,000
像是我的App中的作業和課程列表

268
00:11:17,000 --> 00:11:21,000
那關聯性就是指作業可能會連結到一項課程

269
00:11:21,000 --> 00:11:24,000
那課程可能會同時連結到多項作業

270
00:11:24,000 --> 00:11:27,000
那刪除規則就是指刪除某一個課程的時候

271
00:11:27,000 --> 00:11:29,000
也並去刪除它相關的作業

272
00:11:32,000 --> 00:11:34,000
至於User Default則是類似字典

273
00:11:34,000 --> 00:11:37,000
以箭對應到紙的方式在儲存資料

274
00:11:37,000 --> 00:11:40,000
那它適合用來儲存使用者的偏好設定

275
00:11:40,000 --> 00:11:43,000
這種比較簡單然後也比較零碎的資料

276
00:11:46,000 --> 00:11:51,000
那使用者的通知也是提醒事項非常基本的功能之一

277
00:11:51,000 --> 00:11:54,000
那iOS中的使用者通知主要可以分成

278
00:11:54,000 --> 00:11:56,000
本地通知和遠端通知兩種

279
00:11:56,000 --> 00:12:00,000
那其中本地通知是由App在裝置上發起

280
00:12:00,000 --> 00:12:04,000
然後遠端通知則是透過網路傳送到使用者的裝置上

281
00:12:05,000 --> 00:12:09,000
不過不論是哪一種通知都需要先向使用者取得

282
00:12:09,000 --> 00:12:10,000
傳送通知的權限

283
00:12:10,000 --> 00:12:13,000
那方法是呼叫上面這條函式

284
00:12:13,000 --> 00:12:15,000
告訴系統我們想傳送通知

285
00:12:15,000 --> 00:12:18,000
而且可能會包含橫幅、聲音以及圖像標記

286
00:12:18,000 --> 00:12:21,000
然後系統就會顯示像這樣子的視窗

287
00:12:21,000 --> 00:12:24,000
來提示使用者讓使用者決定是否要允許

288
00:12:25,000 --> 00:12:29,000
那有很多應用程式會在App第一次啟動的時候

289
00:12:29,000 --> 00:12:31,000
跳出視窗來向使用者要求權限

290
00:12:31,000 --> 00:12:34,000
但是這樣其實遭到拒絕的風險非常大

291
00:12:34,000 --> 00:12:37,000
因為他們不知道為什麼這個App需要傳送通知

292
00:12:37,000 --> 00:12:41,000
而且取得權限的這個機會只有一次

293
00:12:41,000 --> 00:12:44,000
不論使用者是允許還是拒絕

294
00:12:44,000 --> 00:12:47,000
那他下次再呼叫這條函式的時候

295
00:12:47,000 --> 00:12:50,000
系統就會直接沿用使用者的系統設定

296
00:12:51,000 --> 00:12:53,000
而且不會再跳出視窗

297
00:12:53,000 --> 00:12:56,000
那唯一的解決辦法就是引導使用者到設定App

298
00:12:56,000 --> 00:12:58,000
來為我們的App開啟權限

299
00:12:58,000 --> 00:13:02,000
那我覺得這對我們和使用者都是一件滿麻煩的事

300
00:13:03,000 --> 00:13:05,000
所以我的做法是

301
00:13:05,000 --> 00:13:08,000
等到使用者第一次建立作業的時候

302
00:13:08,000 --> 00:13:13,000
告訴他們我可以向他們傳送有關作業的提醒通知

303
00:13:13,000 --> 00:13:15,000
那如果使用者選擇拒絕的話

304
00:13:15,000 --> 00:13:17,000
才會向他們來要求通知權限

305
00:13:19,000 --> 00:13:21,000
那另外還有一種方法

306
00:13:21,000 --> 00:13:23,000
就是在呼叫要求權限的函式時

307
00:13:23,000 --> 00:13:25,000
在Option的地方新增一項

308
00:13:25,000 --> 00:13:28,000
叫做Professional的選項

309
00:13:28,000 --> 00:13:31,000
那這樣子就可以得到暫時的通知權限

310
00:13:31,000 --> 00:13:35,000
那系統也不會跳出使用者來詢問他們的意見

311
00:13:35,000 --> 00:13:37,000
只是這個時候傳送的通知是靜音的

312
00:13:37,000 --> 00:13:40,000
不會有橫幅和聲音以及圖像標記

313
00:13:40,000 --> 00:13:42,000
也不會出現在鎖定畫面

314
00:13:42,000 --> 00:13:45,000
只會出現在手機上的通知中心裡

315
00:13:45,000 --> 00:13:47,000
等到使用者看到之後可以選擇保留

316
00:13:47,000 --> 00:13:49,000
或者是關閉通知權限

317
00:13:50,000 --> 00:13:51,000
那只要選擇保留的話

318
00:13:51,000 --> 00:13:53,000
我們就可以得到前面並要求的

319
00:13:53,000 --> 00:13:56,000
橫幅聲音和圖像標記權限

320
00:13:56,000 --> 00:13:58,000
那但是後來我沒有選擇這種方式

321
00:13:58,000 --> 00:14:00,000
因為有其他開發者的文章寫到

322
00:14:00,000 --> 00:14:02,000
萬一使用者選擇關閉

323
00:14:02,000 --> 00:14:04,000
那即使之後再到設定裡面打開

324
00:14:04,000 --> 00:14:06,000
也只會得到靜音通知的權限

325
00:14:06,000 --> 00:14:09,000
那要再引導使用者開啟下方的

326
00:14:09,000 --> 00:14:10,000
橫幅聲音和圖像標記

327
00:14:10,000 --> 00:14:12,000
其實都會有一定的難度

328
00:14:14,000 --> 00:14:15,000
接下來我要來介紹

329
00:14:15,000 --> 00:14:17,000
本地通知的實作方式

330
00:14:17,000 --> 00:14:19,000
其實步驟相當簡單

331
00:14:19,000 --> 00:14:22,000
那第一步就是先安排通知的內容

332
00:14:22,000 --> 00:14:26,000
然後設定其中的標題、內文和聲音

333
00:14:26,000 --> 00:14:29,000
接下來要選擇通知的觸發器

334
00:14:29,000 --> 00:14:32,000
在iOS的本地通知有三種觸發方式

335
00:14:32,000 --> 00:14:34,000
分別是依照日期間隔

336
00:14:34,000 --> 00:14:38,000
時間間隔、日期或者是地點來觸發

337
00:14:38,000 --> 00:14:39,000
那每一種都可以設定

338
00:14:39,000 --> 00:14:41,000
要不要重複發送通知

339
00:14:43,000 --> 00:14:44,000
以我在這個APP的需求

340
00:14:44,000 --> 00:14:46,000
我需要實作兩種通知功能

341
00:14:46,000 --> 00:14:49,000
一種是作業的逾期提醒

342
00:14:49,000 --> 00:14:51,000
就是在作業截止的時候觸發

343
00:14:51,000 --> 00:14:54,000
那另外一種是即將到期的提醒

344
00:14:54,000 --> 00:14:57,000
根據作業的指派日期以及截止日期

345
00:14:57,000 --> 00:15:00,000
在剩餘時間低於某個百分比的時候觸發

346
00:15:00,000 --> 00:15:02,000
例如說20%

347
00:15:02,000 --> 00:15:04,000
那它可以根據上面這條公式

348
00:15:04,000 --> 00:15:06,000
來計算出觸發的時間點

349
00:15:06,000 --> 00:15:07,000
所以這兩種功能

350
00:15:07,000 --> 00:15:10,000
都是使用第二種觸發器來實作

351
00:15:12,000 --> 00:15:13,000
那使用這種觸發器

352
00:15:13,000 --> 00:15:17,000
要設定通知觸發時的日期組成

353
00:15:17,000 --> 00:15:19,000
像是年月日十分秒

354
00:15:19,000 --> 00:15:20,000
那系統會在下一個

355
00:15:20,000 --> 00:15:23,000
符合這些日期的時間點來發送通知

356
00:15:23,000 --> 00:15:26,000
而且還可以設定要不要重複觸發

357
00:15:26,000 --> 00:15:28,000
換句話說如果只設定十分秒

358
00:15:28,000 --> 00:15:30,000
然後還設定成重複發送的話

359
00:15:30,000 --> 00:15:32,000
那系統就會在每天的這個時間點

360
00:15:32,000 --> 00:15:34,000
來發送通知

361
00:15:34,000 --> 00:15:36,000
那我的通知只要發送一次

362
00:15:36,000 --> 00:15:37,000
所以我需要明確設定

363
00:15:37,000 --> 00:15:39,000
他們的年月日十分秒

364
00:15:39,000 --> 00:15:41,000
然後不要重複發送

365
00:15:43,000 --> 00:15:45,000
最後一步是建立通知要求

366
00:15:45,000 --> 00:15:48,000
除了剛剛的通知內容和觸發器

367
00:15:48,000 --> 00:15:50,000
還要再另外準備一個識別碼

368
00:15:50,000 --> 00:15:52,000
那這個識別碼可以用來

369
00:15:52,000 --> 00:15:54,000
刪除和複寫通知要求

370
00:15:54,000 --> 00:15:58,000
所以我在作業的物件中加入一項ID屬性

371
00:15:58,000 --> 00:16:00,000
然後用它來加上通知類型

372
00:16:00,000 --> 00:16:02,000
就是我自己決定的通知類型

373
00:16:02,000 --> 00:16:05,000
然後作為後綴當作識別碼

374
00:16:05,000 --> 00:16:07,000
那不直接使用作業名稱

375
00:16:07,000 --> 00:16:09,000
是因為可能會和其他的作業重複

376
00:16:09,000 --> 00:16:11,000
而且使用者也可以隨時修改

377
00:16:11,000 --> 00:16:13,000
他們的作業名稱

378
00:16:13,000 --> 00:16:14,000
那等到這幾個步驟完成

379
00:16:14,000 --> 00:16:16,000
就可以透過通知中心

380
00:16:16,000 --> 00:16:18,000
向系統註冊我們要求

381
00:16:18,000 --> 00:16:20,000
然後就會成功發送通知

382
00:16:21,000 --> 00:16:24,000
再來比較麻煩的是遠端通知

383
00:16:24,000 --> 00:16:26,000
會說它麻煩並不是因為程式複雜

384
00:16:26,000 --> 00:16:28,000
而是它的準備工作比較繁瑣

385
00:16:28,000 --> 00:16:31,000
那這張圖解釋了推播通知的傳送過程

386
00:16:31,000 --> 00:16:34,000
我們要自己建立伺服器發送通知

387
00:16:34,000 --> 00:16:36,000
而且沒辦法直接傳送通知

388
00:16:36,000 --> 00:16:38,000
到使用者裝置上的app

389
00:16:38,000 --> 00:16:40,000
而是要像寄信一樣通過

390
00:16:40,000 --> 00:16:42,000
Apple的推播通知服務

391
00:16:42,000 --> 00:16:45,000
通常簡稱叫APNS

392
00:16:45,000 --> 00:16:46,000
然後讓它來幫助我們

393
00:16:46,000 --> 00:16:48,000
傳送通知給使用者

394
00:16:48,000 --> 00:16:51,000
也就是使用者裝置上的app

395
00:16:51,000 --> 00:16:54,000
寫信一定要指定收件人的地址

396
00:16:54,000 --> 00:16:56,000
所以我們會呼叫函式

397
00:16:56,000 --> 00:16:58,000
然後讓app執行的時候

398
00:16:58,000 --> 00:17:00,000
自己向APNS伺服器註冊

399
00:17:00,000 --> 00:17:02,000
這樣才會被分配到

400
00:17:02,000 --> 00:17:04,000
獨一無二的Device Token

401
00:17:04,000 --> 00:17:05,000
這個Token就是相當於

402
00:17:05,000 --> 00:17:07,000
世界上某一台特定裝置

403
00:17:07,000 --> 00:17:09,000
上面這個app的地址

404
00:17:09,000 --> 00:17:11,000
值得注意的是

405
00:17:11,000 --> 00:17:13,000
它雖然叫做Device Token

406
00:17:13,000 --> 00:17:15,000
但是同一台裝置上每個app

407
00:17:15,000 --> 00:17:17,000
被分到的Token都不會一樣

408
00:17:17,000 --> 00:17:19,000
而且這個Token隨時會因為

409
00:17:19,000 --> 00:17:21,000
使用者還原裝置備份

410
00:17:21,000 --> 00:17:23,000
或者是重新安裝app

411
00:17:23,000 --> 00:17:25,000
或作業系統而改變

412
00:17:25,000 --> 00:17:27,000
所以我們每次都要在app啟動的時候

413
00:17:27,000 --> 00:17:29,000
會向APNS伺服器來註冊

414
00:17:29,000 --> 00:17:31,000
確保能得到最新的Token

415
00:17:31,000 --> 00:17:34,000
然後把它回傳到我們自己的伺服器

416
00:17:34,000 --> 00:17:36,000
因為發送推播的時候會用到

417
00:17:39,000 --> 00:17:41,000
但是這裡我沒有自己打算

418
00:17:41,000 --> 00:17:43,000
我沒有打算自己課書

419
00:17:43,000 --> 00:17:45,000
發送推播的伺服器

420
00:17:45,000 --> 00:17:47,000
因為我沒有後端的開發技能

421
00:17:47,000 --> 00:17:49,000
所以我找到了Google的Firebase

422
00:17:49,000 --> 00:17:52,000
它提供非常豐富的後端服務

423
00:17:52,000 --> 00:17:54,000
那其中一項就是雲端通訊

424
00:17:54,000 --> 00:17:56,000
而且這是一項免費功能

425
00:17:56,000 --> 00:17:58,000
那它可以幫我們在app得到

426
00:17:58,000 --> 00:17:59,000
Device Token的時候

427
00:17:59,000 --> 00:18:02,000
回傳到Firebase做管理和儲存

428
00:18:02,000 --> 00:18:05,000
那我們只要設定一些金鑰檔案

429
00:18:05,000 --> 00:18:07,000
然後讓APNS確定

430
00:18:07,000 --> 00:18:09,000
推播的來源是開發者

431
00:18:09,000 --> 00:18:11,000
那我們就可以透過Firebase的

432
00:18:11,000 --> 00:18:14,000
網頁上的圖形化介面來安排通知

433
00:18:14,000 --> 00:18:19,000
以及他們發送的時間

434
00:18:19,000 --> 00:18:24,000
那再來是QR Code分享作業的功能

435
00:18:24,000 --> 00:18:25,000
那一開始的想法是

436
00:18:25,000 --> 00:18:28,000
使用換行字元來分隔不同的資料

437
00:18:28,000 --> 00:18:32,000
然後再把它轉換成QR Code

438
00:18:32,000 --> 00:18:34,000
然後等到使用者用app內建的

439
00:18:34,000 --> 00:18:36,000
掃描器掃描之後

440
00:18:36,000 --> 00:18:38,000
再根據事先定義好的欄位

441
00:18:38,000 --> 00:18:40,000
然後轉換成作業資料

442
00:18:40,000 --> 00:18:42,000
然後再填入表單讓使用者做編輯

443
00:18:42,000 --> 00:18:44,000
但最大的問題是我的設計

444
00:18:44,000 --> 00:18:45,000
讓使用者可以決定

445
00:18:45,000 --> 00:18:47,000
要不要分享作業的課程名稱

446
00:18:47,000 --> 00:18:49,000
和它的備註

447
00:18:49,000 --> 00:18:51,000
所以備註可能會有好幾行

448
00:18:51,000 --> 00:18:54,000
然後app將來改版

449
00:18:54,000 --> 00:18:56,000
可能會增減不同的欄位

450
00:18:56,000 --> 00:18:57,000
那這些都會讓app

451
00:18:57,000 --> 00:18:59,000
根據換行字元分割出的內容

452
00:18:59,000 --> 00:19:01,000
沒辦法對應到最初設計的欄位

453
00:19:01,000 --> 00:19:04,000
那app就會直接閃退給你看

454
00:19:04,000 --> 00:19:06,000
後來我找到了解決辦法是

455
00:19:06,000 --> 00:19:09,000
將作業資料轉換成JSON格式

456
00:19:09,000 --> 00:19:11,000
然後再來產生QR Code

457
00:19:11,000 --> 00:19:13,000
這是一種能以文字呈現

458
00:19:13,000 --> 00:19:17,000
結構化資訊的資料格式

459
00:19:17,000 --> 00:19:18,000
而且幸運的是

460
00:19:18,000 --> 00:19:20,000
Swift中有提供便捷的方式

461
00:19:20,000 --> 00:19:21,000
來處理原始物件

462
00:19:21,000 --> 00:19:24,000
與JSON格式之間的來回轉換

463
00:19:24,000 --> 00:19:25,000
那這樣就不必擔心

464
00:19:25,000 --> 00:19:27,000
單純使用換行字元分割資料

465
00:19:27,000 --> 00:19:30,000
造成的問題

466
00:19:30,000 --> 00:19:31,000
那在iOS中

467
00:19:31,000 --> 00:19:35,000
凡是要運用到相機、麥克風、GPS等

468
00:19:35,000 --> 00:19:37,000
和使用者的影視相關的服務

469
00:19:37,000 --> 00:19:39,000
都要經過使用者授權

470
00:19:39,000 --> 00:19:41,000
那這個方法

471
00:19:41,000 --> 00:19:43,000
和前面在介紹使用者通知時

472
00:19:43,000 --> 00:19:44,000
取得權限的機制

473
00:19:44,000 --> 00:19:46,000
幾乎完全一樣

474
00:19:46,000 --> 00:19:47,000
唯一的差別就是

475
00:19:47,000 --> 00:19:48,000
專案中會有一個

476
00:19:48,000 --> 00:19:51,000
名為info.plist的屬性列表

477
00:19:51,000 --> 00:19:52,000
那這個檔案

478
00:19:52,000 --> 00:19:54,000
也是用key對應到value的方式

479
00:19:54,000 --> 00:19:55,000
來儲存資料

480
00:19:55,000 --> 00:19:58,000
那裡面會包含app的一些設定資料

481
00:19:58,000 --> 00:20:00,000
那我們需要在這個檔案中

482
00:20:00,000 --> 00:20:01,000
新增使用描述

483
00:20:01,000 --> 00:20:04,000
說明這個app存取這些資源的用途

484
00:20:04,000 --> 00:20:06,000
像是這裡存取相機

485
00:20:06,000 --> 00:20:08,000
是為了掃描QR Code

486
00:20:08,000 --> 00:20:10,000
那系統就會在呈現視窗

487
00:20:10,000 --> 00:20:11,000
讓使用者確認權限的時候

488
00:20:11,000 --> 00:20:13,000
顯示這則訊息

489
00:20:13,000 --> 00:20:15,000
所以這樣的描述是

490
00:20:15,000 --> 00:20:17,000
開發的時候就已經寫死了

491
00:20:17,000 --> 00:20:19,000
完全沒有辦法透過程式控制

492
00:20:19,000 --> 00:20:20,000
那如果缺了這項設定

493
00:20:20,000 --> 00:20:23,000
系統會直接讓你的app閃退

494
00:20:25,000 --> 00:20:27,000
那接下來要介紹的小工具是

495
00:20:27,000 --> 00:20:30,000
Apple在iOS14推出的新功能

496
00:20:30,000 --> 00:20:31,000
它放在主畫面

497
00:20:31,000 --> 00:20:34,000
用來顯示與app相關的內容

498
00:20:34,000 --> 00:20:35,000
所以我在自己的app中

499
00:20:35,000 --> 00:20:36,000
也提供了

500
00:20:36,000 --> 00:20:38,000
作業蓋欄的小工具

501
00:20:38,000 --> 00:20:40,000
讓使用者不必特別一打開app

502
00:20:40,000 --> 00:20:43,000
就能掌握他們想要的資訊

503
00:20:43,000 --> 00:20:45,000
那在開發小工具的時候

504
00:20:45,000 --> 00:20:46,000
這裡有出現一個問題

505
00:20:46,000 --> 00:20:49,000
因為小工具它屬於app的擴充功能

506
00:20:49,000 --> 00:20:51,000
而不是app的一部分

507
00:20:51,000 --> 00:20:53,000
所以兩者的資料儲存也是獨立的

508
00:20:53,000 --> 00:20:55,000
也就是說小工具沒有辦法

509
00:20:55,000 --> 00:20:59,000
直接儲存app本身的資料

510
00:20:59,000 --> 00:21:00,000
那其中一種解決辦法

511
00:21:00,000 --> 00:21:02,000
就是建立一個app group

512
00:21:02,000 --> 00:21:03,000
然後透過這個群組底下的

513
00:21:03,000 --> 00:21:07,000
user defaults可以用來共享資料

514
00:21:07,000 --> 00:21:09,000
那小工具主要由configuration

515
00:21:09,000 --> 00:21:10,000
以及timeline provider

516
00:21:10,000 --> 00:21:12,000
和view content來組成

517
00:21:12,000 --> 00:21:14,000
其中configuration會包含

518
00:21:14,000 --> 00:21:16,000
小工具的識別碼

519
00:21:16,000 --> 00:21:19,000
和一些標題尺寸相關的設定

520
00:21:19,000 --> 00:21:21,000
那timeline provider主要負責

521
00:21:21,000 --> 00:21:23,000
安排小工具的更新時間軸

522
00:21:23,000 --> 00:21:24,000
和資料內容

523
00:21:24,000 --> 00:21:26,000
那view content則是小工具

524
00:21:26,000 --> 00:21:27,000
根據資料要呈現的

525
00:21:27,000 --> 00:21:29,000
sweet UI顯示區

526
00:21:29,000 --> 00:21:31,000
也就是說小工具的畫面

527
00:21:31,000 --> 00:21:35,000
它完全只能用sweet UI來做開發

528
00:21:35,000 --> 00:21:36,000
那其實所謂的資料

529
00:21:36,000 --> 00:21:38,000
就是一個至少包含

530
00:21:38,000 --> 00:21:40,000
時間屬性的物件

531
00:21:40,000 --> 00:21:41,000
然後我再另外加入

532
00:21:41,000 --> 00:21:42,000
作業資料作為

533
00:21:42,000 --> 00:21:45,000
繪製UI所需的作業資訊

534
00:21:45,000 --> 00:21:46,000
那其中的時間

535
00:21:46,000 --> 00:21:48,000
將會是系統根據

536
00:21:48,000 --> 00:21:50,000
更新小工具的時間

537
00:21:50,000 --> 00:21:51,000
所以timeline provider

538
00:21:51,000 --> 00:21:52,000
產生的時間軸

539
00:21:52,000 --> 00:21:56,000
其實就是這種物件的陣列

540
00:21:56,000 --> 00:21:57,000
那除此之外還可以指定

541
00:21:57,000 --> 00:21:59,000
重新載入時間軸的方式

542
00:21:59,000 --> 00:22:00,000
主要有三種

543
00:22:00,000 --> 00:22:02,000
分別是在時間軸的

544
00:22:02,000 --> 00:22:04,000
最後一次更新後重新載入

545
00:22:04,000 --> 00:22:07,000
或者是在指定的日期之後重載

546
00:22:07,000 --> 00:22:09,000
或者是直到app呼叫程式重載

547
00:22:09,000 --> 00:22:10,000
那以我的例子

548
00:22:10,000 --> 00:22:12,000
就是在每個作業截止的時間點

549
00:22:12,000 --> 00:22:15,000
來當作小工具更新的時間軸

550
00:22:15,000 --> 00:22:17,000
那等時間軸走到底之後

551
00:22:17,000 --> 00:22:20,000
再重新載入新的時間軸

552
00:22:20,000 --> 00:22:21,000
那另外我也需要

553
00:22:21,000 --> 00:22:22,000
在使用者新增

554
00:22:22,000 --> 00:22:23,000
或者是修改任何

555
00:22:23,000 --> 00:22:24,000
作業資料的時候

556
00:22:24,000 --> 00:22:26,000
重新載入時間軸來確保

557
00:22:26,000 --> 00:22:27,000
小工具顯示的

558
00:22:27,000 --> 00:22:29,000
會是最新的資訊

559
00:22:29,000 --> 00:22:31,000
所以也會透過前面的識別碼

560
00:22:31,000 --> 00:22:32,000
呼叫程式

561
00:22:32,000 --> 00:22:34,000
然後重新載入時間軸

562
00:22:34,000 --> 00:22:37,000
藉此更新他們顯示的資料內容

563
00:22:37,000 --> 00:22:38,000
那最後提醒一下

564
00:22:38,000 --> 00:22:39,000
蘋果有提到

565
00:22:39,000 --> 00:22:40,000
因為效能的考量

566
00:22:40,000 --> 00:22:41,000
所以小工具

567
00:22:41,000 --> 00:22:43,000
不一定會完全依照我們的

568
00:22:43,000 --> 00:22:44,000
時間軸更新

569
00:22:44,000 --> 00:22:45,000
可能會有一些延遲

570
00:22:45,000 --> 00:22:47,000
而且這個更新次數

571
00:22:47,000 --> 00:22:50,000
其實以24小時為週期

572
00:22:50,000 --> 00:22:52,000
會有一定的額度

573
00:22:52,000 --> 00:22:53,000
那這個額度會因為

574
00:22:53,000 --> 00:22:54,000
使用者的使用模式

575
00:22:54,000 --> 00:22:55,000
而有所增減

576
00:22:55,000 --> 00:22:56,000
而且重置的時間

577
00:22:56,000 --> 00:22:58,000
也不一定是凌晨12點

578
00:23:01,000 --> 00:23:02,000
那到目前為止

579
00:23:02,000 --> 00:23:03,000
這個App其實本身

580
00:23:03,000 --> 00:23:04,000
都是用英文寫的

581
00:23:04,000 --> 00:23:06,000
但是世界各地的人

582
00:23:06,000 --> 00:23:08,000
都有可能從App Store

583
00:23:08,000 --> 00:23:09,000
來下載我們的App

584
00:23:09,000 --> 00:23:11,000
所以如果能讓App

585
00:23:11,000 --> 00:23:12,000
在不同國家顯示

586
00:23:12,000 --> 00:23:13,000
不同的語言

587
00:23:13,000 --> 00:23:14,000
那這樣就能提升

588
00:23:14,000 --> 00:23:15,000
使用者的使用體驗

589
00:23:15,000 --> 00:23:18,000
而且這裡要分享的本地化

590
00:23:18,000 --> 00:23:19,000
而這裡要分享的本地化

591
00:23:19,000 --> 00:23:20,000
指的就是將App

592
00:23:20,000 --> 00:23:22,000
支援某種語言的過程

593
00:23:23,000 --> 00:23:25,000
那大家不要小看本地化

594
00:23:25,000 --> 00:23:26,000
雖然我為App本身

595
00:23:26,000 --> 00:23:28,000
加入了英文 繁體中文

596
00:23:28,000 --> 00:23:30,000
和簡體中文的支援

597
00:23:30,000 --> 00:23:31,000
但我一開始覺得

598
00:23:31,000 --> 00:23:32,000
App上架後

599
00:23:32,000 --> 00:23:33,000
應該只會有周遭的

600
00:23:33,000 --> 00:23:35,000
親朋好友來下載

601
00:23:35,000 --> 00:23:38,000
那主要應該也是以台灣為主

602
00:23:38,000 --> 00:23:39,000
結果第一天發布

603
00:23:39,000 --> 00:23:40,000
就出現了印度

604
00:23:40,000 --> 00:23:42,000
和澳洲的統計資料

605
00:23:42,000 --> 00:23:44,000
現在全世界除了

606
00:23:44,000 --> 00:23:46,000
那個全世界其他州

607
00:23:46,000 --> 00:23:47,000
除了南極州真的沒辦法

608
00:23:47,000 --> 00:23:50,000
那其他都收集到了

609
00:23:50,000 --> 00:23:51,000
那本地化的實作

610
00:23:51,000 --> 00:23:53,000
就是另外建立本地化檔案

611
00:23:53,000 --> 00:23:54,000
然後針對每一筆

612
00:23:54,000 --> 00:23:55,000
需要本地化的字串

613
00:23:55,000 --> 00:23:56,000
以原文當作箭

614
00:23:56,000 --> 00:23:58,000
然後譯文當作紙

615
00:23:58,000 --> 00:23:59,000
但是應該不會有人

616
00:23:59,000 --> 00:24:01,000
想要自己在排山倒海

617
00:24:01,000 --> 00:24:02,000
來程式碼找出

618
00:24:02,000 --> 00:24:04,000
所有需要本地化的字串吧

619
00:24:04,000 --> 00:24:05,000
因為感覺很容易

620
00:24:05,000 --> 00:24:06,000
重複或者是缺漏

621
00:24:06,000 --> 00:24:09,000
所以Xcode中有一種

622
00:24:09,000 --> 00:24:10,000
自動匯入和匯出

623
00:24:10,000 --> 00:24:12,000
本地化資料的功能

624
00:24:12,000 --> 00:24:14,000
針對我們想支援的語言

625
00:24:14,000 --> 00:24:15,000
幫我們提取出

626
00:24:15,000 --> 00:24:17,000
需要本地化的文字

627
00:24:17,000 --> 00:24:20,000
然後成為獨立的XLOC檔

628
00:24:20,000 --> 00:24:22,000
那我們可以編輯這些檔案

629
00:24:22,000 --> 00:24:23,000
填完所有的譯文之後

630
00:24:23,000 --> 00:24:25,000
再用Xcode來匯入

631
00:24:25,000 --> 00:24:26,000
然後直接幫我們

632
00:24:26,000 --> 00:24:28,000
建立本地化檔案

633
00:24:28,000 --> 00:24:29,000
然後你就會發現

634
00:24:29,000 --> 00:24:33,000
其實還是會有一堆漏網之魚

635
00:24:33,000 --> 00:24:34,000
這是因為Xcode

636
00:24:34,000 --> 00:24:36,000
只會來提取文字原件中的內容

637
00:24:36,000 --> 00:24:37,000
進行本地化

638
00:24:37,000 --> 00:24:40,000
對於那些不是文件的原件

639
00:24:40,000 --> 00:24:42,000
像是能同時顯示標題

640
00:24:42,000 --> 00:24:45,000
以及符號的標籤原件

641
00:24:45,000 --> 00:24:49,000
那它就只能最後再手動加入

642
00:24:49,000 --> 00:24:51,000
或者是你也可以選擇

643
00:24:51,000 --> 00:24:54,000
用文字原件去設定它的標題

644
00:24:54,000 --> 00:24:58,000
那我是比較偏好這種方式

645
00:24:58,000 --> 00:24:59,000
另外在本地化的時候

646
00:24:59,000 --> 00:25:01,000
經常遇到的另一個問題就是

647
00:25:01,000 --> 00:25:03,000
不知道原文是出現在哪個畫面

648
00:25:03,000 --> 00:25:05,000
然後想表示什麼

649
00:25:05,000 --> 00:25:06,000
那這種時候

650
00:25:06,000 --> 00:25:08,000
可以為文字原件加上註解

651
00:25:08,000 --> 00:25:09,000
這些註解會顯示在

652
00:25:09,000 --> 00:25:11,000
填寫譯文的XLOC檔

653
00:25:11,000 --> 00:25:16,000
以及最後的本地化檔案裡面

654
00:25:16,000 --> 00:25:17,000
到了這個階段

655
00:25:17,000 --> 00:25:20,000
其實App的所有功能都已經開發完成

656
00:25:20,000 --> 00:25:22,000
但是我沒有直接上傳到App Store

657
00:25:22,000 --> 00:25:23,000
因為App裡面可能還有一些

658
00:25:23,000 --> 00:25:26,000
自己沒發現的潛在錯誤

659
00:25:26,000 --> 00:25:27,000
所以這個時候可以先邀請大家

660
00:25:27,000 --> 00:25:29,000
一起來使用你的App

661
00:25:29,000 --> 00:25:31,000
然後做Beta測試

662
00:25:31,000 --> 00:25:32,000
那TestFlight就是

663
00:25:32,000 --> 00:25:36,000
Apple提供的測試工具

664
00:25:36,000 --> 00:25:37,000
那我們要先把App上傳到

665
00:25:37,000 --> 00:25:39,000
App Store Connect

666
00:25:39,000 --> 00:25:40,000
這是開發者用來發佈

667
00:25:40,000 --> 00:25:42,000
管理App資訊

668
00:25:42,000 --> 00:25:45,000
以及回覆使用者評論的網站

669
00:25:45,000 --> 00:25:47,000
那登入所有測試人的email

670
00:25:47,000 --> 00:25:48,000
以及撰寫

671
00:25:48,000 --> 00:25:50,000
公佈給大家的測試資訊之後

672
00:25:50,000 --> 00:25:52,000
你就可以把App交給Apple

673
00:25:52,000 --> 00:25:55,000
做Beta版的審核

674
00:25:55,000 --> 00:25:56,000
等到通過之後

675
00:25:56,000 --> 00:25:57,000
就會自動寄出邀請函

676
00:25:57,000 --> 00:26:01,000
給那些測試人員進行外部測試

677
00:26:01,000 --> 00:26:03,000
那我的經驗是

678
00:26:03,000 --> 00:26:04,000
審核的時間點幾乎都在

679
00:26:04,000 --> 00:26:07,000
台灣凌晨兩點到三點

680
00:26:07,000 --> 00:26:10,000
這個時間通過

681
00:26:10,000 --> 00:26:11,000
那當時我是透過Google表單

682
00:26:11,000 --> 00:26:13,000
來蒐集這些資料

683
00:26:13,000 --> 00:26:15,000
然後可以直接把資料匯入到

684
00:26:15,000 --> 00:26:18,000
App Store Connect登錄測試人員

685
00:26:18,000 --> 00:26:19,000
那至於使用者

686
00:26:19,000 --> 00:26:20,000
他們要先到App Store下載

687
00:26:20,000 --> 00:26:22,000
這個叫TestFlight的程式

688
00:26:22,000 --> 00:26:24,000
那等收到邀請函後

689
00:26:24,000 --> 00:26:26,000
點擊裡面的連結

690
00:26:26,000 --> 00:26:28,000
或者是手動輸入邀請碼

691
00:26:28,000 --> 00:26:29,000
就可以安裝我們的App

692
00:26:29,000 --> 00:26:31,000
做Beta測試

693
00:26:31,000 --> 00:26:33,000
那如果期間有任何的意見回饋

694
00:26:33,000 --> 00:26:34,000
或者是當地資料

695
00:26:34,000 --> 00:26:36,000
也可以透過TestFlight

696
00:26:36,000 --> 00:26:38,000
直接傳送給開發者

697
00:26:38,000 --> 00:26:42,000
那也能包含螢幕截圖

698
00:26:42,000 --> 00:26:44,000
那到正式發佈的時候

699
00:26:44,000 --> 00:26:45,000
還要再另外準備

700
00:26:45,000 --> 00:26:47,000
四種螢幕規格的截圖

701
00:26:47,000 --> 00:26:49,000
那你也可以根據你支援的語言

702
00:26:49,000 --> 00:26:52,000
然後來新增不同版本的螢幕截圖

703
00:26:52,000 --> 00:26:54,000
所以說因為它

704
00:26:54,000 --> 00:26:55,000
這裡的螢幕截圖

705
00:26:55,000 --> 00:26:57,000
最多可以放十張

706
00:26:57,000 --> 00:26:58,000
那有四種裝置

707
00:26:58,000 --> 00:27:00,000
然後你又支援了三種語言

708
00:27:00,000 --> 00:27:01,000
所以這樣總共就是

709
00:27:01,000 --> 00:27:05,000
一百二十張照片

710
00:27:05,000 --> 00:27:06,000
然後還要再另外設定

711
00:27:06,000 --> 00:27:07,000
App的標題、副標題

712
00:27:07,000 --> 00:27:08,000
然後描述

713
00:27:08,000 --> 00:27:11,000
以及關鍵字跟隱私權政策連結

714
00:27:11,000 --> 00:27:13,000
那這部分的資訊是

715
00:27:13,000 --> 00:27:15,000
你在送出App審核之前

716
00:27:15,000 --> 00:27:16,000
才可以做修改

717
00:27:16,000 --> 00:27:18,000
你一旦把它發佈到App Store上

718
00:27:18,000 --> 00:27:19,000
那就不能再修改

719
00:27:19,000 --> 00:27:23,000
除非你是在提交新的App更新

720
00:27:23,000 --> 00:27:26,000
那關鍵字的話其實就是

721
00:27:26,000 --> 00:27:27,000
使用者在App Store上

722
00:27:27,000 --> 00:27:28,000
搜尋你的App之後

723
00:27:28,000 --> 00:27:33,000
輸入的內容

724
00:27:33,000 --> 00:27:34,000
那App在正式推出前

725
00:27:34,000 --> 00:27:37,000
還要再次通過App的審查

726
00:27:37,000 --> 00:27:38,000
那這次的審查

727
00:27:38,000 --> 00:27:40,000
會比Beta測試還要嚴謹

728
00:27:40,000 --> 00:27:42,000
那網站上有一個欄位

729
00:27:42,000 --> 00:27:44,000
可以讓你新增備註和附件

730
00:27:44,000 --> 00:27:46,000
給審核團隊

731
00:27:46,000 --> 00:27:48,000
那我是送審了第二次才通過

732
00:27:48,000 --> 00:27:49,000
第一次會被推薦的原因

733
00:27:49,000 --> 00:27:51,000
是因為Apple希望我提供

734
00:27:51,000 --> 00:27:54,000
QR Code作業分享功能的範例條碼

735
00:27:54,000 --> 00:27:57,000
那幾乎都是在晚上9點到

736
00:27:57,000 --> 00:27:58,000
欸不對

737
00:27:58,000 --> 00:28:02,000
晚上7點到9點這段時間通過

738
00:28:02,000 --> 00:28:04,000
那等到你通過審查之後

739
00:28:04,000 --> 00:28:07,000
其實不一定要直接發佈到App Store

740
00:28:07,000 --> 00:28:09,000
可以試試看用預定的方式

741
00:28:09,000 --> 00:28:11,000
那預定的方式的話

742
00:28:11,000 --> 00:28:14,000
你的App會直接出現在App Store上

743
00:28:14,000 --> 00:28:16,000
但是使用者下來之後

744
00:28:16,000 --> 00:28:18,000
他不會直接安裝

745
00:28:18,000 --> 00:28:20,000
是等到預定結束之後

746
00:28:20,000 --> 00:28:22,000
然後他才會自動下載到

747
00:28:22,000 --> 00:28:23,000
使用者的裝置

748
00:28:23,000 --> 00:28:26,000
然後也會發送通知給使用者

749
00:28:26,000 --> 00:28:28,000
那這樣子就可以讓使用者

750
00:28:28,000 --> 00:28:31,000
知道說你這個是一個新的App

751
00:28:31,000 --> 00:28:32,000
然後等到他自動下載的時候

752
00:28:32,000 --> 00:28:33,000
可能就會因為覺得

753
00:28:33,000 --> 00:28:34,000
這是一個新的東西

754
00:28:34,000 --> 00:28:35,000
所以他會比較

755
00:28:35,000 --> 00:28:37,000
更願意去試試看

756
00:28:39,000 --> 00:28:42,000
那最後是給初學者的一些建議

757
00:28:42,000 --> 00:28:44,000
那我覺得如果是第一次

758
00:28:44,000 --> 00:28:45,000
嘗試App開發的話

759
00:28:45,000 --> 00:28:47,000
可以從生活中來尋找靈感

760
00:28:47,000 --> 00:28:48,000
那像我這個就是

761
00:28:48,000 --> 00:28:50,000
為學生打造提醒四項App

762
00:28:50,000 --> 00:28:52,000
因為我本身也還是一個學生嘛

763
00:28:52,000 --> 00:28:55,000
那如果是跟你自己的生活

764
00:28:55,000 --> 00:28:57,000
有關係的主題的話

765
00:28:57,000 --> 00:28:59,000
那你在這個實作的過程中

766
00:28:59,000 --> 00:29:00,000
你會了解

767
00:29:00,000 --> 00:29:02,000
使用者可能會需要什麼樣的需求

768
00:29:02,000 --> 00:29:03,000
因為你本身就是

769
00:29:03,000 --> 00:29:05,000
這個App的使用者之一

770
00:29:05,000 --> 00:29:07,000
那也建議大家可以支援

771
00:29:07,000 --> 00:29:11,000
至少英文和繁體中文跟簡體中文

772
00:29:11,000 --> 00:29:15,000
最後是要運用Git做版本控制

773
00:29:15,000 --> 00:29:17,000
那版本控制這項工具

774
00:29:17,000 --> 00:29:19,000
是讓你可以在

775
00:29:19,000 --> 00:29:21,000
每次你的專案做變更的時候

776
00:29:21,000 --> 00:29:22,000
可以做紀錄

777
00:29:22,000 --> 00:29:24,000
那將來如果你在

778
00:29:24,000 --> 00:29:26,000
實作新功能的時候

779
00:29:26,000 --> 00:29:27,000
不小心把它改壞了

780
00:29:27,000 --> 00:29:29,000
那你可以透過這個版本控制工具

781
00:29:29,000 --> 00:29:33,000
把它回退到原本的狀態

782
00:29:33,000 --> 00:29:34,000
就不會擔心說

783
00:29:34,000 --> 00:29:36,000
你可能今天改了什麼功能

784
00:29:36,000 --> 00:29:37,000
然後你改不回去

785
00:29:37,000 --> 00:29:41,000
那整個專案可能又要砍掉重來

786
00:29:41,000 --> 00:29:44,000
那我覺得對於你

787
00:29:44,000 --> 00:29:45,000
有一個app的目標之後

788
00:29:45,000 --> 00:29:48,000
可以把它列出他們的一些功能

789
00:29:48,000 --> 00:29:50,000
然後當作指目標

790
00:29:50,000 --> 00:29:52,000
那有了目標之後

791
00:29:52,000 --> 00:29:53,000
可以先蒐集資料

792
00:29:53,000 --> 00:29:54,000
然後再來做實作

793
00:29:54,000 --> 00:29:56,000
這樣會增加成功的機率

794
00:29:56,000 --> 00:29:58,000
那過程中可能會有遇到一些問題

795
00:29:58,000 --> 00:30:00,000
那就可以回來

796
00:30:00,000 --> 00:30:01,000
蒐集資料這個階段

797
00:30:01,000 --> 00:30:04,000
然後準備好來再繼續實作

798
00:30:04,000 --> 00:30:05,000
那你實現目標之後

799
00:30:05,000 --> 00:30:07,000
隨著你做的東西越來越多

800
00:30:07,000 --> 00:30:08,000
那你可能會發現

801
00:30:08,000 --> 00:30:09,000
可能有些東西

802
00:30:09,000 --> 00:30:10,000
以前在寫的時候

803
00:30:10,000 --> 00:30:11,000
可能寫得不是那麼好

804
00:30:11,000 --> 00:30:13,000
那你就可以再來做修改

805
00:30:13,000 --> 00:30:17,000
那這樣重構你的專案的話

806
00:30:17,000 --> 00:30:19,000
你可能會覺得是在浪費時間

807
00:30:19,000 --> 00:30:20,000
那但是將來

808
00:30:20,000 --> 00:30:22,000
如果你可能隔了兩個月、三個月

809
00:30:22,000 --> 00:30:23,000
然後再回來看

810
00:30:23,000 --> 00:30:24,000
你這些程式碼的時候

811
00:30:24,000 --> 00:30:27,000
如果你有這樣子定期做維護的話

812
00:30:27,000 --> 00:30:29,000
那就不會因為時間隔太遠

813
00:30:29,000 --> 00:30:31,000
而導致你看不懂自己的程式碼

814
00:30:31,000 --> 00:30:34,000
就不會又要再真的砍掉重來

815
00:30:34,000 --> 00:30:38,000
那最後是給大家一些學習資源

816
00:30:38,000 --> 00:30:39,000
那網站的話

817
00:30:39,000 --> 00:30:44,000
總是獲取這些資料的最快方式

818
00:30:44,000 --> 00:30:45,000
那第一個網站

819
00:30:45,000 --> 00:30:47,000
它是Apple的開發者網站

820
00:30:47,000 --> 00:30:49,000
那裡面有所有的文件

821
00:30:49,000 --> 00:30:53,000
以及他們API的一些說明

822
00:30:53,000 --> 00:30:54,000
再來第二個網站

823
00:30:54,000 --> 00:30:59,000
是一個在做iOS開發的中文教學的網站

824
00:30:59,000 --> 00:31:00,000
那第三個網站

825
00:31:00,000 --> 00:31:01,000
應該大家都很熟悉

826
00:31:01,000 --> 00:31:04,000
就是如果你有很多一些問題的話

827
00:31:04,000 --> 00:31:07,000
那會有使用者在上面做解答

828
00:31:07,000 --> 00:31:10,000
那不要複製貼上

829
00:31:10,000 --> 00:31:14,000
那最後一個特別要講的網站叫Medium

830
00:31:14,000 --> 00:31:16,000
那它其實是一個寫作平台

831
00:31:16,000 --> 00:31:18,000
那雖然它主要是以英文為主

832
00:31:18,000 --> 00:31:22,000
但是有非常多繁體中文的台灣開發者

833
00:31:22,000 --> 00:31:25,000
然後會撰寫他們的iOS開發教學文章

834
00:31:25,000 --> 00:31:28,000
然後放在這個平台上

835
00:31:28,000 --> 00:31:30,000
那最後是書籍

836
00:31:30,000 --> 00:31:32,000
這兩本是我有看過的書籍

837
00:31:32,000 --> 00:31:34,000
那應該都可以在圖書館找到

838
00:31:34,000 --> 00:31:37,000
那第一本是SwitchUI的教學

839
00:31:37,000 --> 00:31:41,000
那底下那一本是我第一本買的書

840
00:31:41,000 --> 00:31:44,000
那它主要是以UIKit為主

841
00:31:44,000 --> 00:31:47,000
那旁邊右邊這張照片是

842
00:31:47,000 --> 00:31:49,000
Apple的一個免費軟體

843
00:31:49,000 --> 00:31:52,000
叫做Switch Playgrounds的軟體

844
00:31:52,000 --> 00:31:54,000
那它裡面主要是

845
00:31:54,000 --> 00:31:58,000
蘋果來免費提供給使用者來做下載

846
00:31:58,000 --> 00:32:01,000
然後裡面有程式設計的一些教學

847
00:32:01,000 --> 00:32:04,000
而且更重要的是它有支援中文

848
00:32:04,000 --> 00:32:07,000
那它去年12月底有做更新

849
00:32:07,000 --> 00:32:09,000
就可以用SwitchUI來打造你的App

850
00:32:09,000 --> 00:32:12,000
所以你可以試著用iPad來

851
00:32:12,000 --> 00:32:15,000
開發你的iOS應用程式

852
00:32:15,000 --> 00:32:19,000
但是我不覺得它可以取代筆電

853
00:32:19,000 --> 00:32:21,000
因為有些功能

854
00:32:21,000 --> 00:32:22,000
像是剛剛提到的版本控制

855
00:32:22,000 --> 00:32:26,000
那可能就還是要用電腦來才能做

856
00:32:26,000 --> 00:32:28,000
那以上就是我今天的分享

857
00:32:28,000 --> 00:32:30,000
那希望有幫到大家

858
00:32:30,000 --> 00:32:33,000
來認識iOS App的開發過程

859
00:32:33,000 --> 00:32:35,000
然後也對自己手機的一些常見功能

860
00:32:35,000 --> 00:32:39,000
有背後的運作原理有一些認識

861
00:32:39,000 --> 00:32:41,000
那謝謝大家

862
00:32:45,000 --> 00:32:48,000
那最後這一頁是

863
00:32:48,000 --> 00:32:50,000
剛剛有提到一個叫MeeTeam的網站

864
00:32:50,000 --> 00:32:53,000
那我也希望將來可以把一些教學文章

865
00:32:53,000 --> 00:32:55,000
寫在這個網站上做發表

866
00:32:55,000 --> 00:32:58,000
那中間的是我App的下載連結

867
00:32:58,000 --> 00:33:00,000
那最後一個是Instagram

868
00:33:00,000 --> 00:33:03,000
那如果待會有Q&A有一些問題是

869
00:33:03,000 --> 00:33:05,000
我沒有辦法直接做解答的話

870
00:33:05,000 --> 00:33:08,000
那我就會用這些管道來做發佈

871
00:33:08,000 --> 00:33:11,000
那現在就換Q&A的部分

872
00:33:25,000 --> 00:33:27,000
那今天就講到這裡

873
00:33:27,000 --> 00:33:29,000
謝謝大家

874
00:33:29,000 --> 00:33:31,000
我們下次見

875
00:33:31,000 --> 00:33:33,000
拜拜

876
00:33:55,000 --> 00:34:22,000
可以提供簡報嗎?

877
00:34:22,000 --> 00:34:24,000
應該是可以

878
00:34:25,000 --> 00:34:28,000
這軟體總共花了多少時間寫?

879
00:34:28,000 --> 00:34:30,000
那這個軟體的話我從

880
00:34:30,000 --> 00:34:35,000
我開始學的時候其實是國二

881
00:34:35,000 --> 00:34:38,000
那這個軟體是到三個月前才發布的

882
00:34:38,000 --> 00:34:40,000
所以大概有四年

883
00:34:40,000 --> 00:34:43,000
那但是SwiftUI它是2019才出現的

884
00:34:43,000 --> 00:34:45,000
那我也是到那個時候才重新來

885
00:34:45,000 --> 00:34:48,000
改以SwiftUI來學習iOS程式的開發

886
00:34:48,000 --> 00:34:50,000
因為在那之前是UIKit

887
00:34:50,000 --> 00:34:56,000
所以大概三年就可以了啦

888
00:34:56,000 --> 00:34:58,000
然後這是在哪裡學的?

889
00:34:58,000 --> 00:35:00,000
主要是以

890
00:35:08,000 --> 00:35:09,000
這個在哪裡學的?

891
00:35:09,000 --> 00:35:12,000
那主要是透過網路的資源

892
00:35:12,000 --> 00:35:14,000
因為網路的資源比較豐富

893
00:35:14,000 --> 00:35:17,000
然後也是資訊學得最快的方法

894
00:35:17,000 --> 00:35:19,000
那學了多久?

895
00:35:19,000 --> 00:35:21,000
就四年這樣

896
00:35:21,000 --> 00:35:28,000
那沒有Mac有辦法在Windows上使用虛擬機撰寫程式嗎?

897
00:35:28,000 --> 00:35:31,000
我對Windows的虛擬機比較沒那麼熟

898
00:35:31,000 --> 00:35:33,000
那Mac的話

899
00:35:33,000 --> 00:35:37,000
我覺得你直接用Mac的話可能會比較

900
00:35:37,000 --> 00:35:40,000
因為就是你在學習的過程中會遇到很多問題

901
00:35:40,000 --> 00:35:41,000
而且你也不知道是

902
00:35:41,000 --> 00:35:43,000
就那個問題你不知道是哪來的

903
00:35:43,000 --> 00:35:46,000
那如果你本身就是使用Mac的話

904
00:35:46,000 --> 00:35:48,000
就有跟大家一樣的開發環境

905
00:35:48,000 --> 00:35:50,000
那也比較有多的了解你的狀況

906
00:35:50,000 --> 00:35:53,000
進而得到解答

907
00:35:53,000 --> 00:35:55,000
那目前在學習3D UI

908
00:35:55,000 --> 00:36:00,000
常常遇到資料流搞不清楚的問題

909
00:36:00,000 --> 00:36:05,000
有沒有比較好的方式去學習這方面的知識

910
00:36:05,000 --> 00:36:11,000
其實錯了很多次你就會知道怎麼寫

911
00:36:11,000 --> 00:36:15,000
那請問當初為何會使用3D UI來開發App

912
00:36:15,000 --> 00:36:25,000
那是因為那個時候家裡以及周邊的人

913
00:36:25,000 --> 00:36:27,000
用的都是iPhone比較多

914
00:36:27,000 --> 00:36:30,000
那我希望如果要學的話就是先鑽進一項平台就好

915
00:36:30,000 --> 00:36:38,000
然後這樣你才能確保你對這個平台有一些正確的認知

916
00:36:38,000 --> 00:36:42,000
作業備註太強導致

917
00:36:42,000 --> 00:36:49,000
為什麼不見了

918
00:36:49,000 --> 00:36:51,000
作業備註太強導致iPhone

919
00:36:51,000 --> 00:36:54,000
Jason太大塞不下去QR Code

920
00:36:54,000 --> 00:36:57,000
應該是不會那麼誇張啦

921
00:36:57,000 --> 00:37:01,000
我還沒有遇到過這種問題

922
00:37:01,000 --> 00:37:04,000
那Switch上做的App可以傳到Play商店嗎

923
00:37:04,000 --> 00:37:05,000
還是要另外做一個

924
00:37:05,000 --> 00:37:11,000
還是用其他東西做轉換

925
00:37:11,000 --> 00:37:13,000
Play商店的話應該就是要看

926
00:37:13,000 --> 00:37:17,000
Google它提供什麼樣的語言

927
00:37:17,000 --> 00:37:20,000
來做Android App的開發

928
00:37:20,000 --> 00:37:21,000
那因為我沒有學Android

929
00:37:21,000 --> 00:37:34,000
所以這個部分我不是很清楚

930
00:37:34,000 --> 00:37:38,000
為什麼題目的順序

931
00:37:38,000 --> 00:37:42,000
然後這個App有沒有可能開源到GitHub上

932
00:37:42,000 --> 00:37:45,000
那我比較傾向於把這個App的實作過程

933
00:37:45,000 --> 00:37:48,000
寫成詳細的教學文章放到Medium上

934
00:37:48,000 --> 00:37:50,000
那因為直接放到GitHub上的話

935
00:37:50,000 --> 00:37:53,000
其實很難看出這個

936
00:37:53,000 --> 00:37:55,000
就感覺就是一坨東西混在一起

937
00:37:55,000 --> 00:37:59,000
然後其實不太容易學到東西我覺得

938
00:37:59,000 --> 00:38:01,000
那如果要放到GitHub上的話

939
00:38:01,000 --> 00:38:03,000
其實裡面有一些類似

940
00:38:03,000 --> 00:38:05,000
你的憑證之類的東西

941
00:38:05,000 --> 00:38:07,000
那些東西可能要想辦法先移除掉

942
00:38:14,000 --> 00:38:19,000
如何在開發App和科業間取得平衡

943
00:38:20,000 --> 00:38:22,000
沒有平衡啊

944
00:38:28,000 --> 00:38:29,000
不好說

945
00:38:29,000 --> 00:38:30,000
不予置評

946
00:38:32,000 --> 00:38:34,000
如果家境清寒窮困潦倒

947
00:38:34,000 --> 00:38:35,000
真的買不起Mac

948
00:38:35,000 --> 00:38:36,000
還有辦法從事

949
00:38:39,000 --> 00:38:40,000
學習的話

950
00:38:40,000 --> 00:38:42,000
就可以用剛剛提到的

951
00:38:42,000 --> 00:38:45,000
這個軟體來做學習

952
00:38:45,000 --> 00:38:46,000
就是如果你

953
00:38:46,000 --> 00:38:48,000
如果我沒有辦法買Mac

954
00:38:48,000 --> 00:38:49,000
或者是你也不確定

955
00:38:49,000 --> 00:38:50,000
你有辦法持續下去的話

956
00:38:50,000 --> 00:38:52,000
那其實用iPad

957
00:38:52,000 --> 00:38:53,000
其實用iPad也是一個

958
00:38:53,000 --> 00:38:56,000
體驗iOS App開發的方式

959
00:38:56,000 --> 00:38:59,000
因為裡面也是有中文的教學

960
00:38:59,000 --> 00:39:02,000
那這樣其實會更容易上手

961
00:39:02,000 --> 00:39:03,000
會因為寫成早點嗎

962
00:39:03,000 --> 00:39:05,000
會啊 不然咧

963
00:39:07,000 --> 00:39:09,000
如果家人都不懂我在做什麼

964
00:39:09,000 --> 00:39:10,000
然後多花時間專心

965
00:39:10,000 --> 00:39:11,000
可以該如何溝通

966
00:39:12,000 --> 00:39:13,000
你就把他們找來試試看

967
00:39:13,000 --> 00:39:14,000
然後演講給他們看

968
00:39:14,000 --> 00:39:15,000
讓他們知道你們在做什麼

969
00:39:15,000 --> 00:39:16,000
就知道了

970
00:39:17,000 --> 00:39:19,000
PPT跟Keynote哪個比較好用

971
00:39:21,000 --> 00:39:22,000
我覺得Keynote

972
00:39:22,000 --> 00:39:24,000
它預設的版面配置會比較好看

973
00:39:25,000 --> 00:39:28,000
那Apple Developer Program

974
00:39:28,000 --> 00:39:29,000
應該還是要18歲

975
00:39:29,000 --> 00:39:31,000
對啊 所以你可以找你的父母

976
00:39:31,000 --> 00:39:35,000
然後請他們去申請開發者的帳號

977
00:39:35,000 --> 00:39:37,000
然後再用他的帳號底下去

978
00:39:37,000 --> 00:39:38,000
新增那個管理員

979
00:39:38,000 --> 00:39:39,000
然後設置你自己的Apple ID

980
00:39:39,000 --> 00:39:42,000
那這樣你還是可以去做

981
00:39:42,000 --> 00:39:45,000
App Store Connect上面的一些存取

982
00:39:45,000 --> 00:39:49,000
那只是說App開發上傳到App Store上的

983
00:39:49,000 --> 00:39:51,000
免疫還是會以那個

984
00:39:51,000 --> 00:39:53,000
開發者帳號的持有者為主

985
00:39:53,000 --> 00:39:56,000
那有辦法在Windows環境開發嗎

986
00:39:56,000 --> 00:39:57,000
剛好像出現過

987
00:39:57,000 --> 00:39:59,000
社團課有你負責教學

988
00:39:59,000 --> 00:40:02,000
還是有聘請其他老師會教些什麼

989
00:40:03,000 --> 00:40:06,000
社團課本身就會有指導老師

990
00:40:06,000 --> 00:40:12,000
那就是學生可以自己選擇要不要做教學

991
00:40:12,000 --> 00:40:14,000
那我是選擇自己來教Python

992
00:40:14,000 --> 00:40:17,000
因為學校本身就有程式設計的課程

993
00:40:17,000 --> 00:40:20,000
那因為社團本身就是以學生為主

994
00:40:20,000 --> 00:40:23,000
所以我會希望自己來嘗試來做這些教學

995
00:40:23,000 --> 00:40:27,000
那剩下的問題我會用剛剛提到的那三個

996
00:40:27,000 --> 00:40:31,000
用Media和Instagram這兩個管道來做回答

997
00:40:31,000 --> 00:40:33,000
謝謝大家

