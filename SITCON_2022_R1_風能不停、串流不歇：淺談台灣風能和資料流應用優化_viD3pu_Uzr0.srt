1
00:00:00,000 --> 00:00:04,500
OK 好，那大家好

2
00:00:04,500 --> 00:00:08,500
應該說大家午安，我是佳平

3
00:00:08,500 --> 00:00:12,000
我們今天其實是很開心來到這裡

4
00:00:12,000 --> 00:00:14,000
試試看跟大家碰面這樣子

5
00:00:14,000 --> 00:00:17,500
那我們今天要演講的東西呢

6
00:00:17,500 --> 00:00:18,500
其實有兩個 keyword

7
00:00:18,500 --> 00:00:21,000
一個是 Kafka, 一個是風能這樣

8
00:00:21,000 --> 00:00:23,500
那 Kafka 如果大家有聽過的話

9
00:00:23,500 --> 00:00:26,000
Kafka 其實是一個國際上相當知名的

10
00:00:26,000 --> 00:00:28,500
一個熱門的大數據系統這樣子

11
00:00:28,500 --> 00:00:32,500
那它事實上在世界各地的大公司都有被應用

12
00:00:32,500 --> 00:00:34,500
然後在台灣也被應用在

13
00:00:34,500 --> 00:00:38,000
像金融、半導體跟製造領域這樣子

14
00:00:38,000 --> 00:00:40,000
那身為裡面的核心開發者

15
00:00:40,000 --> 00:00:43,000
也是 Alpha 7 成員的 member

16
00:00:43,000 --> 00:00:44,000
那事實上我們也很開心說

17
00:00:44,000 --> 00:00:45,000
今年我們在台灣

18
00:00:45,000 --> 00:00:47,500
也有陸續把一些使用領域擴展到

19
00:00:47,500 --> 00:00:51,500
像能源以及像我們跟一些大專院校

20
00:00:51,500 --> 00:00:54,500
包含成大資工、成大製造所

21
00:00:54,500 --> 00:00:57,500
或是像亞洲大學、東海等等

22
00:00:57,500 --> 00:00:58,500
都有一起在做

23
00:00:58,500 --> 00:01:01,000
CAVCAR 技術相關的研究這樣子

24
00:01:01,000 --> 00:01:03,000
因此我們今天的兩個分享

25
00:01:03,000 --> 00:01:05,000
就是從我們今年的一些合作單位

26
00:01:05,000 --> 00:01:08,000
包含從離岸風場的離環工程師

27
00:01:08,000 --> 00:01:11,500
以及成大資工所的王毅誠同學

28
00:01:11,500 --> 00:01:12,500
來跟大家分享

29
00:01:12,500 --> 00:01:15,500
就是我們關於風能這個新的場域

30
00:01:15,500 --> 00:01:18,000
以及我們在 CAVCAR 這個領域裡面

31
00:01:18,000 --> 00:01:19,500
做哪些優化這樣子

32
00:01:19,500 --> 00:01:21,000
那因為時間的關係

33
00:01:21,000 --> 00:01:22,000
我們事不宜遲

34
00:01:22,000 --> 00:01:23,500
我們先用掌聲來歡迎那個

35
00:01:23,500 --> 00:01:25,500
離環工程師來為我們講解風能

36
00:01:25,500 --> 00:01:26,500
謝謝

37
00:01:28,500 --> 00:01:30,500
大家好 我是李怡環

38
00:01:30,500 --> 00:01:33,500
今天演講的題目是風能不停

39
00:01:33,500 --> 00:01:36,500
淺談台灣風能

40
00:01:36,500 --> 00:01:39,500
身為一名風程工程師

41
00:01:39,500 --> 00:01:41,500
來將接觸到的風能資料

42
00:01:41,500 --> 00:01:44,500
分享給大家

43
00:01:44,500 --> 00:01:45,500
風力發電

44
00:01:45,500 --> 00:01:49,500
顧名思義就是利用風來發電

45
00:01:49,500 --> 00:01:52,500
風力發電機轉動發動

46
00:01:52,500 --> 00:01:55,500
透過變電系統再傳送到

47
00:01:55,500 --> 00:01:57,500
我們的使用電箱

48
00:01:57,500 --> 00:02:02,500
我們就可以使用風力了

49
00:02:02,500 --> 00:02:06,500
大家應該對風能都充滿著很多疑惑

50
00:02:06,500 --> 00:02:08,500
例如投影片上的所列

51
00:02:08,500 --> 00:02:11,500
有發電穩定度 定價成本

52
00:02:11,500 --> 00:02:13,500
作業危險性

53
00:02:13,500 --> 00:02:16,500
還有到底與大眾有什麼關聯

54
00:02:16,500 --> 00:02:19,500
還有會不會影響到動植物環境

55
00:02:19,500 --> 00:02:23,500
其實風力發電作為再生能源

56
00:02:23,500 --> 00:02:25,500
它的最主要的目的

57
00:02:25,500 --> 00:02:28,500
並不是為了取代非再生能源

58
00:02:28,500 --> 00:02:33,500
而是作為整個能源結構的輔助

59
00:02:33,500 --> 00:02:35,500
定價成本來講

60
00:02:35,500 --> 00:02:41,500
風力平均一度電大概在 2.92 台幣

61
00:02:41,500 --> 00:02:46,500
風力平均一度電大概在 2.92 台幣

62
00:02:46,500 --> 00:02:50,500
比較其他種發電方式屬於中間值而已

63
00:02:50,500 --> 00:02:53,500
再加上社會成本的效益

64
00:02:53,500 --> 00:02:56,500
比如污染量或者是安全性

65
00:02:56,500 --> 00:03:00,500
風能絕對是更有競爭力的

66
00:03:00,500 --> 00:03:04,500
像風機工程師他們爬上風塔

67
00:03:04,500 --> 00:03:06,500
雖然看似很危險

68
00:03:06,500 --> 00:03:08,500
但其實沒有那麼誇張

69
00:03:08,500 --> 00:03:13,500
每一位風電工程師都必須通過 GWO

70
00:03:13,500 --> 00:03:17,500
也就是國際風能組織的受訓課程

71
00:03:17,500 --> 00:03:21,500
出海的時候也要佩戴很多安全設備

72
00:03:21,500 --> 00:03:24,500
才能上去工作

73
00:03:24,500 --> 00:03:29,500
連船隻的設備也都是要符合安全性的

74
00:03:29,500 --> 00:03:31,500
對於大眾的關聯性

75
00:03:31,500 --> 00:03:34,500
最貼切的來講就是說

76
00:03:34,500 --> 00:03:36,500
當台灣的人口十分密集

77
00:03:36,500 --> 00:03:38,500
供電很吃緊

78
00:03:38,500 --> 00:03:42,500
所以像火力發電這種長時間的機組

79
00:03:42,500 --> 00:03:44,500
都必須持續的發電

80
00:03:44,500 --> 00:03:48,500
一旦他們受到故障或是任何因素影響

81
00:03:48,500 --> 00:03:50,500
跳電或停電

82
00:03:50,500 --> 00:03:52,500
恢復的時間都會很長

83
00:03:52,500 --> 00:03:55,500
所以我們需要避免單一種能源

84
00:03:55,500 --> 00:03:57,500
機組的負荷過大

85
00:03:57,500 --> 00:04:01,500
才需要有這些再生能源來做輪替

86
00:04:01,500 --> 00:04:04,500
然後對於動植物來講

87
00:04:04,500 --> 00:04:10,500
風場在開發前都會繳交環境評估報告

88
00:04:10,500 --> 00:04:13,500
這些評估報告的種類很多

89
00:04:13,500 --> 00:04:16,500
就是為了保障風場蓋下去之後

90
00:04:16,500 --> 00:04:19,500
不會影響到自然環境的保證

91
00:04:30,500 --> 00:04:32,500
左邊命運的部分就是

92
00:04:32,500 --> 00:04:36,500
台灣離岸風電會遇到的困難

93
00:04:36,500 --> 00:04:37,500
像漁業環境

94
00:04:37,500 --> 00:04:41,500
漁業海洋環境就是前面講過的環評資料

95
00:04:41,500 --> 00:04:43,500
環評資料光是環境的部分就包含了

96
00:04:43,500 --> 00:04:48,500
空氣品質、水文水質、土壤地質、噪音震動

97
00:04:48,500 --> 00:04:50,500
還有很多有的沒的

98
00:04:50,500 --> 00:04:52,500
而動物的部分則分成

99
00:04:52,500 --> 00:04:54,500
陸域生態跟海域生態

100
00:04:54,500 --> 00:04:56,500
還有鳥類生態

101
00:04:56,500 --> 00:04:57,500
這全部的項目之中

102
00:04:57,500 --> 00:04:59,500
只要有其中一項不符合資格

103
00:04:59,500 --> 00:05:02,500
那風場就沒有辦法開發

104
00:05:02,500 --> 00:05:06,500
而颱風絕對是台灣最容易遇到的問題

105
00:05:06,500 --> 00:05:09,500
風力發電機抗風的程度

106
00:05:09,500 --> 00:05:12,500
最大每秒是 70 公尺

107
00:05:12,500 --> 00:05:16,500
然後平均風速則是在 53 公尺左右

108
00:05:16,500 --> 00:05:18,500
53 公尺每秒的風速

109
00:05:18,500 --> 00:05:21,500
大概就是被定為強烈急速的颱風

110
00:05:21,500 --> 00:05:26,500
而葉片本身更是可以抵擋每秒 80 公尺的風速

111
00:05:26,500 --> 00:05:31,500
其實在歷史上風速有高於每秒 50 公尺的強台

112
00:05:31,500 --> 00:05:35,500
經過台灣的時候都會被中央山脈給削弱許多

113
00:05:35,500 --> 00:05:39,500
到達風場位於的台灣海峽時

114
00:05:39,500 --> 00:05:42,500
已經沒有那麼高的風速了

115
00:05:42,500 --> 00:05:49,500
右邊的機會就是風能產業能夠帶來的效益

116
00:05:49,500 --> 00:05:51,500
像溫室氣體

117
00:05:51,500 --> 00:05:58,500
預估 2025 年後風力發電可達 250 億度

118
00:05:58,500 --> 00:06:04,500
這個量可以降低二氧化碳排放量約 1400 萬噸

119
00:06:04,500 --> 00:06:07,500
舉例大安森林公園來說

120
00:06:07,500 --> 00:06:11,500
大安森林公園一年可以吸收 389 噸的二氧化碳

121
00:06:11,500 --> 00:06:16,500
這就相當於是三萬六千座了

122
00:06:16,500 --> 00:06:19,500
最重要的降低依賴進口能源

123
00:06:19,500 --> 00:06:22,500
台灣有 98% 的能源屬於進口能源

124
00:06:22,500 --> 00:06:26,500
所以電價很容易受到國際波動影響

125
00:06:26,500 --> 00:06:31,500
如果能增加本土的能源比例便能穩定電價

126
00:06:31,500 --> 00:06:32,500
而且現在更重要的是

127
00:06:32,500 --> 00:06:36,500
還有一個稱為 RE100 的全球性議題

128
00:06:36,500 --> 00:06:40,500
目的是要實現全球 100% 的綠電革命

129
00:06:40,500 --> 00:06:44,500
加入此倡議的企業必須公開承諾

130
00:06:44,500 --> 00:06:48,500
在 2050 年前達成 100% 使用綠電的時程

131
00:06:48,500 --> 00:06:53,500
有 Apple Google Facebook HP Walmart

132
00:06:53,500 --> 00:06:56,500
可口可樂這種公司都已經參與其中

133
00:06:56,500 --> 00:06:59,500
可能會說如果不參加的話會怎麼樣呢

134
00:06:59,500 --> 00:07:02,500
舉例來說像 Apple

135
00:07:02,500 --> 00:07:06,500
它已經開始要求供應商採購再生能源

136
00:07:06,500 --> 00:07:09,500
如果供應商不使用再生能源

137
00:07:09,500 --> 00:07:15,500
就拿不到訂單

138
00:07:15,500 --> 00:07:17,500
這邊是台灣風場的位置

139
00:07:17,500 --> 00:07:19,500
其實北中南都有

140
00:07:19,500 --> 00:07:27,500
而大部分的風場都位在彰化縣的外海

141
00:07:27,500 --> 00:07:29,500
因為每年秋冬季

142
00:07:29,500 --> 00:07:32,500
台灣開始吹起東北季風

143
00:07:32,500 --> 00:07:35,500
平均風速高達 12 公尺每秒

144
00:07:35,500 --> 00:07:37,500
這是極為罕見的

145
00:07:37,500 --> 00:07:42,500
一般的風場平均風速只有在 7 公尺左右

146
00:07:42,500 --> 00:07:46,500
然後這些區塊就是每一個風場開發的名稱

147
00:07:46,500 --> 00:07:57,500
下面的數字是此風場大概可以承受的裝置容量

148
00:07:57,500 --> 00:08:02,500
這邊要先解釋一下裝置容量跟發電量的差別

149
00:08:02,500 --> 00:08:06,500
裝置容量就是在這個發電設備出廠時

150
00:08:06,500 --> 00:08:08,500
所設計滿載

151
00:08:08,500 --> 00:08:11,500
也就是它 100% 全力發電時的值

152
00:08:11,500 --> 00:08:13,500
單位是瓦

153
00:08:13,500 --> 00:08:18,500
然後發電量則是由發電廠所廠出的電量

154
00:08:18,500 --> 00:08:20,500
單位是千瓦小時

155
00:08:20,500 --> 00:08:23,500
這兩者之間還有一個很重要的因素

156
00:08:23,500 --> 00:08:25,500
它叫做容量因素

157
00:08:25,500 --> 00:08:27,500
也可以稱它為容量因子

158
00:08:27,500 --> 00:08:30,500
它代表的是發電設備的穩定性

159
00:08:30,500 --> 00:08:35,500
可以說成是發電時間佔整年度時間的比例

160
00:08:35,500 --> 00:08:37,500
越高就相對越穩定

161
00:08:37,500 --> 00:08:42,500
舉例來說風力在沒有東北季風的月份來講

162
00:08:42,500 --> 00:08:44,500
幾乎是沒有發電量的

163
00:08:44,500 --> 00:08:49,500
太陽能在冬日日照時數短時也是一樣

164
00:08:49,500 --> 00:08:52,500
反之燃燒化石燃料的火力

165
00:08:52,500 --> 00:08:54,500
燃氣跟燃煤或是核能

166
00:08:54,500 --> 00:08:58,500
就屬於十分平穩的發電設備

167
00:08:58,500 --> 00:09:02,500
然後 2021 年底台灣的再生能源裝置容量

168
00:09:02,500 --> 00:09:05,500
已經超越東南亞大部分的國家

169
00:09:05,500 --> 00:09:13,500
像日本韓國都已經比台灣還低了

170
00:09:13,500 --> 00:09:17,500
這是一張台灣當日的用電圖

171
00:09:17,500 --> 00:09:22,500
X 軸是時間 Y 軸是用電量

172
00:09:22,500 --> 00:09:27,500
通常我們會把台灣的能源分成三種

173
00:09:27,500 --> 00:09:31,500
一種是基載 一種是中載 一種是尖載

174
00:09:31,500 --> 00:09:36,500
基載就是屬於這張圖的底下區塊的部分

175
00:09:36,500 --> 00:09:41,500
有核能 燃氣 燃煤 氣電共生

176
00:09:41,500 --> 00:09:45,500
通常會屬於一個國家最仰賴的供電方式

177
00:09:45,500 --> 00:09:48,500
這個特性就是十分穩定

178
00:09:48,500 --> 00:09:51,500
而且發電時程很長

179
00:09:51,500 --> 00:09:55,500
中載 目前台灣的中載屬於燃氣

180
00:09:55,500 --> 00:09:57,500
燃氣是綠色的部分

181
00:09:57,500 --> 00:10:01,500
它的特性是開機的時間很迅速

182
00:10:01,500 --> 00:10:06,500
能夠做用電需求去做調配

183
00:10:06,500 --> 00:10:10,500
就像如果突然基載發生故障

184
00:10:10,500 --> 00:10:13,500
需要緊急調電 就會從中載來調電

185
00:10:13,500 --> 00:10:17,500
然後最上面這個波動很大的

186
00:10:17,500 --> 00:10:19,500
就是屬於尖載

187
00:10:19,500 --> 00:10:21,500
尖載的特性就是

188
00:10:21,500 --> 00:10:25,500
它非常不穩定 會隨著時間起伏

189
00:10:25,500 --> 00:10:29,500
需要由電力調度中心來調度

190
00:10:29,500 --> 00:10:32,500
像再生能源就是屬於這一類的

191
00:10:32,500 --> 00:10:33,500
然後前面有說過

192
00:10:33,500 --> 00:10:36,500
當發電機組長時間發電的時候

193
00:10:36,500 --> 00:10:38,500
可能會因為作業溫度

194
00:10:38,500 --> 00:10:40,500
或是機組老化等

195
00:10:40,500 --> 00:10:42,500
而發生異常故障

196
00:10:42,500 --> 00:10:44,500
所以這就是為什麼台灣需要自己

197
00:10:44,500 --> 00:10:47,500
有自己的能源能夠做調度調配

198
00:10:47,500 --> 00:10:49,500
才不會火力發一發

199
00:10:49,500 --> 00:10:51,500
突然過熱故障

200
00:10:51,500 --> 00:10:54,500
台灣整個縣市就開始停電或跳電

201
00:10:59,500 --> 00:11:02,500
這是海洋氣象觀測塔

202
00:11:02,500 --> 00:11:03,500
是台灣第一座

203
00:11:03,500 --> 00:11:05,500
第一座在海洋

204
00:11:05,500 --> 00:11:08,500
在外海上的氣象觀測塔

205
00:11:08,500 --> 00:11:11,500
因為台灣身為海島國家

206
00:11:11,500 --> 00:11:14,500
而中央氣象局有的氣象觀測站

207
00:11:14,500 --> 00:11:16,500
都是在陸域上

208
00:11:16,500 --> 00:11:19,500
若是能搭配海洋氣象觀測塔

209
00:11:19,500 --> 00:11:21,500
來做結合

210
00:11:21,500 --> 00:11:26,500
鐵定能讓預報資料更加的精準

211
00:11:26,500 --> 00:11:29,500
而且這個在當時是非常

212
00:11:29,500 --> 00:11:32,500
具有意義性的建築方式

213
00:11:32,500 --> 00:11:35,500
是第一個在海床上

214
00:11:35,500 --> 00:11:40,500
海床深度高過 20 公尺的第一個建築

215
00:11:42,500 --> 00:11:44,500
然後這些就是他能測到的

216
00:11:44,500 --> 00:11:47,500
所有跟風有關的資料

217
00:11:50,500 --> 00:11:54,500
這邊是這些資料可以運用的地方

218
00:11:54,500 --> 00:11:58,500
風能資料具有即時性以及多樣性

219
00:11:58,500 --> 00:12:02,500
並且資料量非常的龐大

220
00:12:02,500 --> 00:12:04,500
例如舉例來說最簡單的

221
00:12:04,500 --> 00:12:09,500
就是我們平常在看的天氣預報

222
00:12:09,500 --> 00:12:12,500
還有個別化資訊代表的是

223
00:12:12,500 --> 00:12:14,500
除了我們一般在看的

224
00:12:14,500 --> 00:12:16,500
最簡單的預報之外

225
00:12:16,500 --> 00:12:20,500
許多企業公司非常關注氣象的變化

226
00:12:20,500 --> 00:12:23,500
尤其是航運或是保險業

227
00:12:23,500 --> 00:12:26,500
他們會根據他們所訂定的氣象標準

228
00:12:26,500 --> 00:12:28,500
來作為出航的條件

229
00:12:28,500 --> 00:12:31,500
或是當作保險的理賠基準

230
00:12:31,500 --> 00:12:35,500
這個天然災害救助佐證也蠻特別的

231
00:12:35,500 --> 00:12:37,500
就是當農民或是漁民

232
00:12:37,500 --> 00:12:40,500
因天然災害造成損失的時候

233
00:12:40,500 --> 00:12:41,500
他們可以去申請補助

234
00:12:41,500 --> 00:12:44,500
但是他們大部分的人都不知道

235
00:12:44,500 --> 00:12:46,500
這些補助的政策的判定標準

236
00:12:46,500 --> 00:12:49,500
或是沒有直接的證據

237
00:12:49,500 --> 00:12:52,500
可以證明說他們因此而受損

238
00:12:52,500 --> 00:12:53,500
所以這些資料收集

239
00:12:53,500 --> 00:12:55,500
給他們正確的利用的話

240
00:12:55,500 --> 00:12:59,500
就能避免再次的損害

241
00:12:59,500 --> 00:13:03,500
右邊這邊就是剛剛那個福海氣象塔

242
00:13:03,500 --> 00:13:06,500
所觀測出來的風能資料

243
00:13:06,500 --> 00:13:10,500
除了上面列表的這些應用之外

244
00:13:10,500 --> 00:13:17,500
還有很多種可以應用的方式

245
00:13:17,500 --> 00:13:21,500
那以上就是這段的演講內容

246
00:13:21,500 --> 00:13:22,500
感謝大家

247
00:13:22,500 --> 00:13:25,500
我們將交給下一個演講者

248
00:13:41,500 --> 00:13:43,500
我的 APP 在哪

249
00:14:03,500 --> 00:14:05,500
承接上一位演講者的主題

250
00:14:05,500 --> 00:14:09,500
他有提到有關分能資料的相關運用

251
00:14:09,500 --> 00:14:11,500
事實上分能資料的話

252
00:14:11,500 --> 00:14:14,500
他有提到有一個重要的點

253
00:14:14,500 --> 00:14:15,500
就是在於即時性

254
00:14:15,500 --> 00:14:17,500
然後還有大吞吐量

255
00:14:17,500 --> 00:14:19,500
結合這兩點

256
00:14:19,500 --> 00:14:22,500
我今天將為大家介紹 Kafka

257
00:14:22,500 --> 00:14:25,500
Kafka 著重於資料的即時性

258
00:14:25,500 --> 00:14:27,500
及高吞吐量

259
00:14:27,500 --> 00:14:30,500
然後我會從使用者的角度

260
00:14:30,500 --> 00:14:33,500
來和大家分享何謂 Kafka 的最後一路

261
00:14:33,500 --> 00:14:35,500
及我們團隊為此做了些什麼

262
00:14:36,500 --> 00:14:40,500
首先和大家介紹我和我們團隊

263
00:14:40,500 --> 00:14:41,500
我叫王應成

264
00:14:41,500 --> 00:14:43,500
是來自成功大學資訊工程所

265
00:14:43,500 --> 00:14:45,500
分散式系統實驗室

266
00:14:45,500 --> 00:14:46,500
目前主要在研究

267
00:14:46,500 --> 00:14:49,500
Kafka 負載平衡的相關議題

268
00:14:49,500 --> 00:14:51,500
今天藉這個機會來和大家

269
00:14:51,500 --> 00:14:52,500
介紹一下什麼是 Kafka

270
00:14:52,500 --> 00:14:54,500
及我們在做些什麼

271
00:14:55,500 --> 00:14:57,500
首先我先為一些

272
00:14:57,500 --> 00:14:58,500
不了解 Kafka 的同學

273
00:14:58,500 --> 00:15:00,500
簡單介紹一下什麼是 Kafka

274
00:15:01,500 --> 00:15:04,500
要想了解什麼是 Kafka

275
00:15:04,500 --> 00:15:05,500
等一下

276
00:15:06,500 --> 00:15:07,500
要想了解什麼是 Kafka

277
00:15:07,500 --> 00:15:09,500
首先就需要了解

278
00:15:09,500 --> 00:15:10,500
什麼是消息系統

279
00:15:10,500 --> 00:15:11,500
拿網購來舉例

280
00:15:11,500 --> 00:15:14,500
今天快遞員給你派送快遞到家

281
00:15:14,500 --> 00:15:16,500
而你正巧在上班無法接收

282
00:15:16,500 --> 00:15:18,500
那麼你就會拿不到這件快遞

283
00:15:19,500 --> 00:15:22,500
而如果快遞員將快遞放入了超商

284
00:15:22,500 --> 00:15:23,500
你只需要等到下班的時候

285
00:15:23,500 --> 00:15:24,500
去超商取貨

286
00:15:24,500 --> 00:15:25,500
就能夠拿到快遞

287
00:15:25,500 --> 00:15:28,500
消息系統就是扮演了超商這一角色

288
00:15:28,500 --> 00:15:31,500
將快遞員與取快遞的人進行結偶

289
00:15:31,500 --> 00:15:33,500
讓發送消息與獲取消息這兩件事

290
00:15:33,500 --> 00:15:34,500
不用同時進行

291
00:15:34,500 --> 00:15:36,500
而是在需要的時候再去拉取消息

292
00:15:38,500 --> 00:15:41,500
一筆 Kafka 的消息就好比一個包裹

293
00:15:41,500 --> 00:15:43,500
而為了創建一筆 Kafka 的消息

294
00:15:43,500 --> 00:15:45,500
你有兩個資訊是一定要告知它的

295
00:15:46,500 --> 00:15:49,500
一個就是你要傳送的資料的本體

296
00:15:49,500 --> 00:15:50,500
也就是包裹的內容

297
00:15:50,500 --> 00:15:53,500
另一個是你要傳送的目標 topic 的名字

298
00:15:53,500 --> 00:15:55,500
也就是包裹需要被發往的地址

299
00:15:57,500 --> 00:15:59,500
這是一個簡單的 Kafka module

300
00:15:59,500 --> 00:16:01,500
在 Kafka cluster 中

301
00:16:01,500 --> 00:16:03,500
有 block, topic, partition 三個名詞

302
00:16:03,500 --> 00:16:06,500
block 代表運行 Kafka 的機器

303
00:16:06,500 --> 00:16:08,500
topic 相當於一個抽象意義上的目錄

304
00:16:09,500 --> 00:16:11,500
一般來說它會橫跨數個 block

305
00:16:11,500 --> 00:16:13,500
裡面存放著其對應的 partition

306
00:16:13,500 --> 00:16:16,500
partition 是物理意義上存放資料的介質

307
00:16:16,500 --> 00:16:18,500
其分佈在執行中的各個 block 上

308
00:16:19,500 --> 00:16:21,500
由快遞員 produce 送來的消息

309
00:16:21,500 --> 00:16:24,500
會被放在對應 topic 中的 partition 裡

310
00:16:24,500 --> 00:16:27,500
等待 consumer 在需要的時候再去拉取它

311
00:16:29,500 --> 00:16:30,500
Kafka 作為一個消息系統

312
00:16:30,500 --> 00:16:33,500
它其實有許多優點

313
00:16:34,500 --> 00:16:36,500
注入能將資料存儲在節點的硬碟中

314
00:16:36,500 --> 00:16:38,500
然後做到持久化數據

315
00:16:38,500 --> 00:16:40,500
通過副本的機制來保證

316
00:16:40,500 --> 00:16:42,500
節點在突然下線的情況下

317
00:16:42,500 --> 00:16:45,500
也可以保證資料不會丟失的高可靠性

318
00:16:46,500 --> 00:16:49,500
允許在運行過程中增加新節點

319
00:16:49,500 --> 00:16:50,500
帶來的極佳的可擴展性

320
00:16:51,500 --> 00:16:53,500
當然作為一個傳輸資料的媒介

321
00:16:53,500 --> 00:16:56,500
其能夠推引而出的一個重要的點在於

322
00:16:56,500 --> 00:16:58,500
能夠將極低的傳輸延遲

323
00:16:58,500 --> 00:16:59,500
與極高的吞吐量

324
00:16:59,500 --> 00:17:02,500
這兩件看似互為桎梏的事融合到一起

325
00:17:03,500 --> 00:17:05,500
高效能也就成為了

326
00:17:05,500 --> 00:17:07,500
Kafka 的最大的賣點之一

327
00:17:08,500 --> 00:17:10,500
不過作為一個軟體

328
00:17:10,500 --> 00:17:12,500
是很難達到完美的

329
00:17:12,500 --> 00:17:14,500
就算是如此優秀的 Kafka 也不例外

330
00:17:15,500 --> 00:17:16,500
接下來我會介紹一下

331
00:17:16,500 --> 00:17:18,500
是什麼契機造就了我們這個

332
00:17:18,500 --> 00:17:19,500
Astrea 專案

333
00:17:20,500 --> 00:17:23,500
假設你正在物色一個 Midway

334
00:17:23,500 --> 00:17:25,500
來作為你項目中傳輸消息的媒介

335
00:17:25,500 --> 00:17:27,500
今天你剛巧遇見有人在跟你吹噓

336
00:17:27,500 --> 00:17:29,500
Kafka 有多麼的優秀

337
00:17:29,500 --> 00:17:31,500
你決定進行一次嘗試

338
00:17:31,500 --> 00:17:32,500
你辛苦地搭建起了重機

339
00:17:32,500 --> 00:17:33,500
寫好了 Code

340
00:17:33,500 --> 00:17:35,500
卻發現其每筆資料平均

341
00:17:35,500 --> 00:17:37,500
居然要傳輸 1400 毫秒

342
00:17:37,500 --> 00:17:39,500
你對這個結果相當的不滿意

343
00:17:39,500 --> 00:17:41,500
要知道 Kafka 的官網

344
00:17:41,500 --> 00:17:44,500
寫的平均傳輸的每筆資料的時間

345
00:17:44,500 --> 00:17:45,500
只需要 2 毫秒

346
00:17:49,500 --> 00:17:50,500
可是這時候

347
00:17:50,500 --> 00:17:52,500
你已經投入了大量的時間

348
00:17:52,500 --> 00:17:54,500
沉默的成本此刻已經讓你無法回頭

349
00:17:54,500 --> 00:17:56,500
你不得不繼續投資

350
00:17:56,500 --> 00:17:57,500
為了解決問題

351
00:17:57,500 --> 00:17:59,500
你開始大量翻閱文檔與博客

352
00:17:59,500 --> 00:18:01,500
買書進行系統性的學習

353
00:18:01,500 --> 00:18:03,500
甚至不惜尋找 Kafka 專家來進行諮詢

354
00:18:07,500 --> 00:18:09,500
終於辛苦的學習沒有背叛你

355
00:18:09,500 --> 00:18:13,500
你成功地將延遲控制在了 2 毫秒

356
00:18:14,500 --> 00:18:16,500
也可以向 Leader 進行報告了

357
00:18:16,500 --> 00:18:18,500
可是這一切真的值得嗎

358
00:18:18,500 --> 00:18:20,500
一個項目在往往會涉及數個框架

359
00:18:20,500 --> 00:18:22,500
Leader 也希望你能夠

360
00:18:22,500 --> 00:18:24,500
以盡可能快速的方式

361
00:18:24,500 --> 00:18:25,500
做出漂亮的結果

362
00:18:25,500 --> 00:18:27,500
這時候有限的時間真的允許你

363
00:18:27,500 --> 00:18:29,500
花這麼久在一個 Midway 上嗎

364
00:18:31,500 --> 00:18:33,500
事實上在企業的實際使用過程中

365
00:18:33,500 --> 00:18:36,500
Kafka 重機會因為節點的加入與下線

366
00:18:36,500 --> 00:18:38,500
當前需求服務的變化

367
00:18:38,500 --> 00:18:40,500
不同 Topic 的創建策略等情況

368
00:18:40,500 --> 00:18:43,500
處於一個動態變化的過程

369
00:18:43,500 --> 00:18:45,500
這代表哪怕你是個 Kafka 專家

370
00:18:45,500 --> 00:18:47,500
已經將重機調整到了完美的狀況

371
00:18:47,500 --> 00:18:50,500
也必須每隔一段時間就進行人工介入

372
00:18:50,500 --> 00:18:52,500
以調整重機狀況

373
00:18:52,500 --> 00:18:55,500
保證 Kafka 擁有最佳的效能

374
00:19:00,500 --> 00:19:02,500
要想發揮 Kafka 的真正功力

375
00:19:02,500 --> 00:19:04,500
解決效能議題將不可避免

376
00:19:04,500 --> 00:19:07,500
這也成為了 Kafka 使用路上的最後一路

377
00:19:07,500 --> 00:19:09,500
不過就像離山頂的最後一段階梯

378
00:19:09,500 --> 00:19:10,500
走得最累

379
00:19:10,500 --> 00:19:11,500
Kafka 的最後一路

380
00:19:11,500 --> 00:19:13,500
往往也需要你付出更多的努力

381
00:19:13,500 --> 00:19:16,500
在對 Kafka 有了一定程度的了解之後

382
00:19:16,500 --> 00:19:18,500
才會比較順利的能夠走完

383
00:19:19,500 --> 00:19:23,500
可是生活中其實要努力的事情已經夠多了

384
00:19:23,500 --> 00:19:25,500
有沒有選項可以讓你不那麼努力

385
00:19:25,500 --> 00:19:27,500
也能好好使用 Kafka 呢

386
00:19:27,500 --> 00:19:30,500
這時候就輪到 Azure Dispatcher 登場了

387
00:19:32,500 --> 00:19:33,500
在介紹整個方法前

388
00:19:33,500 --> 00:19:36,500
先來介紹一下本模組所替換的主件

389
00:19:36,500 --> 00:19:37,500
Partitioner

390
00:19:37,500 --> 00:19:39,500
在當一筆資料進入 Kafka Produce

391
00:19:39,500 --> 00:19:41,500
將被發送往 Kafka Server 前

392
00:19:41,500 --> 00:19:44,500
先需要決定是去往哪一個 Partition

393
00:19:44,500 --> 00:19:46,500
Partitioner 就會承擔了這一職責

394
00:19:46,500 --> 00:19:49,500
它會根據其邏輯計算的結果

395
00:19:49,500 --> 00:19:53,500
決定該筆資料會被 assign 到哪一個 Partition 當中

396
00:19:54,500 --> 00:19:56,500
像 Kafka 中的 Default Partitioner

397
00:19:56,500 --> 00:19:59,500
就是採取的是輪薰策略

398
00:19:59,500 --> 00:20:02,500
逐一循環向每一個 Partition 發送資料

399
00:20:02,500 --> 00:20:05,500
Partitioner 是支持被用戶自定義的

400
00:20:05,500 --> 00:20:07,500
因此本專案的目標是為

401
00:20:07,500 --> 00:20:10,500
用 Azure Dispatcher 替換掉原有的 Partitioner

402
00:20:10,500 --> 00:20:12,500
將每一筆資料

403
00:20:12,500 --> 00:20:16,500
按照其節點的負載狀況來進行分配

404
00:20:16,500 --> 00:20:19,500
Azure Dispatcher 分為兩個部分

405
00:20:19,500 --> 00:20:22,500
第一部分是根據 Kafka Metrics 評估節點狀況

406
00:20:22,500 --> 00:20:25,500
第二部分則是基於 Partitioner 搭建的 Dispatcher

407
00:20:25,500 --> 00:20:29,500
其會根據第一部分的節點狀況的評估

408
00:20:29,500 --> 00:20:32,500
來進行資料的派送

409
00:20:34,500 --> 00:20:38,500
首先我們介紹為什麼需要對節點狀況進行評估

410
00:20:38,500 --> 00:20:41,500
節點雖然都處於同一個重機中

411
00:20:41,500 --> 00:20:44,500
但節點之間 Topic 與 Partition 的分佈是不會相同的

412
00:20:44,500 --> 00:20:47,500
同一時間處理的服務也不一樣

413
00:20:47,500 --> 00:20:50,500
這就導致每一個節點的狀況實際上是存在差異的

414
00:20:50,500 --> 00:20:52,500
此時作為一個使用者

415
00:20:52,500 --> 00:20:55,500
肯定希望負載較輕的節點能夠處理更多的資料

416
00:20:55,500 --> 00:20:58,500
而負載較重的節點盡可能少的去接收到資料

417
00:20:58,500 --> 00:21:01,500
因此要想實現合理的分配

418
00:21:01,500 --> 00:21:03,500
首先就需要有一個標準

419
00:21:03,500 --> 00:21:06,500
來定義出每個節點的負載情況

420
00:21:06,500 --> 00:21:10,500
使其能夠按照我們的判斷的結果

421
00:21:10,500 --> 00:21:13,500
來進行資料的分配

422
00:21:16,500 --> 00:21:18,500
那麼如何判斷節點的負載狀況呢

423
00:21:18,500 --> 00:21:20,500
Kafka 作為一個 Java 程序

424
00:21:20,500 --> 00:21:23,500
在運行過程中能夠收集重機產生的資訊

425
00:21:23,500 --> 00:21:26,500
存入到 Managed Bin 當中

426
00:21:26,500 --> 00:21:30,500
因此有豐富的 Kafka Metrics 可以供用戶監控

427
00:21:30,500 --> 00:21:33,500
以確認重機是否在正常運行

428
00:21:33,500 --> 00:21:35,500
諸如 CPU Memory 的使用率

429
00:21:35,500 --> 00:21:37,500
Input Output 的 throughput

430
00:21:37,500 --> 00:21:39,500
Message 的發送頻率

431
00:21:39,500 --> 00:21:40,500
Request Latency

432
00:21:40,500 --> 00:21:44,500
你幾乎可以找到所有與重機相關的 metrics

433
00:21:44,500 --> 00:21:48,500
能夠想到的與重機相關的 metrics 有很多

434
00:21:48,500 --> 00:21:53,500
這也成為了一種用戶監控重機的重要的手段

435
00:21:53,500 --> 00:21:56,500
讓使用者能夠有機會從多個角度了解到

436
00:21:56,500 --> 00:21:58,500
Kafka 重機當前的運行狀況

437
00:21:58,500 --> 00:22:01,500
一些有經驗的 Kafka 使用者

438
00:22:01,500 --> 00:22:06,500
通過觀察 metrics 就能夠掌握整個重機的運行狀況

439
00:22:08,500 --> 00:22:10,500
因此我們使用 Kafka metrics

440
00:22:10,500 --> 00:22:13,500
作為評估節點狀況的數據的來源

441
00:22:13,500 --> 00:22:17,500
這裡先從單一 metrics 的評估節點

442
00:22:17,500 --> 00:22:21,500
單一 metrics 進行節點評估說起

443
00:22:21,500 --> 00:22:25,500
這裡用比較直觀的 Byte Impulse Second 來進行舉例

444
00:22:25,500 --> 00:22:26,500
Byte Impulse Second 代表

445
00:22:26,500 --> 00:22:29,500
每秒會有多少資料流入該節點

446
00:22:29,500 --> 00:22:33,500
Astral Dispatcher 會通過節點間的狀況進行比較

447
00:22:33,500 --> 00:22:34,500
例如在左圖中

448
00:22:34,500 --> 00:22:36,500
400MB 每秒資料流入量較少的節點

449
00:22:36,500 --> 00:22:38,500
這是我們會給它一個較好的分數

450
00:22:38,500 --> 00:22:41,500
因為它是負載較輕的節點

451
00:22:41,500 --> 00:22:45,500
而右圖中 400MB 每秒則是資料流入量最多的節點

452
00:22:45,500 --> 00:22:48,500
因此我們會給它一個最差的分數

453
00:22:48,500 --> 00:22:50,500
分數的高低反映了節點的負載程度

454
00:22:50,500 --> 00:22:53,500
最終會成為我們應該向該節點

455
00:22:53,500 --> 00:22:57,500
發送多少資料的重要依據

456
00:22:57,500 --> 00:22:59,500
但事實上在有些時候

457
00:22:59,500 --> 00:23:02,500
使用者會希望從多個維度上

458
00:23:02,500 --> 00:23:04,500
來判斷一個節點的狀況

459
00:23:04,500 --> 00:23:06,500
這時候就需要一種能夠將 matrix

460
00:23:06,500 --> 00:23:07,500
組合到一起的方式

461
00:23:07,500 --> 00:23:10,500
我們認為就像節點間是存在差異的

462
00:23:10,500 --> 00:23:14,500
指標之間同樣也是有重要程度的區別

463
00:23:14,500 --> 00:23:18,500
我們通過為 matrix 賦予權重的方式

464
00:23:18,500 --> 00:23:21,500
來規劃出最終節點的負載分數

465
00:23:21,500 --> 00:23:25,500
有百分之多少是來自於該 matrix 的

466
00:23:25,500 --> 00:23:29,500
首先需要對 matrix 做的就是將它們標準化

467
00:23:29,500 --> 00:23:31,500
這樣才可以讓不同的 matrix

468
00:23:31,500 --> 00:23:33,500
放到一起去比較

469
00:23:33,500 --> 00:23:35,500
然後接著通過上一頁介紹得出的

470
00:23:35,500 --> 00:23:37,500
單一 matrix 分數的方式

471
00:23:37,500 --> 00:23:40,500
配以其權重後就能得到出一個

472
00:23:40,500 --> 00:23:41,500
該 matrix 分數

473
00:23:41,500 --> 00:23:46,500
也就是圖中的 network score 這一欄

474
00:23:46,500 --> 00:23:52,500
然後最後再將這些 matrix 分數進行匯總

475
00:23:52,500 --> 00:23:54,500
就能得出能夠代表當前節點

476
00:23:54,500 --> 00:23:56,500
負載狀況的分數

477
00:23:56,500 --> 00:23:58,500
也就是圖中的 node score

478
00:23:58,500 --> 00:24:00,500
本文中提到的賦權方式

479
00:24:00,500 --> 00:24:01,500
分為主觀與客觀兩種

480
00:24:01,500 --> 00:24:04,500
主觀賦權是由用戶自己判斷的

481
00:24:04,500 --> 00:24:07,500
來判斷 matrix 的重要程度

482
00:24:07,500 --> 00:24:10,500
而客觀分數則是由 matrix 數據本身

483
00:24:10,500 --> 00:24:12,500
來判斷其重要程度

484
00:24:12,500 --> 00:24:13,500
由於時間有限

485
00:24:13,500 --> 00:24:15,500
這裡就先不展開說了

486
00:24:15,500 --> 00:24:17,500
感興趣的同學可以在演講結束後

487
00:24:17,500 --> 00:24:22,500
再來四樓我們的攤位進行討論

488
00:24:22,500 --> 00:24:23,500
有了評估分數後

489
00:24:23,500 --> 00:24:27,500
就需要利用分數來指定資料的發送方式

490
00:24:28,500 --> 00:24:29,500
Smooth weight round robin

491
00:24:29,500 --> 00:24:32,500
是本專案中 Dispatcher 所

492
00:24:32,500 --> 00:24:36,500
主要採用的一種資料發送方式

493
00:24:36,500 --> 00:24:38,500
其實是一種加權輪迅算法

494
00:24:38,500 --> 00:24:39,500
特檢就和他的名字一樣

495
00:24:39,500 --> 00:24:42,500
是能夠平滑地進行資料的發送

496
00:24:42,500 --> 00:24:44,500
那麼什麼是平滑的資料發送呢

497
00:24:44,500 --> 00:24:46,500
這裡同樣我們舉一個例子來說明

498
00:24:46,500 --> 00:24:49,500
假設 Client 能夠同時發送 5 筆資料

499
00:24:49,500 --> 00:24:52,500
而單台 Broker 只能同時處理 3 筆資料

500
00:24:52,500 --> 00:24:55,500
目前節點的權重為 511

501
00:24:55,500 --> 00:24:58,500
那麼在普通的加權輪迅算法中

502
00:24:58,500 --> 00:25:01,500
可以看到前 5 筆資料都被統一打到了 Broker1 中

503
00:25:01,500 --> 00:25:05,500
可是這時候單一節點的處理能力只有 3 筆

504
00:25:05,500 --> 00:25:07,500
因此就會發生消息的積壓

505
00:25:07,500 --> 00:25:10,500
造成額外的 Latency 的產生

506
00:25:10,500 --> 00:25:13,500
而 SWRR 就很好地迴避了這個問題

507
00:25:13,500 --> 00:25:15,500
可以看到其前 5 筆資料中

508
00:25:15,500 --> 00:25:20,500
只有 3 筆資料是發送到了 Broker1 當中

509
00:25:20,500 --> 00:25:24,500
這就避免了那些高權重的節點

510
00:25:24,500 --> 00:25:28,500
在短時間內會接收到大量的資料

511
00:25:28,500 --> 00:25:30,500
引起 Hotspot 的問題

512
00:25:30,500 --> 00:25:35,500
也就可以讓低權重的節點

513
00:25:35,500 --> 00:25:38,500
避免處於長時間的空閒狀況

514
00:25:42,500 --> 00:25:44,500
剛剛講述了我們專案

515
00:25:44,500 --> 00:25:46,500
安權重分配資料的方式

516
00:25:46,500 --> 00:25:49,500
但事實上在有些時候

517
00:25:49,500 --> 00:25:51,500
使用者會有將一批資料

518
00:25:51,500 --> 00:25:53,500
都發往同一個 Partition 的需求

519
00:25:53,500 --> 00:25:55,500
例如證券中記錄一支股票中

520
00:25:55,500 --> 00:25:57,500
每秒的交易信息

521
00:25:57,500 --> 00:26:01,500
或者是網購商品中

522
00:26:01,500 --> 00:26:04,500
對於一件商品買賣記錄的匯總

523
00:26:04,500 --> 00:26:06,500
這些數據往往都需要

524
00:26:06,500 --> 00:26:09,500
被存入同一個 Partition 當中

525
00:26:09,500 --> 00:26:14,500
因此這時候就按照上述

526
00:26:14,500 --> 00:26:17,500
節點負載的方式進行資料的分配

527
00:26:17,500 --> 00:26:20,500
顯然就是不太合理的了

528
00:26:20,500 --> 00:26:23,500
這時就需要一種新的方式

529
00:26:23,500 --> 00:26:26,500
因此我們對 Azure Dispatcher

530
00:26:26,500 --> 00:26:28,500
進行了一個新的實作

531
00:26:28,500 --> 00:26:30,500
也就是 Interdependent Dispatcher

532
00:26:30,500 --> 00:26:32,500
以滿足用戶想要將一批資料

533
00:26:32,500 --> 00:26:36,500
都發送往同一個 Partitioner 的請求

534
00:26:36,500 --> 00:26:39,500
它會被搭建在 Dispatcher 的 Interface 中

535
00:26:39,500 --> 00:26:40,500
這代表不管你使用了

536
00:26:40,500 --> 00:26:41,500
我們的哪個 Dispatcher

537
00:26:41,500 --> 00:26:43,500
都能輕鬆開啟這一功能

538
00:26:43,500 --> 00:26:45,500
我們會根據用戶所選 Dispatcher

539
00:26:45,500 --> 00:26:46,500
對 Metrics 關注點

540
00:26:46,500 --> 00:26:48,500
來挑選合適的 Partitioner

541
00:26:48,500 --> 00:26:51,500
讓狀況好的節點承擔這種

542
00:26:51,500 --> 00:26:54,500
可能對單一節點帶來高負載的行為

543
00:26:54,500 --> 00:26:57,500
以此來平衡衝擊的狀況

544
00:27:00,500 --> 00:27:01,500
Azure Dispatcher 的大致功能

545
00:27:01,500 --> 00:27:03,500
已經介紹完畢

546
00:27:03,500 --> 00:27:04,500
我也對這個模組的功能

547
00:27:04,500 --> 00:27:06,500
進行一些總結

548
00:27:06,500 --> 00:27:07,500
首先會根據節點間的

549
00:27:07,500 --> 00:27:08,500
Kafka Metrics 的差異

550
00:27:08,500 --> 00:27:11,500
來進行節點的評估

551
00:27:11,500 --> 00:27:13,500
然後用戶會根據

552
00:27:13,500 --> 00:27:15,500
用戶可以自行的去考量

553
00:27:15,500 --> 00:27:17,500
會使用哪一些 Metrics

554
00:27:17,500 --> 00:27:19,500
作為其評分標準

555
00:27:19,500 --> 00:27:21,500
得出節點的分數後

556
00:27:21,500 --> 00:27:24,500
Dispatcher 會以分數為標準

557
00:27:24,500 --> 00:27:25,500
去派送這些資料

558
00:27:25,500 --> 00:27:28,500
盡可能來保證負載的平衡

559
00:27:28,500 --> 00:27:31,500
同時也會針對使用者的習慣提供

560
00:27:31,500 --> 00:27:33,500
同時我們也針對使用者的習慣

561
00:27:33,500 --> 00:27:34,500
提供了一些

562
00:27:34,500 --> 00:27:36,500
不同的資料派送模式

563
00:27:36,500 --> 00:27:37,500
在使用過程中

564
00:27:37,500 --> 00:27:39,500
Dispatcher 可能根據

565
00:27:39,500 --> 00:27:41,500
使用者需求的不同

566
00:27:41,500 --> 00:27:43,500
使用不同的評分模組

567
00:27:43,500 --> 00:27:44,500
以實現附用

568
00:27:44,500 --> 00:27:46,500
幫助用戶對

569
00:27:46,500 --> 00:27:48,500
針對環境的需求的變化

570
00:27:48,500 --> 00:27:49,500
而進行調整

571
00:27:52,500 --> 00:27:53,500
接下來是一些

572
00:27:53,500 --> 00:27:54,500
我們的測試的數據

573
00:27:54,500 --> 00:27:56,500
分為兩個實驗的關注點

574
00:27:56,500 --> 00:27:58,500
分別為不同的 metrics

575
00:27:58,500 --> 00:27:59,500
第一個實驗

576
00:27:59,500 --> 00:28:01,500
以 Streetput 為評估標準

577
00:28:01,500 --> 00:28:02,500
左邊是我們的環境

578
00:28:02,500 --> 00:28:04,500
通過在一台節點中

579
00:28:04,500 --> 00:28:05,500
加入更多的 partition

580
00:28:05,500 --> 00:28:06,500
使得其中一台機器

581
00:28:06,500 --> 00:28:08,500
成為負載較重的節點

582
00:28:08,500 --> 00:28:10,500
可以看到使用 SQI Dispatcher 後

583
00:28:10,500 --> 00:28:12,500
原先接收到資料量

584
00:28:12,500 --> 00:28:14,500
較少處於相對閒置的節點

585
00:28:14,500 --> 00:28:15,500
接收到資料量

586
00:28:15,500 --> 00:28:16,500
有明顯的增加

587
00:28:18,500 --> 00:28:20,500
整體提高的程度

588
00:28:20,500 --> 00:28:22,500
大約是在 12% 左右

589
00:28:22,500 --> 00:28:24,500
然後對閒置節點的

590
00:28:24,500 --> 00:28:25,500
利用率的提升

591
00:28:25,500 --> 00:28:29,500
也分別達到了 33% 與 34%

592
00:28:32,500 --> 00:28:33,500
第二個實驗

593
00:28:33,500 --> 00:28:35,500
以 Latency 為評估標準

594
00:28:35,500 --> 00:28:36,500
左邊是我們的環境

595
00:28:36,500 --> 00:28:38,500
三台機器在 Switch A

596
00:28:38,500 --> 00:28:39,500
一台機器在 Switch B

597
00:28:39,500 --> 00:28:41,500
一個 topic 分佈在

598
00:28:41,500 --> 00:28:42,500
該重機中

599
00:28:42,500 --> 00:28:43,500
負責發送資料的

600
00:28:43,500 --> 00:28:45,500
Produce 在 Switch A 中

601
00:28:45,500 --> 00:28:47,500
通過將資料從 Switch A

602
00:28:47,500 --> 00:28:48,500
打到 Switch B

603
00:28:48,500 --> 00:28:49,500
這種跨 Switch 方式

604
00:28:49,500 --> 00:28:52,500
來製造出資料傳輸延遲的差異

605
00:28:52,500 --> 00:28:53,500
可以看到

606
00:28:53,500 --> 00:28:57,500
使用了 Azure Dispatcher 後

607
00:28:57,500 --> 00:28:59,500
每一個 Produce 的資料延遲

608
00:28:59,500 --> 00:29:01,500
都趨於一致

609
00:29:01,500 --> 00:29:02,500
並且整體的 Produce

610
00:29:02,500 --> 00:29:04,500
相比於 Default Partitioner

611
00:29:04,500 --> 00:29:05,500
要更低

612
00:29:05,500 --> 00:29:07,500
提升的幅度大約是在

613
00:29:07,500 --> 00:29:10,500
30% 左右

614
00:29:12,500 --> 00:29:16,500
從上述兩個實驗中可以看出

615
00:29:16,500 --> 00:29:18,500
針對不同的需求設定 Metrics

616
00:29:18,500 --> 00:29:20,500
都能帶來相應需求的改善

617
00:29:20,500 --> 00:29:22,500
使用 Azure Dispatcher

618
00:29:22,500 --> 00:29:23,500
極低的額外成本

619
00:29:23,500 --> 00:29:25,500
與可以被附用的模組化設計

620
00:29:25,500 --> 00:29:27,500
也能方便用戶進行使用

621
00:29:27,500 --> 00:29:29,500
Azure 是一個致於

622
00:29:29,500 --> 00:29:30,500
從全端解決

623
00:29:30,500 --> 00:29:32,500
Kafka Load Balance 的議題

624
00:29:32,500 --> 00:29:35,500
今天介紹的 Dispatcher

625
00:29:35,500 --> 00:29:37,500
只是從 Kafka 的 Produce 端

626
00:29:37,500 --> 00:29:38,500
也就是寫入端

627
00:29:38,500 --> 00:29:40,500
來解決效能負載的議題

628
00:29:41,500 --> 00:29:45,500
從 Server 端和 Consumer 讀取端

629
00:29:45,500 --> 00:29:47,500
改善的方案

630
00:29:47,500 --> 00:29:49,500
也歡迎各位同學

631
00:29:49,500 --> 00:29:51,500
來我們四樓的攤位進行諮詢

632
00:29:52,500 --> 00:29:54,500
以上就是我今天演講

633
00:29:54,500 --> 00:29:56,500
感謝大家 歡迎提問

634
00:30:02,500 --> 00:30:05,500
好 我們大概今天的 talk 到這裡

635
00:30:05,500 --> 00:30:06,500
我們這裡很快看一下

636
00:30:06,500 --> 00:30:07,500
線上有沒有人

637
00:30:07,500 --> 00:30:08,500
如果沒有人提問

638
00:30:08,500 --> 00:30:11,500
現場有沒有人對我們

639
00:30:15,500 --> 00:30:16,500
那如果大家有疑問的話

640
00:30:16,500 --> 00:30:18,500
就讓我們攤位可以進行一些

641
00:30:18,500 --> 00:30:19,500
不管是開源技術

642
00:30:19,500 --> 00:30:21,500
或是一些專案內容的討論

643
00:30:21,500 --> 00:30:22,500
謝謝大家


