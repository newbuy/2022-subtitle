1
00:00:00,000 --> 00:00:05,000
好,那各位宇輝總統大家好

2
00:00:05,000 --> 00:00:07,000
那這是我這一次的講題

3
00:00:07,000 --> 00:00:10,000
在用App Inventor2做什麼?有沒有空來Ransom一下

4
00:00:10,000 --> 00:00:13,000
那我的ID是ASF18766

5
00:00:13,000 --> 00:00:16,000
好,那稍微簡介一下我是誰

6
00:00:16,000 --> 00:00:19,000
那我是台大電機所的准入學生

7
00:00:19,000 --> 00:00:23,000
然後一個正在往逆向工程努力的老人

8
00:00:23,000 --> 00:00:26,000
那現在是OE智慧科技的實習生

9
00:00:26,000 --> 00:00:27,000
這是我的GitHub ID

10
00:00:27,000 --> 00:00:29,000
同我剛剛前面的ID一樣

11
00:00:29,000 --> 00:00:31,000
然後另外最重要的一點是

12
00:00:31,000 --> 00:00:34,000
昨天晚餐吃薑母鴨

13
00:00:34,000 --> 00:00:36,000
好,這是我這次的大綱

14
00:00:36,000 --> 00:00:39,000
那首先我會解釋一下這次的成因

15
00:00:39,000 --> 00:00:45,000
以及可能有一些會眾沒有用過App Inventor2

16
00:00:45,000 --> 00:00:47,000
我會大概簡介一下那是什麼

17
00:00:47,000 --> 00:00:51,000
那接下來我會簡介這整個服務的Architecture

18
00:00:51,000 --> 00:00:54,000
然後最後面是如何去Setup環境

19
00:00:54,000 --> 00:00:57,000
以及實作的一些概念

20
00:00:57,000 --> 00:01:01,000
好,那我這邊有個簡單的Disclaimer

21
00:01:01,000 --> 00:01:03,000
要說一下就是

22
00:01:03,000 --> 00:01:07,000
跟我對Android開發非常菜

23
00:01:07,000 --> 00:01:09,000
可能跟在座各位差不多

24
00:01:09,000 --> 00:01:11,000
我只是學了一兩個月而已

25
00:01:11,000 --> 00:01:15,000
然後如果要是我在一樣的過程中有任何錯誤的話

26
00:01:15,000 --> 00:01:21,000
歡迎各位在演講後或是在一樣的過程中用Slide跟我互動

27
00:01:21,000 --> 00:01:25,000
好,那我在這邊停個30秒

28
00:01:27,000 --> 00:01:47,000
好,那我就繼續

29
00:01:47,000 --> 00:01:51,000
好,那我們來介紹一下這個故事的背景

30
00:01:51,000 --> 00:01:53,000
那什麼是AI2呢?

31
00:01:53,000 --> 00:01:57,000
那AI2事實上是由MIT所開發的一套工具

32
00:01:57,000 --> 00:01:59,000
那它長得很像Scratch

33
00:01:59,000 --> 00:02:02,000
但它比Scratch能做的事更多

34
00:02:02,000 --> 00:02:04,000
它可以拿來去設計App

35
00:02:04,000 --> 00:02:06,000
在你的Android Phone上面跑起來

36
00:02:06,000 --> 00:02:09,000
然後除此之外它是一個Open Source的Project

37
00:02:09,000 --> 00:02:12,000
那當你寫好這個App碼的也需要測試

38
00:02:12,000 --> 00:02:14,000
那事實上它有提供一個開App

39
00:02:14,000 --> 00:02:17,000
你可以在Google Play上面下載叫AI2 Companion

40
00:02:17,000 --> 00:02:18,000
然後下載之後呢

41
00:02:18,000 --> 00:02:22,000
你都會輸入你的某一些Magic Code

42
00:02:22,000 --> 00:02:26,000
然後都可以去跟你的App Inventor2的Server溝通

43
00:02:26,000 --> 00:02:30,000
然後在你的手機上測試你寫好的Code

44
00:02:30,000 --> 00:02:32,000
好 但...

45
00:02:32,000 --> 00:02:34,000
好 沒事

46
00:02:34,000 --> 00:02:36,000
但有的時候呢

47
00:02:36,000 --> 00:02:40,000
App Inventor2或是說其實在寫很多程式語言

48
00:02:40,000 --> 00:02:41,000
都會遇到問題

49
00:02:41,000 --> 00:02:44,000
都是Build in一些內建的東西

50
00:02:44,000 --> 00:02:45,000
事實上是不夠用

51
00:02:45,000 --> 00:02:46,000
我們需要一些外掛插件

52
00:02:46,000 --> 00:02:50,000
所以App Inventor2都提供一個Solution

53
00:02:50,000 --> 00:02:54,000
就是你事實上可以外掛一些插件在上面

54
00:02:54,000 --> 00:02:58,000
那這個插件的規格就叫AIX

55
00:02:58,000 --> 00:02:59,000
好

56
00:02:59,000 --> 00:03:02,000
那這樣子聽起來

57
00:03:02,000 --> 00:03:05,000
這個App Inventor2聽起來是一個不錯的東西

58
00:03:05,000 --> 00:03:08,000
但在大多數的情況下呢

59
00:03:08,000 --> 00:03:13,000
我們使用者在用這個Plugin的時候呢

60
00:03:13,000 --> 00:03:15,000
不會去仔細看一下它到底是怎麼做的

61
00:03:15,000 --> 00:03:16,000
都是下載下來

62
00:03:16,000 --> 00:03:18,000
然後都用下去

63
00:03:18,000 --> 00:03:21,000
那如果要是今天有個Scenario是這樣的

64
00:03:21,000 --> 00:03:24,000
今天使用者直接不看它的code

65
00:03:24,000 --> 00:03:25,000
然後下載下來用了

66
00:03:25,000 --> 00:03:28,000
然後事實上那是一個惡意的使用者

67
00:03:28,000 --> 00:03:31,000
故意去散發到網路上的

68
00:03:31,000 --> 00:03:32,000
然後用了

69
00:03:32,000 --> 00:03:33,000
哇

70
00:03:33,000 --> 00:03:36,000
你的Device都整個被勒索起來了

71
00:03:36,000 --> 00:03:38,000
啪 沒了

72
00:03:38,000 --> 00:03:43,000
好 那這是我這一次的簡單的小Demo

73
00:03:43,000 --> 00:03:44,000
好

74
00:03:44,000 --> 00:03:47,000
那這邊的話是一個App Inventor2正常使用者

75
00:03:48,000 --> 00:03:49,000
使用的情況

76
00:03:49,000 --> 00:03:50,000
那它一開始的時候

77
00:03:50,000 --> 00:03:55,000
會Import它的一個惡意的插件進去

78
00:03:55,000 --> 00:03:57,000
然後輸入進去

79
00:03:57,000 --> 00:04:04,000
它會開始去拖拉使用裡面的一些函數

80
00:04:04,000 --> 00:04:05,000
然後使用過後

81
00:04:05,000 --> 00:04:06,000
它會去刷上它自己的機器

82
00:04:06,000 --> 00:04:10,000
那我這邊使用Android Emulator去做替代

83
00:04:10,000 --> 00:04:12,000
那在這個正常的環境

84
00:04:12,000 --> 00:04:15,000
裡面上有一些正常的照片

85
00:04:15,000 --> 00:04:20,000
或者是正常的影片之類的

86
00:04:20,000 --> 00:04:22,000
那這邊一開始的時候

87
00:04:22,000 --> 00:04:24,000
事實上可以正常使用

88
00:04:24,000 --> 00:04:28,000
但只要當它嘗試去連接

89
00:04:28,000 --> 00:04:30,000
把它刷上去它自己的手機的時候

90
00:04:30,000 --> 00:04:34,000
都會發生一件很可怕的事

91
00:04:34,000 --> 00:04:35,000
使用者按下去

92
00:04:35,000 --> 00:04:38,000
把程式打算從它的Server

93
00:04:38,000 --> 00:04:47,000
然後download到它的手機上面

94
00:04:47,000 --> 00:04:50,000
哇 這時候開始在跑了

95
00:04:50,000 --> 00:04:52,000
莫名其妙突然白了一下

96
00:04:52,000 --> 00:04:55,000
哇 恭喜 你的檔案全都被加密了

97
00:04:55,000 --> 00:04:57,000
太慘了吧

98
00:04:57,000 --> 00:04:58,000
到底是發生什麼事了

99
00:04:58,000 --> 00:04:59,000
然後這時候其實

100
00:04:59,000 --> 00:05:01,000
惡意attack會接到

101
00:05:01,000 --> 00:05:04,000
你必須要用這把鑰匙來去做解鎖

102
00:05:04,000 --> 00:05:05,000
不然你的檔案都是

103
00:05:05,000 --> 00:05:07,000
有點被鎖住了 被加密住了

104
00:05:07,000 --> 00:05:09,000
沒有辦法拿回來

105
00:05:09,000 --> 00:05:12,000
而且會有一個精美的金流見面

106
00:05:12,000 --> 00:05:21,000
然後這時候使用者不信邪

107
00:05:21,000 --> 00:05:24,000
我們來看一下我們的檔案

108
00:05:24,000 --> 00:05:25,000
看一下圖片

109
00:05:25,000 --> 00:05:27,000
圖片怎麼爛掉了 打不開

110
00:05:27,000 --> 00:05:29,000
全黑了 國防部

111
00:05:29,000 --> 00:05:30,000
沒關係 我們看一下影片

112
00:05:30,000 --> 00:05:32,000
影片至少在吧

113
00:05:32,000 --> 00:05:34,000
哇 顏色完全打不開

114
00:05:34,000 --> 00:05:38,000
這都是整個故事的流程

115
00:05:38,000 --> 00:05:43,000
好 讓我們一個想要做壞壞東西的傢伙

116
00:05:43,000 --> 00:05:45,000
我們又要知道什麼東西呢

117
00:05:45,000 --> 00:05:48,000
可能第一件事我們必須要了解

118
00:05:48,000 --> 00:05:51,000
APP Inventor 2到底是怎麼運作的

119
00:05:51,000 --> 00:05:55,000
因為畢竟要打算去利用這個東西去做一些壞事

120
00:05:55,000 --> 00:05:59,000
至少要知道它的運作邏輯

121
00:05:59,000 --> 00:06:03,000
接下來我們要去創立一個測試環境

122
00:06:04,000 --> 00:06:05,000
有兩個原因

123
00:06:05,000 --> 00:06:11,000
第一個原因都是事實上我還不想去監牢裡面做

124
00:06:11,000 --> 00:06:16,000
如果隨便把惡意的軟體丟到網路上

125
00:06:16,000 --> 00:06:18,000
事實上是要負法律責任的

126
00:06:18,000 --> 00:06:21,000
所以我們只能在我們自己的測試環境去幹這件事

127
00:06:21,000 --> 00:06:23,000
然後第二件事就是

128
00:06:23,000 --> 00:06:25,000
如果要是今天你寫BUG

129
00:06:25,000 --> 00:06:29,000
那是不是可以透過你的伺服器的Log

130
00:06:29,000 --> 00:06:32,000
或者是你開案的Log去做一些交叉比對做分析

131
00:06:32,000 --> 00:06:35,000
更容易去寫出一個優良的Code

132
00:06:35,000 --> 00:06:40,000
最後了解了整個API Inventor

133
00:06:40,000 --> 00:06:42,000
以及把東西架起來之後

134
00:06:42,000 --> 00:06:46,000
是不是就可以正常的去寫你的Code

135
00:06:46,000 --> 00:06:49,000
寫完之後接下來就要等魚上鉤了

136
00:06:49,000 --> 00:06:52,000
接下來可以剪接一下

137
00:06:52,000 --> 00:06:54,000
這個Architecture到底是長怎樣的

138
00:06:54,000 --> 00:06:56,000
簡單來說

139
00:06:56,000 --> 00:06:59,000
API Inventor 2的Architecture可以用這張圖來剪接

140
00:06:59,000 --> 00:07:02,000
這張圖我是從官方的Google Docs上

141
00:07:02,000 --> 00:07:04,000
截下來的

142
00:07:04,000 --> 00:07:06,000
簡單來說

143
00:07:06,000 --> 00:07:09,000
在Server-side

144
00:07:09,000 --> 00:07:11,000
在網頁上

145
00:07:11,000 --> 00:07:13,000
它的架構大概是這樣子

146
00:07:13,000 --> 00:07:15,000
會有一個Blocked Edit

147
00:07:15,000 --> 00:07:20,000
它主要是透過叫Blocked Key的插件去Build起來的

148
00:07:20,000 --> 00:07:22,000
它是被

149
00:07:22,000 --> 00:07:26,000
這個東西會牽在你的前端的網頁上面

150
00:07:26,000 --> 00:07:29,000
然後你都可以透過拖拉方塊的方法

151
00:07:29,000 --> 00:07:32,000
去寫你的程式

152
00:07:32,000 --> 00:07:34,000
後面會有一個Build Server

153
00:07:34,000 --> 00:07:35,000
那Build Server的話

154
00:07:35,000 --> 00:07:37,000
基本上負責一大堆雜七雜八的事

155
00:07:37,000 --> 00:07:40,000
主要是Host一個HTTP Server

156
00:07:40,000 --> 00:07:42,000
或者是如果今天你開

157
00:07:42,000 --> 00:07:45,000
你在網頁上寫了好Code的

158
00:07:45,000 --> 00:07:48,000
就會把它打包成一個Zip

159
00:07:48,000 --> 00:07:52,000
然後丟回這個Build Server去做處理

160
00:07:52,000 --> 00:07:56,000
然後它也同時負責APK的製作

161
00:07:56,000 --> 00:07:58,000
那如果要是你中間Code有一些問題

162
00:07:58,000 --> 00:07:59,000
有一些邏輯上的問題的話

163
00:07:59,000 --> 00:08:01,000
那它也會噴Error Message給你

164
00:08:01,000 --> 00:08:04,000
然後API Engine都負責Box Edit

165
00:08:04,000 --> 00:08:06,000
跟Build Server之間的一些溝通

166
00:08:06,000 --> 00:08:07,000
有的沒的

167
00:08:07,000 --> 00:08:10,000
像是Store或者Load User Project

168
00:08:10,000 --> 00:08:14,000
好 那在我們剛開始提到

169
00:08:14,000 --> 00:08:17,000
有個東西可以載在你手機嘛

170
00:08:18,000 --> 00:08:24,000
那這個東西在AP Inventor 2的專案裡面

171
00:08:24,000 --> 00:08:26,000
會叫AI Phone App

172
00:08:26,000 --> 00:08:29,000
在比較早的版本會叫AI Phone App

173
00:08:29,000 --> 00:08:32,000
但是它在比較新的版本呢

174
00:08:32,000 --> 00:08:33,000
直接蒸發了

175
00:08:33,000 --> 00:08:34,000
我也不知道為什麼

176
00:08:34,000 --> 00:08:36,000
我猜應該是可能更新

177
00:08:36,000 --> 00:08:38,000
然後留下來的歷史遺跡

178
00:08:38,000 --> 00:08:40,000
那現在的話它叫AI Play App

179
00:08:40,000 --> 00:08:42,000
或者是Young Android Project之類的

180
00:08:42,000 --> 00:08:44,000
那它就是我們可以在

181
00:08:44,000 --> 00:08:46,000
在App Store上面載到的那個

182
00:08:46,000 --> 00:08:48,000
AI 2 Companion

183
00:08:48,000 --> 00:08:50,000
那如果要是各位有興趣

184
00:08:50,000 --> 00:08:52,000
去把它的

185
00:08:52,000 --> 00:08:54,000
Building Channel

186
00:08:54,000 --> 00:08:55,000
我忘記那個叫什麼了

187
00:08:55,000 --> 00:08:57,000
就是某一個Channel打開來的話

188
00:08:57,000 --> 00:08:58,000
你會發現

189
00:08:58,000 --> 00:09:01,000
它要了一大堆權限

190
00:09:01,000 --> 00:09:02,000
那原因是為什麼

191
00:09:02,000 --> 00:09:04,000
因為它是一個開發用的環境

192
00:09:04,000 --> 00:09:05,000
所以事實上為了方便

193
00:09:05,000 --> 00:09:08,000
所以它都要一大堆的權限

194
00:09:08,000 --> 00:09:10,000
那大概接下來我簡介一下

195
00:09:10,000 --> 00:09:12,000
它是如何去

196
00:09:12,000 --> 00:09:15,000
整個同步的流程

197
00:09:15,000 --> 00:09:16,000
那首先

198
00:09:16,000 --> 00:09:18,000
使用者在前端

199
00:09:18,000 --> 00:09:21,000
去做一個編輯的動作

200
00:09:21,000 --> 00:09:22,000
從Blocks Editor

201
00:09:22,000 --> 00:09:23,000
它會去傳到

202
00:09:23,000 --> 00:09:24,000
App Engine Client

203
00:09:24,000 --> 00:09:25,000
然後同步到

204
00:09:25,000 --> 00:09:27,000
App Engine Server那邊

205
00:09:27,000 --> 00:09:28,000
透過一個叫

206
00:09:28,000 --> 00:09:31,000
Google Web Toolkit的東西

207
00:09:31,000 --> 00:09:32,000
然後後面

208
00:09:32,000 --> 00:09:33,000
它會一路傳到

209
00:09:33,000 --> 00:09:34,000
我們的Build Server

210
00:09:34,000 --> 00:09:35,000
它會是傳一個

211
00:09:35,000 --> 00:09:39,000
叫做Blockly Code的東西

212
00:09:39,000 --> 00:09:41,000
那Build Server都會去

213
00:09:41,000 --> 00:09:43,000
把這個Blockly Code的東西

214
00:09:43,000 --> 00:09:45,000
Build成APK

215
00:09:45,000 --> 00:09:47,000
然後傳到我們的

216
00:09:47,000 --> 00:09:49,000
手機的App上面

217
00:09:49,000 --> 00:09:51,000
然後同時也會回傳這個

218
00:09:51,000 --> 00:09:52,000
App到底有沒有

219
00:09:52,000 --> 00:09:55,000
Build成功或失敗

220
00:09:55,000 --> 00:09:56,000
好

221
00:09:56,000 --> 00:09:57,000
那

222
00:09:57,000 --> 00:09:58,000
AI2事實上是一個

223
00:09:58,000 --> 00:09:59,000
非常龐大的Project

224
00:09:59,000 --> 00:10:01,000
它用了不少的第三方

225
00:10:01,000 --> 00:10:03,000
Package

226
00:10:03,000 --> 00:10:05,000
最主要是Android SDK

227
00:10:05,000 --> 00:10:06,000
還有Blockly

228
00:10:06,000 --> 00:10:07,000
那剛剛我們有提到

229
00:10:07,000 --> 00:10:08,000
就是它用來去

230
00:10:08,000 --> 00:10:10,000
Build Server所用的

231
00:10:10,000 --> 00:10:11,000
Google Web Toolkit

232
00:10:11,000 --> 00:10:12,000
然後JTK5

233
00:10:12,000 --> 00:10:14,000
還有之前鬧得沸沸揚揚的

234
00:10:14,000 --> 00:10:17,000
Log4j

235
00:10:17,000 --> 00:10:18,000
接下來是

236
00:10:18,000 --> 00:10:21,000
整個環境的Setup

237
00:10:21,000 --> 00:10:23,000
那我們要如何去

238
00:10:23,000 --> 00:10:24,000
自己自駕一個

239
00:10:24,000 --> 00:10:26,000
App Inventor2的Server呢

240
00:10:26,000 --> 00:10:27,000
首先第一件事呢

241
00:10:27,000 --> 00:10:30,000
就是去讀GitHub的文件

242
00:10:30,000 --> 00:10:31,000
事實上還有

243
00:10:31,000 --> 00:10:34,000
GitHub的Website可以去讀

244
00:10:34,000 --> 00:10:37,000
那以下是幾個我推薦的

245
00:10:37,000 --> 00:10:40,000
該讀的幾個文件

246
00:10:40,000 --> 00:10:41,000
那除此之外呢

247
00:10:41,000 --> 00:10:43,000
有的時候讀文件其實不夠

248
00:10:43,000 --> 00:10:45,000
你可能需要看一些Source Code

249
00:10:45,000 --> 00:10:46,000
那事實上呢

250
00:10:46,000 --> 00:10:49,000
它的Source Code也還算OK

251
00:10:49,000 --> 00:10:50,000
那如果要是你今天

252
00:10:50,000 --> 00:10:52,000
只想要寫一個Plugin的話

253
00:10:52,000 --> 00:10:53,000
那它也有提供一個Template

254
00:10:53,000 --> 00:10:55,000
讓你去看

255
00:10:55,000 --> 00:10:56,000
那或者是其實一些

256
00:10:56,000 --> 00:10:59,000
第三方的教學文件也不錯

257
00:10:59,000 --> 00:11:01,000
接下來我們來簡介一下

258
00:11:01,000 --> 00:11:04,000
它的Official Documentation

259
00:11:04,000 --> 00:11:05,000
那如果要是各位

260
00:11:05,000 --> 00:11:07,000
GitHub去看的話

261
00:11:07,000 --> 00:11:09,000
第一個看到的應該是這個

262
00:11:09,000 --> 00:11:10,000
Search Instruction

263
00:11:10,000 --> 00:11:11,000
它會推薦使用法棍

264
00:11:11,000 --> 00:11:12,000
那法棍是什麼

265
00:11:12,000 --> 00:11:14,000
事實上就是一個VM的管理工具

266
00:11:14,000 --> 00:11:16,000
那它第一件事

267
00:11:16,000 --> 00:11:17,000
下的第一堂指令

268
00:11:17,000 --> 00:11:20,000
它會是推薦你使用VirtualBox

269
00:11:20,000 --> 00:11:23,000
做一個平台去架它的Server

270
00:11:23,000 --> 00:11:24,000
然後後面的話

271
00:11:24,000 --> 00:11:26,000
它會用一個叫ANT的指令

272
00:11:26,000 --> 00:11:28,000
它會去把整個Project Build起來

273
00:11:28,000 --> 00:11:30,000
就用一個Command叫

274
00:11:30,000 --> 00:11:31,000
StartAPI Inventor

275
00:11:31,000 --> 00:11:33,000
都可以把它拋起來

276
00:11:33,000 --> 00:11:36,000
好 那如果各位下載的是

277
00:11:36,000 --> 00:11:39,000
它Extension Template這個Report的話

278
00:11:39,000 --> 00:11:44,000
那它這邊會標明說你需要的東西

279
00:11:44,000 --> 00:11:45,000
首先是Java

280
00:11:45,000 --> 00:11:48,000
然後ANT還有Git

281
00:11:48,000 --> 00:11:51,000
那就算是你Clone

282
00:11:51,000 --> 00:11:53,000
說它的Extension Template好了

283
00:11:53,000 --> 00:11:56,000
那它有一個Option叫

284
00:11:56,000 --> 00:11:57,000
Recursive Submodule

285
00:11:57,000 --> 00:11:59,000
那這個原因就是因為呢

286
00:11:59,000 --> 00:12:01,000
你就算今天只是只要Build Plugin

287
00:12:01,000 --> 00:12:02,000
沒有要把它拋起來

288
00:12:02,000 --> 00:12:05,000
你還是需要AI Tool Source Code

289
00:12:05,000 --> 00:12:09,000
好 那接下來我們介紹法冠

290
00:12:09,000 --> 00:12:11,000
那法冠是一個Open Source的

291
00:12:11,000 --> 00:12:13,000
Virtual Machine Environment Manager

292
00:12:13,000 --> 00:12:16,000
那它事實上Support不同的Manager環境

293
00:12:16,000 --> 00:12:18,000
首先是VirtualBot剛剛說過的

294
00:12:18,000 --> 00:12:20,000
那其實它還Support像KVM Hybrid V

295
00:12:20,000 --> 00:12:22,000
Docker Container VMware或者是AWS

296
00:12:22,000 --> 00:12:24,000
都可以透過它來管理

297
00:12:24,000 --> 00:12:28,000
那個人覺得它比起其他的

298
00:12:28,000 --> 00:12:31,000
一些VM管理的CLI套件還要好用

299
00:12:31,000 --> 00:12:34,000
而且它還有一個很人性化的東西

300
00:12:34,000 --> 00:12:36,000
都是它可以使用法冠File去

301
00:12:36,000 --> 00:12:39,000
設定一些初始環境的數值

302
00:12:39,000 --> 00:12:41,000
好 那接下來我們來看一下

303
00:12:41,000 --> 00:12:44,000
它的法冠File會長得怎樣

304
00:12:44,000 --> 00:12:48,000
好 那首先中間的Config VM Bus

305
00:12:48,000 --> 00:12:51,000
是說我今天要用它的

306
00:12:51,000 --> 00:12:57,000
網路上的某一個特別的VM環境

307
00:12:57,000 --> 00:12:59,000
某個指定的VM環境

308
00:12:59,000 --> 00:13:01,000
然後接下來第15行

309
00:13:01,000 --> 00:13:03,000
那它這邊都說我今天

310
00:13:03,000 --> 00:13:06,000
我使用 我整個VM環境

311
00:13:06,000 --> 00:13:08,000
要在Virtual Bus上面架起來

312
00:13:08,000 --> 00:13:10,000
然後後面都下了一些

313
00:13:10,000 --> 00:13:11,000
Virtual Bus Manager的Command

314
00:13:11,000 --> 00:13:13,000
去設定一些參數

315
00:13:13,000 --> 00:13:16,000
那等環境整個Setup好之後

316
00:13:16,000 --> 00:13:17,000
我要跑起來

317
00:13:17,000 --> 00:13:18,000
但在跑起來之前

318
00:13:18,000 --> 00:13:20,000
我們可能都是有一些工具要裝滿

319
00:13:20,000 --> 00:13:22,000
像剛剛有提到Git ANT

320
00:13:22,000 --> 00:13:23,000
那些有的沒的

321
00:13:23,000 --> 00:13:24,000
那跑起來的話

322
00:13:24,000 --> 00:13:26,000
它都透過這Bootstrap.sh

323
00:13:27,000 --> 00:13:28,000
的這條中間的指令

324
00:13:28,000 --> 00:13:30,000
去把它裝起來

325
00:13:30,000 --> 00:13:31,000
然後後面呢

326
00:13:31,000 --> 00:13:36,000
它會Expose一些VM的Port到Host上

327
00:13:37,000 --> 00:13:39,000
好 那剛剛有提到一個東西ANT

328
00:13:39,000 --> 00:13:40,000
那ANT是什麼

329
00:13:40,000 --> 00:13:42,000
那ANT事實上都是

330
00:13:42,000 --> 00:13:43,000
Apache所搞出來的一個

331
00:13:43,000 --> 00:13:45,000
Java Version的Make Command

332
00:13:45,000 --> 00:13:47,000
那它事實上

333
00:13:47,000 --> 00:13:49,000
用一個叫Build Tile的東西

334
00:13:49,000 --> 00:13:52,000
去Define整個東西的Workflow

335
00:13:52,000 --> 00:13:55,000
那Build Tile都類似

336
00:13:55,000 --> 00:13:58,000
Linux底下的Make

337
00:13:58,000 --> 00:13:59,000
好

338
00:13:59,000 --> 00:14:01,000
Make File

339
00:14:01,000 --> 00:14:03,000
那它的特點就是呢

340
00:14:03,000 --> 00:14:05,000
它官方所陳述的特點都是

341
00:14:05,000 --> 00:14:06,000
它事實上是一個

342
00:14:06,000 --> 00:14:08,000
非常Portable的東西

343
00:14:08,000 --> 00:14:10,000
那你今天換了一個作業系統

344
00:14:10,000 --> 00:14:11,000
它也不用去特別去改

345
00:14:11,000 --> 00:14:12,000
特別多東西

346
00:14:12,000 --> 00:14:13,000
舉個例子

347
00:14:13,000 --> 00:14:14,000
Linux如果你要是

348
00:14:14,000 --> 00:14:15,000
你要上一個資料夾的話

349
00:14:15,000 --> 00:14:17,000
都是RM-RF

350
00:14:17,000 --> 00:14:18,000
那Windows的話

351
00:14:18,000 --> 00:14:20,000
都是RM-DIR-SA-Q

352
00:14:20,000 --> 00:14:24,000
那ANT無論在哪一個環境

353
00:14:25,000 --> 00:14:27,000
就算是Linux或Windows

354
00:14:27,000 --> 00:14:29,000
它的Build點菜都只要

355
00:14:29,000 --> 00:14:30,000
Specify這一個

356
00:14:30,000 --> 00:14:33,000
Delete DIR就OK了

357
00:14:33,000 --> 00:14:35,000
那好我們來仔細看一下

358
00:14:35,000 --> 00:14:37,000
Extension Template

359
00:14:37,000 --> 00:14:38,000
它官方所提供的

360
00:14:38,000 --> 00:14:40,000
要Build的一個Extension

361
00:14:40,000 --> 00:14:41,000
到底

362
00:14:41,000 --> 00:14:43,000
的Workflow會長怎樣

363
00:14:43,000 --> 00:14:46,000
那第一件事是看向ALL

364
00:14:46,000 --> 00:14:48,000
那ALL後面會跑到

365
00:14:48,000 --> 00:14:50,000
它說它會Depend一個

366
00:14:50,000 --> 00:14:52,000
任務叫Extension

367
00:14:52,000 --> 00:14:54,000
然後Extension又會Depend到兩個任務

368
00:14:54,000 --> 00:14:56,000
一個是Dex

369
00:14:56,000 --> 00:14:57,000
另外一個是Job

370
00:14:57,000 --> 00:14:58,000
各位如果一路看下去

371
00:14:58,000 --> 00:15:00,000
我會非常confuse

372
00:15:00,000 --> 00:15:02,000
它到底在說什麼東西

373
00:15:02,000 --> 00:15:03,000
有夠複雜的

374
00:15:03,000 --> 00:15:04,000
那

375
00:15:06,000 --> 00:15:08,000
如果用試用圖來表示的話

376
00:15:08,000 --> 00:15:09,000
大概可以這樣

377
00:15:09,000 --> 00:15:11,000
來表示

378
00:15:12,000 --> 00:15:13,000
那

379
00:15:13,000 --> 00:15:15,000
還有一件事要注意的是呢

380
00:15:16,000 --> 00:15:18,000
NT的

381
00:15:18,000 --> 00:15:20,000
它的Target Dependent

382
00:15:20,000 --> 00:15:22,000
是由前面的先跑

383
00:15:22,000 --> 00:15:23,000
舉個例子

384
00:15:23,000 --> 00:15:24,000
如果要是我們

385
00:15:24,000 --> 00:15:25,000
有一行

386
00:15:25,000 --> 00:15:26,000
旁邊叫做Target Name

387
00:15:26,000 --> 00:15:27,000
D

388
00:15:27,000 --> 00:15:28,000
然後Depends

389
00:15:28,000 --> 00:15:29,000
CBA

390
00:15:29,000 --> 00:15:30,000
那它的

391
00:15:30,000 --> 00:15:31,000
Execution Order的話

392
00:15:31,000 --> 00:15:32,000
會是倒過來的

393
00:15:32,000 --> 00:15:33,000
A

394
00:15:33,000 --> 00:15:34,000
B

395
00:15:34,000 --> 00:15:34,000


396
00:15:34,000 --> 00:15:36,000
然後最後才是我們的D

397
00:15:36,000 --> 00:15:37,000
那我們

398
00:15:37,000 --> 00:15:38,000
以

399
00:15:38,000 --> 00:15:39,000
以

400
00:15:39,000 --> 00:15:40,000
以剛剛的

401
00:15:40,000 --> 00:15:41,000
其中一行為例子

402
00:15:41,000 --> 00:15:42,000
Target Name

403
00:15:42,000 --> 00:15:43,000
Extension

404
00:15:43,000 --> 00:15:44,000
Job

405
00:15:44,000 --> 00:15:45,000
Depend on

406
00:15:45,000 --> 00:15:46,000
Job

407
00:15:46,000 --> 00:15:47,000
All Extension

408
00:15:47,000 --> 00:15:48,000
以及Dex All Extension

409
00:15:48,000 --> 00:15:50,000
它第一個會跑的是

410
00:15:50,000 --> 00:15:51,000
Dex All Extension

411
00:15:51,000 --> 00:15:52,000
而不是Job

412
00:15:54,000 --> 00:15:55,000
好 那

413
00:15:55,000 --> 00:15:56,000
於是我們就可以

414
00:15:56,000 --> 00:15:57,000
一路

415
00:15:57,000 --> 00:15:58,000
從第一行開始

416
00:15:59,000 --> 00:16:00,000
去

417
00:16:00,000 --> 00:16:01,000
一路Traceback

418
00:16:01,000 --> 00:16:02,000
去了解

419
00:16:02,000 --> 00:16:03,000
它第一件事

420
00:16:03,000 --> 00:16:04,000
要做的是什麼

421
00:16:05,000 --> 00:16:07,000
第一個Depend on的是Extension

422
00:16:07,000 --> 00:16:08,000
Extension

423
00:16:08,000 --> 00:16:09,000
Depend on這兩個

424
00:16:09,000 --> 00:16:11,000
然後先跑的是Dex All Extension

425
00:16:11,000 --> 00:16:12,000
一路追上去

426
00:16:12,000 --> 00:16:13,000
我們才知道

427
00:16:13,000 --> 00:16:14,000
它第一件事呢

428
00:16:14,000 --> 00:16:15,000
所做的都是呢

429
00:16:15,000 --> 00:16:16,000
它會把第三方的Library

430
00:16:16,000 --> 00:16:17,000
全部解開

431
00:16:19,000 --> 00:16:20,000
那整個Workflow

432
00:16:20,000 --> 00:16:21,000
大概是長這樣

433
00:16:23,000 --> 00:16:24,000
好 那

434
00:16:24,000 --> 00:16:25,000
聽起來

435
00:16:25,000 --> 00:16:26,000
目前為止很棒啊

436
00:16:26,000 --> 00:16:27,000
我要做一個

437
00:16:28,000 --> 00:16:30,000
把整個App Inventor架起來

438
00:16:30,000 --> 00:16:31,000
要做什麼事

439
00:16:31,000 --> 00:16:32,000
第一件事

440
00:16:32,000 --> 00:16:33,000
Add Home的Report

441
00:16:33,000 --> 00:16:34,000
然後接下來

442
00:16:34,000 --> 00:16:35,000
把File Frame的邊跑起來

443
00:16:35,000 --> 00:16:36,000
然後後面呢

444
00:16:36,000 --> 00:16:37,000
我把

445
00:16:38,000 --> 00:16:40,000
App Inventor 2的Server

446
00:16:40,000 --> 00:16:41,000
Build並且跑起來

447
00:16:41,000 --> 00:16:43,000
然後接下來開始寫Code

448
00:16:43,000 --> 00:16:44,000
然後寫完之後呢

449
00:16:44,000 --> 00:16:45,000
上傳上去

450
00:16:45,000 --> 00:16:46,000
去做測試

451
00:16:46,000 --> 00:16:47,000
哇 那聽起來很讚吧

452
00:16:47,000 --> 00:16:49,000
事實上並沒有

453
00:16:49,000 --> 00:16:50,000
沒那麼簡單

454
00:16:50,000 --> 00:16:51,000
那第一個問題呢

455
00:16:51,000 --> 00:16:52,000
如果要是你跟我

456
00:16:52,000 --> 00:16:53,000
一樣都是一個

457
00:16:53,000 --> 00:16:54,000
Windows的愛好者的話

458
00:16:55,000 --> 00:16:57,000
那就會遇到這個問題

459
00:16:58,000 --> 00:16:59,000
它都會在跑到

460
00:16:59,000 --> 00:17:00,000
進度調到100%的時候

461
00:17:00,000 --> 00:17:02,000
上傳的時候都會卡住

462
00:17:02,000 --> 00:17:03,000
原因是為什麼呢

463
00:17:03,000 --> 00:17:04,000
原因的話呢

464
00:17:04,000 --> 00:17:06,000
我們來仔細看一下Log

465
00:17:06,000 --> 00:17:07,000
那Log的話

466
00:17:07,000 --> 00:17:08,000
它中間都會有一條

467
00:17:08,000 --> 00:17:09,000
就是File Not Found Exception

468
00:17:09,000 --> 00:17:10,000
那為什麼

469
00:17:10,000 --> 00:17:11,000
原因就是因為

470
00:17:11,000 --> 00:17:12,000
在於Google的Project

471
00:17:12,000 --> 00:17:14,000
它會有一個Naming Convention

472
00:17:14,000 --> 00:17:15,000
如果要是底下

473
00:17:15,000 --> 00:17:16,000
不知道有沒有幾位大大

474
00:17:16,000 --> 00:17:18,000
有玩過那個

475
00:17:18,000 --> 00:17:20,000
像是father之類的

476
00:17:20,000 --> 00:17:23,000
那Google有一套

477
00:17:23,000 --> 00:17:25,000
很有名的father叫FL

478
00:17:25,000 --> 00:17:26,000
那他們的Naming Convention

479
00:17:26,000 --> 00:17:28,000
一樣都會在裡面塞冒號

480
00:17:28,000 --> 00:17:30,000
那這會導致什麼問題

481
00:17:30,000 --> 00:17:32,000
那問題都會導致呢

482
00:17:32,000 --> 00:17:33,000
Windows事實上

483
00:17:33,000 --> 00:17:35,000
沒辦法支援冒號

484
00:17:35,000 --> 00:17:37,000
在你的檔名之中

485
00:17:37,000 --> 00:17:38,000
因為Windows把冒號

486
00:17:38,000 --> 00:17:39,000
當作一個Special Character

487
00:17:39,000 --> 00:17:40,000
有特別的意義

488
00:17:40,000 --> 00:17:41,000
所以它都會爛掉

489
00:17:42,000 --> 00:17:44,000
那我們該怎麼解決這個問題呢

490
00:17:44,000 --> 00:17:45,000
很簡單

491
00:17:45,000 --> 00:17:46,000
不要用Windows

492
00:17:46,000 --> 00:17:47,000
QQ

493
00:17:48,000 --> 00:17:49,000
所以事實上

494
00:17:49,000 --> 00:17:51,000
我這邊比較想到一個Solution

495
00:17:51,000 --> 00:17:53,000
就是我們今天可以用Linux

496
00:17:53,000 --> 00:17:55,000
作為一個Host System

497
00:17:55,000 --> 00:17:56,000
那我這邊

498
00:17:56,000 --> 00:17:59,000
有把Falcon File改成Docker的版本

499
00:17:59,000 --> 00:18:00,000
可以比較Lineway一點

500
00:18:00,000 --> 00:18:02,000
你不用在VM裡面再開一個VM

501
00:18:04,000 --> 00:18:05,000
好

502
00:18:05,000 --> 00:18:06,000
那第二個問題呢

503
00:18:06,000 --> 00:18:08,000
Unable to load Java file

504
00:18:08,000 --> 00:18:10,000
那這個問題會發生在

505
00:18:10,000 --> 00:18:12,000
如果要是你今天是打算

506
00:18:12,000 --> 00:18:14,000
在你自己的本機上做測試的時候

507
00:18:14,000 --> 00:18:16,000
那原因是為什麼呢

508
00:18:16,000 --> 00:18:17,000
好

509
00:18:17,000 --> 00:18:21,000
那如果各位照著預設官方的流程去做的話

510
00:18:21,000 --> 00:18:23,000
而整個網路架構會長得這樣

511
00:18:23,000 --> 00:18:26,000
那首先是你的APP Inventor 2 Server

512
00:18:26,000 --> 00:18:29,000
可能會透過VM的NAT去做轉換

513
00:18:29,000 --> 00:18:31,000
然後你Emulator呢

514
00:18:31,000 --> 00:18:32,000
或者是你的手機

515
00:18:32,000 --> 00:18:35,000
也會透過一個NAT去做轉換

516
00:18:35,000 --> 00:18:36,000
然後連到Host

517
00:18:37,000 --> 00:18:38,000
那這樣有什麼問題

518
00:18:38,000 --> 00:18:39,000
那問題就是在於

519
00:18:39,000 --> 00:18:41,000
APP Inventor 2

520
00:18:41,000 --> 00:18:43,000
它預設的Address

521
00:18:43,000 --> 00:18:46,000
它上面都會說是Localhost 8888

522
00:18:46,000 --> 00:18:47,000
它都會把這個

523
00:18:47,000 --> 00:18:48,000
這件事呢

524
00:18:48,000 --> 00:18:50,000
也都有傳到Emulator說

525
00:18:50,000 --> 00:18:53,000
請去Localhost 8888拿檔案

526
00:18:53,000 --> 00:18:56,000
那Emulator都會非常納悶說

527
00:18:56,000 --> 00:18:58,000
啊我又沒有開著Postman

528
00:18:58,000 --> 00:19:00,000
你叫我去哪裡拿檔案

529
00:19:00,000 --> 00:19:02,000
那Solution就是

530
00:19:02,000 --> 00:19:04,000
做一個Post Forwarding的動作

531
00:19:04,000 --> 00:19:06,000
那如果要是

532
00:19:06,000 --> 00:19:08,000
你在VM那邊呢

533
00:19:08,000 --> 00:19:10,000
都要去調一下Command

534
00:19:10,000 --> 00:19:13,000
去把你VM內的Post

535
00:19:13,000 --> 00:19:14,000
去Expose到Host上

536
00:19:14,000 --> 00:19:16,000
然後在Emulator上呢

537
00:19:16,000 --> 00:19:19,000
就要透過ADB Reverse的Command

538
00:19:19,000 --> 00:19:22,000
去把東西拉出來

539
00:19:22,000 --> 00:19:24,000
去做一個Post Forwarding

540
00:19:26,000 --> 00:19:27,000
好

541
00:19:27,000 --> 00:19:28,000
接下來第三個Issue呢

542
00:19:28,000 --> 00:19:31,000
就是如果各位有寫過Java的話

543
00:19:31,000 --> 00:19:32,000
或者說沒有寫過

544
00:19:32,000 --> 00:19:33,000
就會遇到

545
00:19:33,000 --> 00:19:35,000
像這樣很麻煩的一個問題

546
00:19:35,000 --> 00:19:37,000
就是你今天要寫一個

547
00:19:37,000 --> 00:19:40,000
寫一個Runable之類的

548
00:19:40,000 --> 00:19:42,000
就要寫那麼一大唇Code

549
00:19:42,000 --> 00:19:43,000
我今天只不過是

550
00:19:43,000 --> 00:19:45,000
要寫一個小小的Thread

551
00:19:45,000 --> 00:19:47,000
我都要寫那麼大頭Code

552
00:19:47,000 --> 00:19:49,000
那事實上是很麻煩的一件事

553
00:19:49,000 --> 00:19:52,000
而且也會導致觀感不佳

554
00:19:52,000 --> 00:19:54,000
那有一個很棒的東西叫Lambda

555
00:19:54,000 --> 00:19:58,000
那Lambda它可以把Code極簡化

556
00:19:58,000 --> 00:19:59,000
那請看一下

557
00:19:59,000 --> 00:20:00,000
上面的Code都要寫個不知道幾行

558
00:20:00,000 --> 00:20:02,000
1 2 3 4 5 6

559
00:20:02,000 --> 00:20:04,000
1 2 3 4

560
00:20:04,000 --> 00:20:05,000
隨便啦

561
00:20:05,000 --> 00:20:06,000
我算數不好

562
00:20:06,000 --> 00:20:08,000
那如果要是有Lambda的話

563
00:20:08,000 --> 00:20:11,000
我們都可以把所有東西簡縮成一行

564
00:20:11,000 --> 00:20:13,000
那聽起來很讚對吧

565
00:20:13,000 --> 00:20:16,000
那問題是什麼

566
00:20:16,000 --> 00:20:18,000
問題是你只要一旦用Lambda

567
00:20:18,000 --> 00:20:20,000
它編起來都會爛掉

568
00:20:20,000 --> 00:20:23,000
那爛掉的其中一個原因就是因為

569
00:20:23,000 --> 00:20:26,000
它的Java Version是7

570
00:20:26,000 --> 00:20:29,000
那Lambda事實上是

571
00:20:29,000 --> 00:20:31,000
Java 8以上才會支援的

572
00:20:31,000 --> 00:20:34,000
所以你這樣編下去就會有問題

573
00:20:34,000 --> 00:20:37,000
那我們就算把Java的Compiler Version改成8

574
00:20:37,000 --> 00:20:38,000
會發生什麼事呢

575
00:20:38,000 --> 00:20:41,000
那它的Toolset也一樣會不支援

576
00:20:41,000 --> 00:20:45,000
它會說你的Lambda解析不出來

577
00:20:45,000 --> 00:20:46,000
它不知道怎麼轉

578
00:20:46,000 --> 00:20:48,000
然後它就會爛掉

579
00:20:48,000 --> 00:20:50,000
所以Solution我沒想到

580
00:20:50,000 --> 00:20:53,000
就只能不要寫Lambda了

581
00:20:53,000 --> 00:20:55,000
好那接下來介紹一下

582
00:20:55,000 --> 00:20:59,000
我這次Ransomware的Implementation

583
00:20:59,000 --> 00:21:03,000
那我整個Ransomware Workflow會長這樣子

584
00:21:03,000 --> 00:21:07,000
首先使用者在他的手機上

585
00:21:07,000 --> 00:21:09,000
載入我惡意的Ransomware

586
00:21:09,000 --> 00:21:12,000
然後接下來他會在他的手機上

587
00:21:12,000 --> 00:21:16,000
Generate一把AS256的Key

588
00:21:16,000 --> 00:21:18,000
然後後面他會把這把Key

589
00:21:18,000 --> 00:21:21,000
拿去加密使用者的檔案

590
00:21:21,000 --> 00:21:23,000
然後使用者的檔案全部被加密完之後

591
00:21:23,000 --> 00:21:26,000
他會把這把Key再透過RSA

592
00:21:26,000 --> 00:21:30,000
送到我們的駭客Server那邊

593
00:21:30,000 --> 00:21:33,000
然後駭客Server就可以以這把Key

594
00:21:33,000 --> 00:21:37,000
作為要脅去要贖金

595
00:21:37,000 --> 00:21:39,000
那我整個AXRansom的

596
00:21:39,000 --> 00:21:40,000
Software Architecture

597
00:21:40,000 --> 00:21:42,000
大概可以分成這樣子

598
00:21:42,000 --> 00:21:46,000
我把它分成三個元件

599
00:21:46,000 --> 00:21:48,000
在Client的部分

600
00:21:48,000 --> 00:21:49,000
我會用JAR

601
00:21:49,000 --> 00:21:54,000
把我的Ransomware的一些基礎的功能

602
00:21:54,000 --> 00:21:57,000
做成一個Ransomware Toolkit的JAR

603
00:21:57,000 --> 00:21:58,000
然後後面呢

604
00:21:58,000 --> 00:22:02,000
主要是會用一個AXRansom的Launcher

605
00:22:02,000 --> 00:22:07,000
去把這個Toolkit內的函數帶起來

606
00:22:07,000 --> 00:22:09,000
然後另外我會用Python

607
00:22:09,000 --> 00:22:11,000
簡單的寫一個TCP Server

608
00:22:11,000 --> 00:22:15,000
去接收使用者所傳來的資料

609
00:22:15,000 --> 00:22:18,000
那這時候各位可能會有一個問題

610
00:22:18,000 --> 00:22:21,000
你今天在做這個AX的Plugin

611
00:22:21,000 --> 00:22:24,000
為什麼不直接寫成一個東西就好了

612
00:22:24,000 --> 00:22:26,000
為什麼要把它拆成兩個

613
00:22:27,000 --> 00:22:29,000
那原因就是

614
00:22:29,000 --> 00:22:32,000
在測試我們的code的時候

615
00:22:32,000 --> 00:22:34,000
就會發生一個很麻煩的現象

616
00:22:34,000 --> 00:22:36,000
我們一旦測試下去

617
00:22:56,000 --> 00:23:16,000
測試中...

618
00:23:16,000 --> 00:23:20,000
測試的話有兩種方法

619
00:23:20,000 --> 00:23:22,000
第一個是在你的本機上做測試

620
00:23:22,000 --> 00:23:25,000
另外一個是在Android Emulator上測試

621
00:23:25,000 --> 00:23:27,000
它們兩個各有優缺點

622
00:23:27,000 --> 00:23:29,000
那在本機測試上的優點都是

623
00:23:29,000 --> 00:23:31,000
稍微比較快一點點

624
00:23:31,000 --> 00:23:35,000
然後是用你自己本地的JVM去跑

625
00:23:35,000 --> 00:23:39,000
但因為由於是用你自己的本身機器做跑

626
00:23:39,000 --> 00:23:42,000
會有一些function不支援

627
00:23:42,000 --> 00:23:43,000
像Log.1

628
00:23:43,000 --> 00:23:47,000
那在Android Emulator上做測試會有什麼缺點呢

629
00:23:47,000 --> 00:23:49,000
會稍微比較慢一點

630
00:23:49,000 --> 00:23:51,000
而且如果要是今天你做一些

631
00:23:51,000 --> 00:23:53,000
比較破壞性的操作

632
00:23:53,000 --> 00:23:58,000
你可能要用Snapshot把整個環境還原出來

633
00:23:58,000 --> 00:24:02,000
但優點是什麼都會比較準確

634
00:24:02,000 --> 00:24:08,000
那這邊後面會稍微介紹一下一些密碼演算法

635
00:24:08,000 --> 00:24:10,000
因為可能在座的觀眾

636
00:24:10,000 --> 00:24:12,000
有些沒有人修過密碼區

637
00:24:12,000 --> 00:24:14,000
或者對於密碼區有相關的知識

638
00:24:14,000 --> 00:24:16,000
那剛剛講的AES是什麼

639
00:24:16,000 --> 00:24:19,000
AES的全名叫做Advanced Encryption Standard

640
00:24:19,000 --> 00:24:22,000
那它是一個Block Slider

641
00:24:22,000 --> 00:24:25,000
那它的運作方法就是

642
00:24:25,000 --> 00:24:27,000
今天有一大串資料進來

643
00:24:27,000 --> 00:24:29,000
它會去把它做一個分割處理的動作

644
00:24:29,000 --> 00:24:36,000
然後每次都會只加密一小個Chunk

645
00:24:36,000 --> 00:24:38,000
或者說一小個Block

646
00:24:38,000 --> 00:24:41,000
那除此之外它是一個Symmetric的Cipher

647
00:24:41,000 --> 00:24:44,000
那Symmetric都是對稱式

648
00:24:44,000 --> 00:24:46,000
那它的意義就是

649
00:24:46,000 --> 00:24:48,000
今天有一個箱子

650
00:24:48,000 --> 00:24:50,000
然後上面有一個鎖

651
00:24:50,000 --> 00:24:52,000
那你今天有一把鑰匙

652
00:24:52,000 --> 00:24:54,000
你要有這把鑰匙才可以去

653
00:24:54,000 --> 00:24:57,000
在這個鎖上做加密以及解密的動作

654
00:24:57,000 --> 00:25:01,000
把那個鎖頭轉開或者是鎖進去

655
00:25:01,000 --> 00:25:03,000
那AES還有幾個特點都是

656
00:25:03,000 --> 00:25:05,000
它是一個World Wide Standard

657
00:25:05,000 --> 00:25:08,000
然後而且還非常能被Break

658
00:25:08,000 --> 00:25:12,000
那我們這次的Skin是把它拿來做一個

659
00:25:12,000 --> 00:25:18,000
加密使用者資料的一個工具

660
00:25:18,000 --> 00:25:25,000
那RSA的由來就是由這三個傢伙所發明的

661
00:25:25,000 --> 00:25:29,000
那它是基於指引數分解的難題

662
00:25:29,000 --> 00:25:32,000
那它跟AES有什麼不同之處呢

663
00:25:32,000 --> 00:25:36,000
那最主要是RSA是一個

664
00:25:36,000 --> 00:25:39,000
Asymmetric Encryption Cyber

665
00:25:39,000 --> 00:25:42,000
那跟AES不一樣

666
00:25:42,000 --> 00:25:45,000
它的差別就是AES是跟一把Key

667
00:25:45,000 --> 00:25:47,000
同一把Key做加密檢驗

668
00:25:47,000 --> 00:25:50,000
但是RSA則是用兩把

669
00:25:50,000 --> 00:25:52,000
一把做加密一把做檢疫

670
00:25:52,000 --> 00:25:56,000
那在這個我的Skin裡面呢

671
00:25:56,000 --> 00:25:59,000
它是拿去加密User的Key

672
00:25:59,000 --> 00:26:02,000
那為什麼要這麼做呢

673
00:26:02,000 --> 00:26:06,000
如果要是直接把我們今天User的Key

674
00:26:06,000 --> 00:26:09,000
直接去用網路傳輸的話呢

675
00:26:09,000 --> 00:26:12,000
事實上如果要是你有用過Bioshark

676
00:26:12,000 --> 00:26:14,000
或者之類的網路監聽風暴工具

677
00:26:14,000 --> 00:26:17,000
你都可以順利的直接把這個Key撈下來

678
00:26:17,000 --> 00:26:22,000
那就Hacker就沒理由跟你要贖金了嘛

679
00:26:22,000 --> 00:26:25,000
那如果要是我們有RSA呢

680
00:26:25,000 --> 00:26:27,000
我們會把這個Key打成一堆亂數

681
00:26:27,000 --> 00:26:31,000
那如果要是我們的使用者

682
00:26:31,000 --> 00:26:33,000
沒有那個Decryption Key的話呢

683
00:26:33,000 --> 00:26:35,000
事實上是沒有辦法把那個

684
00:26:35,000 --> 00:26:39,000
檔案的鑰匙區做解開的動作

685
00:26:40,000 --> 00:26:42,000
好

686
00:26:42,000 --> 00:26:43,000
那有的時候呢

687
00:26:43,000 --> 00:26:45,000
我們整個Indication Protocol會長這樣

688
00:26:45,000 --> 00:26:47,000
那如果要是今天呢

689
00:26:47,000 --> 00:26:52,000
使用者沒有RSA的解密金鑰的話呢

690
00:26:52,000 --> 00:26:55,000
事實上都沒辦法還原

691
00:26:55,000 --> 00:26:58,000
我們使用者的檔案

692
00:26:58,000 --> 00:27:01,000
但是就算真的撈到了

693
00:27:01,000 --> 00:27:03,000
網路上傳輸的封包呢

694
00:27:03,000 --> 00:27:06,000
你也沒辦法去把那個封包

695
00:27:06,000 --> 00:27:07,000
去做解開的動作

696
00:27:07,000 --> 00:27:09,000
因為它被RSA所加密的

697
00:27:09,000 --> 00:27:11,000
RSA必須要有那個解密金鑰

698
00:27:11,000 --> 00:27:16,000
才可以去把我們檔案的金鑰解開來

699
00:27:16,000 --> 00:27:17,000
好

700
00:27:17,000 --> 00:27:20,000
那這以上都是我這次的Presentation

701
00:27:20,000 --> 00:27:23,000
我來看一下Slido有什麼問題

702
00:27:37,000 --> 00:27:58,000
我來看一下學校行動APP課程助教

703
00:27:58,000 --> 00:28:03,000
不好意思助教我給你造成很大的麻煩

704
00:28:03,000 --> 00:28:06,000
這堂課事實上是一個通識課程不好意思

705
00:28:06,000 --> 00:28:08,000
然後薑母鴨好吃嗎

706
00:28:08,000 --> 00:28:10,000
還可以啦

707
00:28:10,000 --> 00:28:12,000
但就那樣

708
00:28:12,000 --> 00:28:14,000
好

709
00:28:14,000 --> 00:28:16,000
在場各位有問題嗎

710
00:28:20,000 --> 00:28:22,000
現場有問題的可以舉手

711
00:28:22,000 --> 00:28:24,000
會過去遞麥克風

712
00:28:25,000 --> 00:28:28,000
有嗎

713
00:28:37,000 --> 00:28:40,000
可否詳細介紹一下密碼學

714
00:28:40,000 --> 00:28:44,000
如果要是對密碼學有興趣的話

715
00:28:44,000 --> 00:28:47,000
那在台北我推薦去修

716
00:28:47,000 --> 00:28:55,000
有陳君明老師的密碼學導論

717
00:28:55,000 --> 00:28:58,000
台大數學系的密碼學導論

718
00:28:58,000 --> 00:28:59,000
那我個人的話

719
00:28:59,000 --> 00:29:02,000
密碼學只能算是學過一點點

720
00:29:02,000 --> 00:29:06,000
詳細介紹我可能做不到

721
00:29:06,000 --> 00:29:08,000
或者是你可以把問題打得更仔細一點

722
00:29:08,000 --> 00:29:12,000
都是詳細介紹密碼學的哪個部分

723
00:29:12,000 --> 00:29:14,000
因為密碼學其實有很多部分

724
00:29:14,000 --> 00:29:17,000
像是對稱式以及非對稱式加密

725
00:29:17,000 --> 00:29:21,000
最近有一些比較新的議題

726
00:29:21,000 --> 00:29:25,000
像是量子 後量子密碼學

727
00:29:25,000 --> 00:29:27,000
這有的沒的

728
00:29:27,000 --> 00:29:29,000
有成功調過人嗎

729
00:29:29,000 --> 00:29:31,000
我調過來

730
00:29:31,000 --> 00:29:33,000
如果要是我成功調過人的話

731
00:29:33,000 --> 00:29:35,000
我可能不會站在這裡

732
00:29:35,000 --> 00:29:38,000
我可能在監獄裡面

733
00:29:38,000 --> 00:29:41,000
是不是使用AI2的APP

734
00:29:41,000 --> 00:29:43,000
就不用使用者同意

735
00:29:43,000 --> 00:29:45,000
關於這件事的話

736
00:29:45,000 --> 00:29:47,000
我也有很好奇過

737
00:29:47,000 --> 00:29:49,000
我有稍微去調查一下

738
00:29:49,000 --> 00:29:53,000
只有在比較舊的手機版本

739
00:29:53,000 --> 00:29:56,000
才不用使用者同意權限的

740
00:29:56,000 --> 00:29:58,000
比較新的話

741
00:29:58,000 --> 00:29:59,000
因為Android的設計

742
00:29:59,000 --> 00:30:04,000
它會把權限擋住

743
00:30:04,000 --> 00:30:06,000
會跳出一個視傳說

744
00:30:06,000 --> 00:30:09,000
你是否同意使用者

745
00:30:10,000 --> 00:30:13,000
存取你的檔案之類的

746
00:30:13,000 --> 00:30:15,000
所以比較新的版本

747
00:30:15,000 --> 00:30:17,000
必須讓使用者手動按下說

748
00:30:17,000 --> 00:30:18,000
他同意

749
00:30:18,000 --> 00:30:23,000
同意去操作你的檔案才行

750
00:30:23,000 --> 00:30:25,000
但是我們這個App Inventor

751
00:30:25,000 --> 00:30:27,000
它竟然都已經裝了這個App

752
00:30:27,000 --> 00:30:29,000
然後打算去刷上Code

753
00:30:29,000 --> 00:30:31,000
它八九十趴都會按下同意

754
00:30:31,000 --> 00:30:32,000
所以我們可以把

755
00:30:32,000 --> 00:30:33,000
甚至說

756
00:30:33,000 --> 00:30:36,000
我們可以在大多數的情況下

757
00:30:36,000 --> 00:30:38,000
都可以取得權限

758
00:30:38,000 --> 00:30:40,000
那它裝了App Inventor

759
00:30:40,000 --> 00:30:41,000
結果不給權限

760
00:30:41,000 --> 00:30:43,000
我也不知道是為什麼

761
00:30:56,000 --> 00:30:59,000
現場如果沒有其他的問題的話

762
00:30:59,000 --> 00:31:01,000
那我們這一場就感謝一下講者

763
00:31:01,000 --> 00:31:03,000
帶來精彩的議程

